
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the .XML file
// Every change you make here gets lost in the next full rebuild!
// This File is normally built as an include in AxisOriginPyImp.cpp! It's not intended to be in a project!

#include <boost/filesystem/path.hpp>
#include <boost/filesystem/operations.hpp>
#include <boost/filesystem/exception.hpp>
#include <Base/PyObjectBase.h>
#include <Base/Console.h>
#include <Base/Exception.h>
#include <CXX/Objects.hxx>

#if defined(__clang__)
# pragma clang diagnostic push
# pragma clang diagnostic ignored "-Wdeprecated-declarations"
#endif

using Base::streq;
using namespace Gui;

/// Type structure of AxisOriginPy
PyTypeObject AxisOriginPy::Type = {
    PyVarObject_HEAD_INIT(&PyType_Type,0)
    "Gui.AxisOrigin",     /*tp_name*/
    sizeof(AxisOriginPy),                       /*tp_basicsize*/
    0,                                                /*tp_itemsize*/
    /* methods */
    PyDestructor,                                     /*tp_dealloc*/
#if PY_VERSION_HEX >= 0x03080000
    0,                                                /*tp_vectorcall_offset*/
#else
    nullptr,                                          /*tp_print*/
#endif
    nullptr,                                          /*tp_getattr*/
    nullptr,                                          /*tp_setattr*/
    nullptr,                                          /*tp_compare*/
    __repr,                                           /*tp_repr*/
    nullptr,                                          /*tp_as_number*/
    nullptr,                                          /*tp_as_sequence*/
    nullptr,                                          /*tp_as_mapping*/
    nullptr,                                          /*tp_hash*/
    nullptr,                                          /*tp_call */
    nullptr,                                          /*tp_str  */
    __getattro,                                       /*tp_getattro*/
    __setattro,                                       /*tp_setattro*/
    /* --- Functions to access object as input/output buffer ---------*/
    nullptr,                                          /* tp_as_buffer */
    /* --- Flags to define presence of optional/expanded features */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT,        /*tp_flags */
    "Gui.AxisOrigin class.\n"
    "\n"
    "Class for creating a Coin3D representation of a coordinate system.",           /*tp_doc */
    nullptr,                                          /*tp_traverse */
    nullptr,                                          /*tp_clear */
    nullptr,                                          /*tp_richcompare */
    0,                                                /*tp_weaklistoffset */
    nullptr,                                          /*tp_iter */
    nullptr,                                          /*tp_iternext */
    Gui::AxisOriginPy::Methods,                     /*tp_methods */
    nullptr,                                          /*tp_members */
    Gui::AxisOriginPy::GetterSetter,                     /*tp_getset */
    &Base::BaseClassPy::Type,                        /*tp_base */
    nullptr,                                          /*tp_dict */
    nullptr,                                          /*tp_descr_get */
    nullptr,                                          /*tp_descr_set */
    0,                                                /*tp_dictoffset */
    __PyInit,                                         /*tp_init */
    nullptr,                                          /*tp_alloc */
    Gui::AxisOriginPy::PyMake,/*tp_new */
    nullptr,                                          /*tp_free   Low-level free-memory routine */
    nullptr,                                          /*tp_is_gc  For PyObject_IS_GC */
    nullptr,                                          /*tp_bases */
    nullptr,                                          /*tp_mro    method resolution order */
    nullptr,                                          /*tp_cache */
    nullptr,                                          /*tp_subclasses */
    nullptr,                                          /*tp_weaklist */
    nullptr,                                          /*tp_del */
    0,                                                /*tp_version_tag */
    nullptr                                           /*tp_finalize */
#if PY_VERSION_HEX >= 0x03090000
    ,nullptr                                          /*tp_vectorcall */
#if PY_VERSION_HEX >= 0x030c0000
    ,0                                                /*tp_watched */
#endif
#elif PY_VERSION_HEX >= 0x03080000
    ,nullptr                                          /*tp_vectorcall */
    /* bpo-37250: kept for backwards compatibility in CPython 3.8 only */
    ,nullptr                                          /*tp_print */
#endif
};

/// Methods structure of AxisOriginPy
PyMethodDef AxisOriginPy::Methods[] = {
    {"getElementPicked",
        reinterpret_cast<PyCFunction>( staticCallback_getElementPicked ),
        METH_VARARGS,
        "getElementPicked(pickedPoint) -> str\n"
        "\n"
        "Returns the picked element name.\n"
        "\n"
        "pickedPoint : coin.SoPickedPoint"
    },
    {"getDetailPath",
        reinterpret_cast<PyCFunction>( staticCallback_getDetailPath ),
        METH_VARARGS,
        "getDetailPath(subname, path) -> coin.SoDetail or None\n"
        "\n"
        "Returns Coin detail of a subelement.\n"
        "Note: Not fully implemented. Currently only returns None.\n"
        "\n"
        "subname : str\n"
        "    String reference to the subelement.\n"
        "path: coin.SoPath\n"
        "    Output Coin path leading to the returned element detail."
    },
    {nullptr, nullptr, 0, nullptr}		/* Sentinel */
};



/// Attribute structure of AxisOriginPy
PyGetSetDef AxisOriginPy::GetterSetter[] = {
    {"AxisLength",
        (getter) staticCallback_getAxisLength,
        (setter) staticCallback_setAxisLength,
        "Get/set the axis length.",
        nullptr
    },
    {"LineWidth",
        (getter) staticCallback_getLineWidth,
        (setter) staticCallback_setLineWidth,
        "Get/set the axis line width for rendering.",
        nullptr
    },
    {"PointSize",
        (getter) staticCallback_getPointSize,
        (setter) staticCallback_setPointSize,
        "Get/set the origin point size for rendering.",
        nullptr
    },
    {"Scale",
        (getter) staticCallback_getScale,
        (setter) staticCallback_setScale,
        "Get/set auto scaling factor, 0 to disable.",
        nullptr
    },
    {"Plane",
        (getter) staticCallback_getPlane,
        (setter) staticCallback_setPlane,
        "Get/set axis plane size and distance to axis line.",
        nullptr
    },
    {"Labels",
        (getter) staticCallback_getLabels,
        (setter) staticCallback_setLabels,
        "Get/set axis component names as a dictionary.\n"
        "Available keys are:\n"
        "'O': origin\n"
        "'X': x axis\n"
        "'Y': y axis\n"
        "'Z': z axis\n"
        "'XY': xy plane\n"
        "'XZ': xz plane\n"
        "'YZ': yz plane",
        nullptr
    },
    {"Node",
        (getter) staticCallback_getNode,
        (setter) staticCallback_setNode,
        "Get the Coin3D node.",
        nullptr
    },
    {nullptr, nullptr, nullptr, nullptr, nullptr}		/* Sentinel */
};

// getElementPicked() callback and implementer
// PyObject*  AxisOriginPy::getElementPicked(PyObject *args){};
// has to be implemented in AxisOriginPyImp.cpp
PyObject * AxisOriginPy::staticCallback_getElementPicked (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'getElementPicked' of 'Gui.AxisOrigin' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }


    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<AxisOriginPy*>(self)->getElementPicked(args);
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// getDetailPath() callback and implementer
// PyObject*  AxisOriginPy::getDetailPath(PyObject *args){};
// has to be implemented in AxisOriginPyImp.cpp
PyObject * AxisOriginPy::staticCallback_getDetailPath (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'getDetailPath' of 'Gui.AxisOrigin' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }


    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<AxisOriginPy*>(self)->getDetailPath(args);
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// AxisLength() callback and implementer
// PyObject*  AxisOriginPy::AxisLength(PyObject *args){};
// has to be implemented in AxisOriginPyImp.cpp
PyObject * AxisOriginPy::staticCallback_getAxisLength (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<AxisOriginPy*>(self)->getAxisLength());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'AxisLength' of object 'AxisOrigin'");
        return nullptr;
    }
}

int AxisOriginPy::staticCallback_setAxisLength (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<AxisOriginPy*>(self)->setAxisLength(Py::Float(PyNumber_Float(value),true));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'AxisLength' of object 'AxisOrigin'");
        return -1;
    }
}

// LineWidth() callback and implementer
// PyObject*  AxisOriginPy::LineWidth(PyObject *args){};
// has to be implemented in AxisOriginPyImp.cpp
PyObject * AxisOriginPy::staticCallback_getLineWidth (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<AxisOriginPy*>(self)->getLineWidth());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'LineWidth' of object 'AxisOrigin'");
        return nullptr;
    }
}

int AxisOriginPy::staticCallback_setLineWidth (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<AxisOriginPy*>(self)->setLineWidth(Py::Float(PyNumber_Float(value),true));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'LineWidth' of object 'AxisOrigin'");
        return -1;
    }
}

// PointSize() callback and implementer
// PyObject*  AxisOriginPy::PointSize(PyObject *args){};
// has to be implemented in AxisOriginPyImp.cpp
PyObject * AxisOriginPy::staticCallback_getPointSize (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<AxisOriginPy*>(self)->getPointSize());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'PointSize' of object 'AxisOrigin'");
        return nullptr;
    }
}

int AxisOriginPy::staticCallback_setPointSize (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<AxisOriginPy*>(self)->setPointSize(Py::Float(PyNumber_Float(value),true));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'PointSize' of object 'AxisOrigin'");
        return -1;
    }
}

// Scale() callback and implementer
// PyObject*  AxisOriginPy::Scale(PyObject *args){};
// has to be implemented in AxisOriginPyImp.cpp
PyObject * AxisOriginPy::staticCallback_getScale (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<AxisOriginPy*>(self)->getScale());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Scale' of object 'AxisOrigin'");
        return nullptr;
    }
}

int AxisOriginPy::staticCallback_setScale (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<AxisOriginPy*>(self)->setScale(Py::Float(PyNumber_Float(value),true));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'Scale' of object 'AxisOrigin'");
        return -1;
    }
}

// Plane() callback and implementer
// PyObject*  AxisOriginPy::Plane(PyObject *args){};
// has to be implemented in AxisOriginPyImp.cpp
PyObject * AxisOriginPy::staticCallback_getPlane (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<AxisOriginPy*>(self)->getPlane());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Plane' of object 'AxisOrigin'");
        return nullptr;
    }
}

int AxisOriginPy::staticCallback_setPlane (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<AxisOriginPy*>(self)->setPlane(Py::Tuple(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'Plane' of object 'AxisOrigin'");
        return -1;
    }
}

// Labels() callback and implementer
// PyObject*  AxisOriginPy::Labels(PyObject *args){};
// has to be implemented in AxisOriginPyImp.cpp
PyObject * AxisOriginPy::staticCallback_getLabels (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<AxisOriginPy*>(self)->getLabels());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Labels' of object 'AxisOrigin'");
        return nullptr;
    }
}

int AxisOriginPy::staticCallback_setLabels (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<AxisOriginPy*>(self)->setLabels(Py::Dict(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'Labels' of object 'AxisOrigin'");
        return -1;
    }
}

// Node() callback and implementer
// PyObject*  AxisOriginPy::Node(PyObject *args){};
// has to be implemented in AxisOriginPyImp.cpp
PyObject * AxisOriginPy::staticCallback_getNode (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<AxisOriginPy*>(self)->getNode());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Node' of object 'AxisOrigin'");
        return nullptr;
    }
}

int AxisOriginPy::staticCallback_setNode (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'Node' of object 'AxisOrigin' is read-only");
    return -1;
}




//--------------------------------------------------------------------------
// Constructor
//--------------------------------------------------------------------------
AxisOriginPy::AxisOriginPy(AxisOrigin *pcObject, PyTypeObject *T)
    : BaseClassPy(static_cast<BaseClassPy::PointerType>(pcObject), T)
{
}


//--------------------------------------------------------------------------
// destructor
//--------------------------------------------------------------------------
AxisOriginPy::~AxisOriginPy()                                // Everything handled in parent
{
    // delete the handled object when the PyObject dies
    AxisOriginPy::PointerType ptr = static_cast<AxisOriginPy::PointerType>(_pcTwinPointer);
    delete ptr;
}

//--------------------------------------------------------------------------
// AxisOriginPy representation
//--------------------------------------------------------------------------
PyObject *AxisOriginPy::_repr()
{
    return Py_BuildValue("s", representation().c_str());
}

//--------------------------------------------------------------------------
// AxisOriginPy Attributes
//--------------------------------------------------------------------------
PyObject *AxisOriginPy::_getattr(const char *attr)			// __getattr__ function: note only need to handle new state
{
    try {
        // getter method for special Attributes (e.g. dynamic ones)
        PyObject *r = getCustomAttributes(attr);
        if(r) return r;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError,"Unknown C++ exception");
        return nullptr;
    }
#endif

    PyMethodDef *ml = Methods;
    for (; ml->ml_name != nullptr; ml++) {
        if (attr[0] == ml->ml_name[0] &&
            strcmp(attr+1, ml->ml_name+1) == 0)
            return PyCFunction_New(ml, this);
    }

    PyErr_Clear();
    return BaseClassPy::_getattr(attr);
}

int AxisOriginPy::_setattr(const char *attr, PyObject *value) // __setattr__ function: note only need to handle new state
{
    try {
        // setter for special Attributes (e.g. dynamic ones)
        int r = setCustomAttributes(attr, value);
        // r = 1: handled
        // r = -1: error
        // r = 0: ignore
        if (r == 1)
            return 0;
        else if (r == -1)
            return -1;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return -1;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return -1;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return -1;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return -1;
    }
#endif

    return BaseClassPy::_setattr(attr, value);
}

AxisOrigin *AxisOriginPy::getAxisOriginPtr() const
{
    return static_cast<AxisOrigin *>(_pcTwinPointer);
}

#if defined(__clang__)
# pragma clang diagnostic pop
#endif

#if 0
/* From here on come the methods you have to implement, but NOT in this module. Implement in AxisOriginPyImp.cpp! This prototypes
 * are just for convenience when you add a new method.
 */

PyObject *AxisOriginPy::PyMake(PyTypeObject* /*type*/, PyObject* /*args*/, PyObject* /*kwds*/)
{
    // create a new instance of AxisOriginPy and the Twin object
    return new AxisOriginPy(new AxisOrigin);
}

// constructor method
int AxisOriginPy::PyInit(PyObject* /*args*/, PyObject* /*kwd*/)
{
    return 0;
}


// returns a string which represents the object e.g. when printed in python
std::string AxisOriginPy::representation() const
{
    return {"<AxisOrigin object>"};
}

PyObject* AxisOriginPy::getElementPicked(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* AxisOriginPy::getDetailPath(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}



Py::Float AxisOriginPy::getAxisLength() const
{
    //return Py::Float();
    throw Py::AttributeError("Not yet implemented");
}

void  AxisOriginPy::setAxisLength(Py::Float arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Float AxisOriginPy::getLineWidth() const
{
    //return Py::Float();
    throw Py::AttributeError("Not yet implemented");
}

void  AxisOriginPy::setLineWidth(Py::Float arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Float AxisOriginPy::getPointSize() const
{
    //return Py::Float();
    throw Py::AttributeError("Not yet implemented");
}

void  AxisOriginPy::setPointSize(Py::Float arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Float AxisOriginPy::getScale() const
{
    //return Py::Float();
    throw Py::AttributeError("Not yet implemented");
}

void  AxisOriginPy::setScale(Py::Float arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Tuple AxisOriginPy::getPlane() const
{
    //return Py::Tuple();
    throw Py::AttributeError("Not yet implemented");
}

void  AxisOriginPy::setPlane(Py::Tuple arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Dict AxisOriginPy::getLabels() const
{
    //return Py::Dict();
    throw Py::AttributeError("Not yet implemented");
}

void  AxisOriginPy::setLabels(Py::Dict arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Object AxisOriginPy::getNode() const
{
    //return Py::Object();
    throw Py::AttributeError("Not yet implemented");
}

PyObject *AxisOriginPy::getCustomAttributes(const char* /*attr*/) const
{
    return nullptr;
}

int AxisOriginPy::setCustomAttributes(const char* /*attr*/, PyObject* /*obj*/)
{
    return 0;
}


#endif



