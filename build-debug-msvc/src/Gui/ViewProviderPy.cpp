
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the .XML file
// Every change you make here gets lost in the next full rebuild!
// This File is normally built as an include in ViewProviderPyImp.cpp! It's not intended to be in a project!

#include <boost/filesystem/path.hpp>
#include <boost/filesystem/operations.hpp>
#include <boost/filesystem/exception.hpp>
#include <Base/PyObjectBase.h>
#include <Base/Console.h>
#include <Base/Exception.h>
#include <CXX/Objects.hxx>

#if defined(__clang__)
# pragma clang diagnostic push
# pragma clang diagnostic ignored "-Wdeprecated-declarations"
#endif

using Base::streq;
using namespace Gui;

/// Type structure of ViewProviderPy
PyTypeObject ViewProviderPy::Type = {
    PyVarObject_HEAD_INIT(&PyType_Type,0)
    "Gui.ViewProvider",     /*tp_name*/
    sizeof(ViewProviderPy),                       /*tp_basicsize*/
    0,                                                /*tp_itemsize*/
    /* methods */
    PyDestructor,                                     /*tp_dealloc*/
#if PY_VERSION_HEX >= 0x03080000
    0,                                                /*tp_vectorcall_offset*/
#else
    nullptr,                                          /*tp_print*/
#endif
    nullptr,                                          /*tp_getattr*/
    nullptr,                                          /*tp_setattr*/
    nullptr,                                          /*tp_compare*/
    __repr,                                           /*tp_repr*/
    nullptr,                                          /*tp_as_number*/
    nullptr,                                          /*tp_as_sequence*/
    nullptr,                                          /*tp_as_mapping*/
    nullptr,                                          /*tp_hash*/
    nullptr,                                          /*tp_call */
    nullptr,                                          /*tp_str  */
    __getattro,                                       /*tp_getattro*/
    __setattro,                                       /*tp_setattro*/
    /* --- Functions to access object as input/output buffer ---------*/
    nullptr,                                          /* tp_as_buffer */
    /* --- Flags to define presence of optional/expanded features */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT,        /*tp_flags */
    "This is the ViewProvider base class",           /*tp_doc */
    nullptr,                                          /*tp_traverse */
    nullptr,                                          /*tp_clear */
    nullptr,                                          /*tp_richcompare */
    0,                                                /*tp_weaklistoffset */
    nullptr,                                          /*tp_iter */
    nullptr,                                          /*tp_iternext */
    Gui::ViewProviderPy::Methods,                     /*tp_methods */
    nullptr,                                          /*tp_members */
    Gui::ViewProviderPy::GetterSetter,                     /*tp_getset */
    &App::ExtensionContainerPy::Type,                        /*tp_base */
    nullptr,                                          /*tp_dict */
    nullptr,                                          /*tp_descr_get */
    nullptr,                                          /*tp_descr_set */
    0,                                                /*tp_dictoffset */
    __PyInit,                                         /*tp_init */
    nullptr,                                          /*tp_alloc */
    Gui::ViewProviderPy::PyMake,/*tp_new */
    nullptr,                                          /*tp_free   Low-level free-memory routine */
    nullptr,                                          /*tp_is_gc  For PyObject_IS_GC */
    nullptr,                                          /*tp_bases */
    nullptr,                                          /*tp_mro    method resolution order */
    nullptr,                                          /*tp_cache */
    nullptr,                                          /*tp_subclasses */
    nullptr,                                          /*tp_weaklist */
    nullptr,                                          /*tp_del */
    0,                                                /*tp_version_tag */
    nullptr                                           /*tp_finalize */
#if PY_VERSION_HEX >= 0x03090000
    ,nullptr                                          /*tp_vectorcall */
#if PY_VERSION_HEX >= 0x030c0000
    ,0                                                /*tp_watched */
#endif
#elif PY_VERSION_HEX >= 0x03080000
    ,nullptr                                          /*tp_vectorcall */
    /* bpo-37250: kept for backwards compatibility in CPython 3.8 only */
    ,nullptr                                          /*tp_print */
#endif
};

/// Methods structure of ViewProviderPy
PyMethodDef ViewProviderPy::Methods[] = {
    {"addProperty",
        reinterpret_cast<PyCFunction>( staticCallback_addProperty ),
        METH_VARARGS,
        "addProperty(type, name, group, doc, attr=0, ro=False, hd=False) -> ViewProvider\n"
        "\n"
        "Add a generic property.\n"
        "\n"
        "type : str\n"
        "    Property type.\n"
        "name : str\n"
        "    Property name. Optional.\n"
        "group : str\n"
        "    Property group. Optional.\n"
        "attr : int\n"
        "    Property attributes.\n"
        "ro : bool\n"
        "    Read only property.\n"
        "hd : bool\n"
        "    Hidden property."
    },
    {"removeProperty",
        reinterpret_cast<PyCFunction>( staticCallback_removeProperty ),
        METH_VARARGS,
        "removeProperty(name) -> bool\n"
        "\n"
        "Remove a generic property.\n"
        "Only user-defined properties can be removed, not built-in ones.\n"
        "\n"
        "name : str\n"
        "    Property name."
    },
    {"supportedProperties",
        reinterpret_cast<PyCFunction>( staticCallback_supportedProperties ),
        METH_VARARGS,
        "supportedProperties() -> list\n"
        "\n"
        "A list of supported property types."
    },
    {"show",
        reinterpret_cast<PyCFunction>( staticCallback_show ),
        METH_VARARGS,
        "show() -> None\n"
        "\n"
        "Show the object."
    },
    {"hide",
        reinterpret_cast<PyCFunction>( staticCallback_hide ),
        METH_VARARGS,
        "show() -> None\n"
        "\n"
        "Hide the object."
    },
    {"isVisible",
        reinterpret_cast<PyCFunction>( staticCallback_isVisible ),
        METH_VARARGS,
        "isVisible() -> bool\n"
        "\n"
        "Check if the object is visible."
    },
    {"canDragObject",
        reinterpret_cast<PyCFunction>( staticCallback_canDragObject ),
        METH_VARARGS,
        "canDragObject(obj=None) -> bool\n"
        "\n"
        "Check whether the child object can be removed by dragging.\n"
        "If 'obj' is not given, check without filter by any particular object.\n"
        "\n"
        "obj : App.DocumentObject\n"
        "    Object to be dragged."
    },
    {"dragObject",
        reinterpret_cast<PyCFunction>( staticCallback_dragObject ),
        METH_VARARGS,
        "dragObject(obj) -> None\n"
        "\n"
        "Remove a child object by dropping.\n"
        "\n"
        "obj : App.DocumentObject\n"
        "    Object to be dragged."
    },
    {"canDropObject",
        reinterpret_cast<PyCFunction>(reinterpret_cast<void (*) ()>( staticCallback_canDropObject )),
        METH_VARARGS|METH_KEYWORDS,
        "canDropObject(obj=None, owner=None, subname, elem=None) -> bool\n"
        "\n"
        "Check whether the child object can be added by dropping.\n"
        "If 'obj' is not given, check without filter by any particular object.\n"
        "\n"
        "obj : App.DocumentObject\n"
        "    Object to be dropped.\n"
        "owner : App.DocumentObject\n"
        "    Parent object of the dropping object.\n"
        "subname : str\n"
        "    Subname reference to the dropping object. Optional.\n"
        "elem : sequence of str\n"
        "    Non-objects subelements selected when the object is\n"
        "    being dropped."
    },
    {"dropObject",
        reinterpret_cast<PyCFunction>(reinterpret_cast<void (*) ()>( staticCallback_dropObject )),
        METH_VARARGS|METH_KEYWORDS,
        "dropObject(obj, owner=None, subname, elem=None) -> str\n"
        "\n"
        "Add a child object by dropping.\n"
        "\n"
        "obj : App.DocumentObject\n"
        "    Object to be dropped.\n"
        "owner : App.DocumentObject\n"
        "    Parent object of the dropping object.\n"
        "subname : str\n"
        "    Subname reference to the dropping object. Optional.\n"
        "elem : sequence of str\n"
        "    Non-objects subelements selected when the object is\n"
        "    being dropped."
    },
    {"canDragAndDropObject",
        reinterpret_cast<PyCFunction>( staticCallback_canDragAndDropObject ),
        METH_VARARGS,
        "canDragAndDropObject(obj) -> bool\n"
        "\n"
        "Check whether the child object can be removed from\n"
        "other parent and added here by drag and drop.\n"
        "\n"
        "obj : App.DocumentObject\n"
        "    Object to be dragged and dropped."
    },
    {"replaceObject",
        reinterpret_cast<PyCFunction>( staticCallback_replaceObject ),
        METH_VARARGS,
        "replaceObject(oldObj, newObj) -> int\n"
        "\n"
        "Replace a child object.\n"
        "Returns 1 if succeeded, 0 if not found, -1 if not supported.\n"
        "\n"
        "oldObj : App.DocumentObject\n"
        "    Old object.\n"
        "newObj : App.DocumentObject\n"
        "    New object."
    },
    {"doubleClicked",
        reinterpret_cast<PyCFunction>( staticCallback_doubleClicked ),
        METH_VARARGS,
        "doubleClicked() -> bool\n"
        "\n"
        "Trigger double clicking the corresponding tree item of this view object."
    },
    {"addDisplayMode",
        reinterpret_cast<PyCFunction>( staticCallback_addDisplayMode ),
        METH_VARARGS,
        "addDisplayMode(obj, mode) -> None\n"
        "\n"
        "Add a new display mode to the view provider.\n"
        "\n"
        "obj : coin.SoNode\n"
        "    Display mode.\n"
        "mode : str\n"
        "    Name of the display mode."
    },
    {"listDisplayModes",
        reinterpret_cast<PyCFunction>( staticCallback_listDisplayModes ),
        METH_VARARGS,
        "listDisplayModes() -> list\n"
        "\n"
        "Show a list of all display modes."
    },
    {"toString",
        reinterpret_cast<PyCFunction>( staticCallback_toString ),
        METH_VARARGS,
        "toString() -> str\n"
        "\n"
        "Return a string representation of the Inventor node."
    },
    {"setTransformation",
        reinterpret_cast<PyCFunction>( staticCallback_setTransformation ),
        METH_VARARGS,
        "setTransformation(trans) -> None\n"
        "\n"
        "Set a transformation on the Inventor node.\n"
        "\n"
        "trans : Base.Placement, Base.Matrix"
    },
    {"claimChildren",
        reinterpret_cast<PyCFunction>( staticCallback_claimChildren ),
        METH_VARARGS,
        "claimChildren() -> list\n"
        "\n"
        "Returns list of objects that are to be grouped in tree under this object."
    },
    {"claimChildrenRecursive",
        reinterpret_cast<PyCFunction>( staticCallback_claimChildrenRecursive ),
        METH_VARARGS,
        "claimChildrenRecursive() -> list\n"
        "\n"
        "Returns list of objects that are to be grouped in tree under this object recursively."
    },
    {"partialRender",
        reinterpret_cast<PyCFunction>( staticCallback_partialRender ),
        METH_VARARGS,
        "partialRender(sub=None, clear=False) -> int\n"
        "\n"
        "Render only part of the object.\n"
        "\n"
        "sub: None, str, sequence of str\n"
        "    Refer to the subelement. If it is None then reset the partial rendering.\n"
        "clear: bool\n"
        "    True to add, or False to remove the subelement(s) for rendering."
    },
    {"getElementColors",
        reinterpret_cast<PyCFunction>( staticCallback_getElementColors ),
        METH_VARARGS,
        "getElementColors(elementName) -> dict\n"
        "\n"
        "Get a dictionary of the form {elementName : (r,g,b,a)}.\n"
        "If no element name is given a dictionary with all the elements is returned.\n"
        "\n"
        "elementName : str\n"
        "    Name of the element. Optional."
    },
    {"setElementColors",
        reinterpret_cast<PyCFunction>( staticCallback_setElementColors ),
        METH_VARARGS,
        "setElementColors(colors) -> None\n"
        "\n"
        "Set element colors.\n"
        "\n"
        "colors: dict\n"
        "    Color dictionary of the form {elementName:(r,g,b,a)}."
    },
    {"getElementPicked",
        reinterpret_cast<PyCFunction>( staticCallback_getElementPicked ),
        METH_VARARGS,
        "getElementPicked(pickPoint) -> str\n"
        "\n"
        "Return the picked subelement.\n"
        "\n"
        "pickPoint : coin.SoPickedPoint"
    },
    {"getDetailPath",
        reinterpret_cast<PyCFunction>( staticCallback_getDetailPath ),
        METH_VARARGS,
        "getDetailPath(subelement, path, append=True) -> coin.SoDetail or None\n"
        "\n"
        "Return Coin detail and path of an subelement.\n"
        "\n"
        "subname: str\n"
        "    Dot separated string reference to the sub element.\n"
        "pPath: coin.SoPath\n"
        "    Output coin path leading to the returned element detail.\n"
        "append: bool\n"
        "    If True, path will be first appended with the root node and the mode\n"
        "    switch node of this view provider."
    },
    {"signalChangeIcon",
        reinterpret_cast<PyCFunction>( staticCallback_signalChangeIcon ),
        METH_VARARGS,
        "signalChangeIcon() -> None\n"
        "\n"
        "Trigger icon changed signal."
    },
    {"getBoundingBox",
        reinterpret_cast<PyCFunction>( staticCallback_getBoundingBox ),
        METH_VARARGS,
        "getBoundingBox(subName, transform=True, view) -> Base.BoundBox\n"
        "\n"
        "Obtain the bounding box of this view object.\n"
        "\n"
        "subName : str\n"
        "    Name referring a sub-object. Optional.\n"
        "transform: bool\n"
        "    Whether to apply the transformation matrix of this view provider.\n"
        "view: View3DInventorPy\n"
        "    Default to active view. Optional."
    },
    {nullptr, nullptr, 0, nullptr}		/* Sentinel */
};



/// Attribute structure of ViewProviderPy
PyGetSetDef ViewProviderPy::GetterSetter[] = {
    {"Annotation",
        (getter) staticCallback_getAnnotation,
        (setter) staticCallback_setAnnotation,
        "A pivy Separator to add a custom scenegraph to this ViewProvider.",
        nullptr
    },
    {"Icon",
        (getter) staticCallback_getIcon,
        (setter) staticCallback_setIcon,
        "The icon of this ViewProvider.",
        nullptr
    },
    {"RootNode",
        (getter) staticCallback_getRootNode,
        (setter) staticCallback_setRootNode,
        "A pivy Separator with the root of this ViewProvider.",
        nullptr
    },
    {"SwitchNode",
        (getter) staticCallback_getSwitchNode,
        (setter) staticCallback_setSwitchNode,
        "A pivy SoSwitch for the display mode switch of this ViewProvider.",
        nullptr
    },
    {"DefaultMode",
        (getter) staticCallback_getDefaultMode,
        (setter) staticCallback_setDefaultMode,
        "Get/Set the default display mode in turns of coin node index.",
        nullptr
    },
    {"IV",
        (getter) staticCallback_getIV,
        (setter) staticCallback_setIV,
        "Represents the whole ViewProvider as an Inventor string.",
        nullptr
    },
    {"CanRemoveChildrenFromRoot",
        (getter) staticCallback_getCanRemoveChildrenFromRoot,
        (setter) staticCallback_setCanRemoveChildrenFromRoot,
        "Tells the tree view whether to remove the children item from root or not.",
        nullptr
    },
    {"LinkVisibility",
        (getter) staticCallback_getLinkVisibility,
        (setter) staticCallback_setLinkVisibility,
        "Get/set visibilities of all links to this view object.",
        nullptr
    },
    {"DropPrefix",
        (getter) staticCallback_getDropPrefix,
        (setter) staticCallback_setDropPrefix,
        "Subname referencing the sub-object for holding dropped object.",
        nullptr
    },
    {nullptr, nullptr, nullptr, nullptr, nullptr}		/* Sentinel */
};

// addProperty() callback and implementer
// PyObject*  ViewProviderPy::addProperty(PyObject *args){};
// has to be implemented in ViewProviderPyImp.cpp
PyObject * ViewProviderPy::staticCallback_addProperty (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'addProperty' of 'Gui.ViewProvider' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ViewProviderPy*>(self)->addProperty(args);
        if (ret != nullptr)
            static_cast<ViewProviderPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// removeProperty() callback and implementer
// PyObject*  ViewProviderPy::removeProperty(PyObject *args){};
// has to be implemented in ViewProviderPyImp.cpp
PyObject * ViewProviderPy::staticCallback_removeProperty (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'removeProperty' of 'Gui.ViewProvider' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ViewProviderPy*>(self)->removeProperty(args);
        if (ret != nullptr)
            static_cast<ViewProviderPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// supportedProperties() callback and implementer
// PyObject*  ViewProviderPy::supportedProperties(PyObject *args){};
// has to be implemented in ViewProviderPyImp.cpp
PyObject * ViewProviderPy::staticCallback_supportedProperties (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'supportedProperties' of 'Gui.ViewProvider' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ViewProviderPy*>(self)->supportedProperties(args);
        if (ret != nullptr)
            static_cast<ViewProviderPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// show() callback and implementer
// PyObject*  ViewProviderPy::show(PyObject *args){};
// has to be implemented in ViewProviderPyImp.cpp
PyObject * ViewProviderPy::staticCallback_show (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'show' of 'Gui.ViewProvider' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ViewProviderPy*>(self)->show(args);
        if (ret != nullptr)
            static_cast<ViewProviderPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// hide() callback and implementer
// PyObject*  ViewProviderPy::hide(PyObject *args){};
// has to be implemented in ViewProviderPyImp.cpp
PyObject * ViewProviderPy::staticCallback_hide (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'hide' of 'Gui.ViewProvider' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ViewProviderPy*>(self)->hide(args);
        if (ret != nullptr)
            static_cast<ViewProviderPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// isVisible() callback and implementer
// PyObject*  ViewProviderPy::isVisible(PyObject *args){};
// has to be implemented in ViewProviderPyImp.cpp
PyObject * ViewProviderPy::staticCallback_isVisible (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'isVisible' of 'Gui.ViewProvider' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ViewProviderPy*>(self)->isVisible(args);
        if (ret != nullptr)
            static_cast<ViewProviderPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// canDragObject() callback and implementer
// PyObject*  ViewProviderPy::canDragObject(PyObject *args){};
// has to be implemented in ViewProviderPyImp.cpp
PyObject * ViewProviderPy::staticCallback_canDragObject (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'canDragObject' of 'Gui.ViewProvider' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ViewProviderPy*>(self)->canDragObject(args);
        if (ret != nullptr)
            static_cast<ViewProviderPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// dragObject() callback and implementer
// PyObject*  ViewProviderPy::dragObject(PyObject *args){};
// has to be implemented in ViewProviderPyImp.cpp
PyObject * ViewProviderPy::staticCallback_dragObject (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'dragObject' of 'Gui.ViewProvider' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ViewProviderPy*>(self)->dragObject(args);
        if (ret != nullptr)
            static_cast<ViewProviderPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// canDropObject() callback and implementer
// PyObject*  ViewProviderPy::canDropObject(PyObject *args){};
// has to be implemented in ViewProviderPyImp.cpp
PyObject * ViewProviderPy::staticCallback_canDropObject (PyObject *self, PyObject *args, PyObject * kwd)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'canDropObject' of 'Gui.ViewProvider' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ViewProviderPy*>(self)->canDropObject(args, kwd);
        if (ret != nullptr)
            static_cast<ViewProviderPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// dropObject() callback and implementer
// PyObject*  ViewProviderPy::dropObject(PyObject *args){};
// has to be implemented in ViewProviderPyImp.cpp
PyObject * ViewProviderPy::staticCallback_dropObject (PyObject *self, PyObject *args, PyObject * kwd)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'dropObject' of 'Gui.ViewProvider' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ViewProviderPy*>(self)->dropObject(args, kwd);
        if (ret != nullptr)
            static_cast<ViewProviderPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// canDragAndDropObject() callback and implementer
// PyObject*  ViewProviderPy::canDragAndDropObject(PyObject *args){};
// has to be implemented in ViewProviderPyImp.cpp
PyObject * ViewProviderPy::staticCallback_canDragAndDropObject (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'canDragAndDropObject' of 'Gui.ViewProvider' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ViewProviderPy*>(self)->canDragAndDropObject(args);
        if (ret != nullptr)
            static_cast<ViewProviderPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// replaceObject() callback and implementer
// PyObject*  ViewProviderPy::replaceObject(PyObject *args){};
// has to be implemented in ViewProviderPyImp.cpp
PyObject * ViewProviderPy::staticCallback_replaceObject (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'replaceObject' of 'Gui.ViewProvider' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ViewProviderPy*>(self)->replaceObject(args);
        if (ret != nullptr)
            static_cast<ViewProviderPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// doubleClicked() callback and implementer
// PyObject*  ViewProviderPy::doubleClicked(PyObject *args){};
// has to be implemented in ViewProviderPyImp.cpp
PyObject * ViewProviderPy::staticCallback_doubleClicked (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'doubleClicked' of 'Gui.ViewProvider' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ViewProviderPy*>(self)->doubleClicked(args);
        if (ret != nullptr)
            static_cast<ViewProviderPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// addDisplayMode() callback and implementer
// PyObject*  ViewProviderPy::addDisplayMode(PyObject *args){};
// has to be implemented in ViewProviderPyImp.cpp
PyObject * ViewProviderPy::staticCallback_addDisplayMode (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'addDisplayMode' of 'Gui.ViewProvider' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ViewProviderPy*>(self)->addDisplayMode(args);
        if (ret != nullptr)
            static_cast<ViewProviderPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// listDisplayModes() callback and implementer
// PyObject*  ViewProviderPy::listDisplayModes(PyObject *args){};
// has to be implemented in ViewProviderPyImp.cpp
PyObject * ViewProviderPy::staticCallback_listDisplayModes (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'listDisplayModes' of 'Gui.ViewProvider' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ViewProviderPy*>(self)->listDisplayModes(args);
        if (ret != nullptr)
            static_cast<ViewProviderPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// toString() callback and implementer
// PyObject*  ViewProviderPy::toString(PyObject *args){};
// has to be implemented in ViewProviderPyImp.cpp
PyObject * ViewProviderPy::staticCallback_toString (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'toString' of 'Gui.ViewProvider' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ViewProviderPy*>(self)->toString(args);
        if (ret != nullptr)
            static_cast<ViewProviderPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// setTransformation() callback and implementer
// PyObject*  ViewProviderPy::setTransformation(PyObject *args){};
// has to be implemented in ViewProviderPyImp.cpp
PyObject * ViewProviderPy::staticCallback_setTransformation (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'setTransformation' of 'Gui.ViewProvider' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ViewProviderPy*>(self)->setTransformation(args);
        if (ret != nullptr)
            static_cast<ViewProviderPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// claimChildren() callback and implementer
// PyObject*  ViewProviderPy::claimChildren(PyObject *args){};
// has to be implemented in ViewProviderPyImp.cpp
PyObject * ViewProviderPy::staticCallback_claimChildren (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'claimChildren' of 'Gui.ViewProvider' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }


    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ViewProviderPy*>(self)->claimChildren(args);
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// claimChildrenRecursive() callback and implementer
// PyObject*  ViewProviderPy::claimChildrenRecursive(PyObject *args){};
// has to be implemented in ViewProviderPyImp.cpp
PyObject * ViewProviderPy::staticCallback_claimChildrenRecursive (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'claimChildrenRecursive' of 'Gui.ViewProvider' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }


    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ViewProviderPy*>(self)->claimChildrenRecursive(args);
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// partialRender() callback and implementer
// PyObject*  ViewProviderPy::partialRender(PyObject *args){};
// has to be implemented in ViewProviderPyImp.cpp
PyObject * ViewProviderPy::staticCallback_partialRender (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'partialRender' of 'Gui.ViewProvider' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ViewProviderPy*>(self)->partialRender(args);
        if (ret != nullptr)
            static_cast<ViewProviderPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// getElementColors() callback and implementer
// PyObject*  ViewProviderPy::getElementColors(PyObject *args){};
// has to be implemented in ViewProviderPyImp.cpp
PyObject * ViewProviderPy::staticCallback_getElementColors (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'getElementColors' of 'Gui.ViewProvider' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ViewProviderPy*>(self)->getElementColors(args);
        if (ret != nullptr)
            static_cast<ViewProviderPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// setElementColors() callback and implementer
// PyObject*  ViewProviderPy::setElementColors(PyObject *args){};
// has to be implemented in ViewProviderPyImp.cpp
PyObject * ViewProviderPy::staticCallback_setElementColors (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'setElementColors' of 'Gui.ViewProvider' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ViewProviderPy*>(self)->setElementColors(args);
        if (ret != nullptr)
            static_cast<ViewProviderPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// getElementPicked() callback and implementer
// PyObject*  ViewProviderPy::getElementPicked(PyObject *args){};
// has to be implemented in ViewProviderPyImp.cpp
PyObject * ViewProviderPy::staticCallback_getElementPicked (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'getElementPicked' of 'Gui.ViewProvider' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }


    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ViewProviderPy*>(self)->getElementPicked(args);
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// getDetailPath() callback and implementer
// PyObject*  ViewProviderPy::getDetailPath(PyObject *args){};
// has to be implemented in ViewProviderPyImp.cpp
PyObject * ViewProviderPy::staticCallback_getDetailPath (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'getDetailPath' of 'Gui.ViewProvider' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }


    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ViewProviderPy*>(self)->getDetailPath(args);
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// signalChangeIcon() callback and implementer
// PyObject*  ViewProviderPy::signalChangeIcon(PyObject *args){};
// has to be implemented in ViewProviderPyImp.cpp
PyObject * ViewProviderPy::staticCallback_signalChangeIcon (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'signalChangeIcon' of 'Gui.ViewProvider' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }


    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ViewProviderPy*>(self)->signalChangeIcon(args);
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// getBoundingBox() callback and implementer
// PyObject*  ViewProviderPy::getBoundingBox(PyObject *args){};
// has to be implemented in ViewProviderPyImp.cpp
PyObject * ViewProviderPy::staticCallback_getBoundingBox (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'getBoundingBox' of 'Gui.ViewProvider' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ViewProviderPy*>(self)->getBoundingBox(args);
        if (ret != nullptr)
            static_cast<ViewProviderPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// Annotation() callback and implementer
// PyObject*  ViewProviderPy::Annotation(PyObject *args){};
// has to be implemented in ViewProviderPyImp.cpp
PyObject * ViewProviderPy::staticCallback_getAnnotation (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ViewProviderPy*>(self)->getAnnotation());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Annotation' of object 'ViewProvider'");
        return nullptr;
    }
}

int ViewProviderPy::staticCallback_setAnnotation (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<ViewProviderPy*>(self)->setAnnotation(Py::Object(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'Annotation' of object 'ViewProvider'");
        return -1;
    }
}

// Icon() callback and implementer
// PyObject*  ViewProviderPy::Icon(PyObject *args){};
// has to be implemented in ViewProviderPyImp.cpp
PyObject * ViewProviderPy::staticCallback_getIcon (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ViewProviderPy*>(self)->getIcon());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Icon' of object 'ViewProvider'");
        return nullptr;
    }
}

int ViewProviderPy::staticCallback_setIcon (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'Icon' of object 'ViewProvider' is read-only");
    return -1;
}

// RootNode() callback and implementer
// PyObject*  ViewProviderPy::RootNode(PyObject *args){};
// has to be implemented in ViewProviderPyImp.cpp
PyObject * ViewProviderPy::staticCallback_getRootNode (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ViewProviderPy*>(self)->getRootNode());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'RootNode' of object 'ViewProvider'");
        return nullptr;
    }
}

int ViewProviderPy::staticCallback_setRootNode (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<ViewProviderPy*>(self)->setRootNode(Py::Object(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'RootNode' of object 'ViewProvider'");
        return -1;
    }
}

// SwitchNode() callback and implementer
// PyObject*  ViewProviderPy::SwitchNode(PyObject *args){};
// has to be implemented in ViewProviderPyImp.cpp
PyObject * ViewProviderPy::staticCallback_getSwitchNode (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ViewProviderPy*>(self)->getSwitchNode());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'SwitchNode' of object 'ViewProvider'");
        return nullptr;
    }
}

int ViewProviderPy::staticCallback_setSwitchNode (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<ViewProviderPy*>(self)->setSwitchNode(Py::Object(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'SwitchNode' of object 'ViewProvider'");
        return -1;
    }
}

// DefaultMode() callback and implementer
// PyObject*  ViewProviderPy::DefaultMode(PyObject *args){};
// has to be implemented in ViewProviderPyImp.cpp
PyObject * ViewProviderPy::staticCallback_getDefaultMode (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ViewProviderPy*>(self)->getDefaultMode());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'DefaultMode' of object 'ViewProvider'");
        return nullptr;
    }
}

int ViewProviderPy::staticCallback_setDefaultMode (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<ViewProviderPy*>(self)->setDefaultMode(Py::Int(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'DefaultMode' of object 'ViewProvider'");
        return -1;
    }
}

// IV() callback and implementer
// PyObject*  ViewProviderPy::IV(PyObject *args){};
// has to be implemented in ViewProviderPyImp.cpp
PyObject * ViewProviderPy::staticCallback_getIV (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ViewProviderPy*>(self)->getIV());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'IV' of object 'ViewProvider'");
        return nullptr;
    }
}

int ViewProviderPy::staticCallback_setIV (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'IV' of object 'ViewProvider' is read-only");
    return -1;
}

// CanRemoveChildrenFromRoot() callback and implementer
// PyObject*  ViewProviderPy::CanRemoveChildrenFromRoot(PyObject *args){};
// has to be implemented in ViewProviderPyImp.cpp
PyObject * ViewProviderPy::staticCallback_getCanRemoveChildrenFromRoot (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ViewProviderPy*>(self)->getCanRemoveChildrenFromRoot());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'CanRemoveChildrenFromRoot' of object 'ViewProvider'");
        return nullptr;
    }
}

int ViewProviderPy::staticCallback_setCanRemoveChildrenFromRoot (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'CanRemoveChildrenFromRoot' of object 'ViewProvider' is read-only");
    return -1;
}

// LinkVisibility() callback and implementer
// PyObject*  ViewProviderPy::LinkVisibility(PyObject *args){};
// has to be implemented in ViewProviderPyImp.cpp
PyObject * ViewProviderPy::staticCallback_getLinkVisibility (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ViewProviderPy*>(self)->getLinkVisibility());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'LinkVisibility' of object 'ViewProvider'");
        return nullptr;
    }
}

int ViewProviderPy::staticCallback_setLinkVisibility (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<ViewProviderPy*>(self)->setLinkVisibility(Py::Boolean(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'LinkVisibility' of object 'ViewProvider'");
        return -1;
    }
}

// DropPrefix() callback and implementer
// PyObject*  ViewProviderPy::DropPrefix(PyObject *args){};
// has to be implemented in ViewProviderPyImp.cpp
PyObject * ViewProviderPy::staticCallback_getDropPrefix (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ViewProviderPy*>(self)->getDropPrefix());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'DropPrefix' of object 'ViewProvider'");
        return nullptr;
    }
}

int ViewProviderPy::staticCallback_setDropPrefix (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'DropPrefix' of object 'ViewProvider' is read-only");
    return -1;
}




//--------------------------------------------------------------------------
// Constructor
//--------------------------------------------------------------------------
ViewProviderPy::ViewProviderPy(ViewProvider *pcObject, PyTypeObject *T)
    : ExtensionContainerPy(static_cast<ExtensionContainerPy::PointerType>(pcObject), T)
{
}

PyObject *ViewProviderPy::PyMake(PyTypeObject* /*type*/, PyObject* /*args*/, PyObject* /*kwds*/)
{
    // never create such objects with the constructor
    PyErr_SetString(PyExc_RuntimeError, "You cannot create directly an instance of 'ViewProviderPy'.");

    return nullptr;
}

int ViewProviderPy::PyInit(PyObject* /*args*/, PyObject* /*kwd*/)
{
    return 0;
}

//--------------------------------------------------------------------------
// destructor
//--------------------------------------------------------------------------
ViewProviderPy::~ViewProviderPy()                                // Everything handled in parent
{
}

//--------------------------------------------------------------------------
// ViewProviderPy representation
//--------------------------------------------------------------------------
PyObject *ViewProviderPy::_repr()
{
    return Py_BuildValue("s", representation().c_str());
}

//--------------------------------------------------------------------------
// ViewProviderPy Attributes
//--------------------------------------------------------------------------
PyObject *ViewProviderPy::_getattr(const char *attr)			// __getattr__ function: note only need to handle new state
{
    try {
        // getter method for special Attributes (e.g. dynamic ones)
        PyObject *r = getCustomAttributes(attr);
        if(r) return r;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError,"Unknown C++ exception");
        return nullptr;
    }
#endif

    PyMethodDef *ml = Methods;
    for (; ml->ml_name != nullptr; ml++) {
        if (attr[0] == ml->ml_name[0] &&
            strcmp(attr+1, ml->ml_name+1) == 0)
            return PyCFunction_New(ml, this);
    }

    PyErr_Clear();
    return ExtensionContainerPy::_getattr(attr);
}

int ViewProviderPy::_setattr(const char *attr, PyObject *value) // __setattr__ function: note only need to handle new state
{
    try {
        // setter for special Attributes (e.g. dynamic ones)
        int r = setCustomAttributes(attr, value);
        // r = 1: handled
        // r = -1: error
        // r = 0: ignore
        if (r == 1)
            return 0;
        else if (r == -1)
            return -1;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return -1;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return -1;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return -1;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return -1;
    }
#endif

    return ExtensionContainerPy::_setattr(attr, value);
}

ViewProvider *ViewProviderPy::getViewProviderPtr() const
{
    return static_cast<ViewProvider *>(_pcTwinPointer);
}

#if defined(__clang__)
# pragma clang diagnostic pop
#endif

#if 0
/* From here on come the methods you have to implement, but NOT in this module. Implement in ViewProviderPyImp.cpp! This prototypes
 * are just for convenience when you add a new method.
 */



// returns a string which represents the object e.g. when printed in python
std::string ViewProviderPy::representation() const
{
    return {"<ViewProvider object>"};
}

PyObject* ViewProviderPy::addProperty(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ViewProviderPy::removeProperty(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ViewProviderPy::supportedProperties(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ViewProviderPy::show(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ViewProviderPy::hide(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ViewProviderPy::isVisible(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ViewProviderPy::canDragObject(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ViewProviderPy::dragObject(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ViewProviderPy::canDropObject(PyObject *args, PyObject *kwds)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ViewProviderPy::dropObject(PyObject *args, PyObject *kwds)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ViewProviderPy::canDragAndDropObject(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ViewProviderPy::replaceObject(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ViewProviderPy::doubleClicked(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ViewProviderPy::addDisplayMode(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ViewProviderPy::listDisplayModes(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ViewProviderPy::toString(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ViewProviderPy::setTransformation(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ViewProviderPy::claimChildren(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ViewProviderPy::claimChildrenRecursive(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ViewProviderPy::partialRender(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ViewProviderPy::getElementColors(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ViewProviderPy::setElementColors(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ViewProviderPy::getElementPicked(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ViewProviderPy::getDetailPath(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ViewProviderPy::signalChangeIcon(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ViewProviderPy::getBoundingBox(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}



Py::Object ViewProviderPy::getAnnotation() const
{
    //return Py::Object();
    throw Py::AttributeError("Not yet implemented");
}

void  ViewProviderPy::setAnnotation(Py::Object arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Object ViewProviderPy::getIcon() const
{
    //return Py::Object();
    throw Py::AttributeError("Not yet implemented");
}

Py::Object ViewProviderPy::getRootNode() const
{
    //return Py::Object();
    throw Py::AttributeError("Not yet implemented");
}

void  ViewProviderPy::setRootNode(Py::Object arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Object ViewProviderPy::getSwitchNode() const
{
    //return Py::Object();
    throw Py::AttributeError("Not yet implemented");
}

void  ViewProviderPy::setSwitchNode(Py::Object arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Int ViewProviderPy::getDefaultMode() const
{
    //return Py::Int();
    throw Py::AttributeError("Not yet implemented");
}

void  ViewProviderPy::setDefaultMode(Py::Int arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::String ViewProviderPy::getIV() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::Boolean ViewProviderPy::getCanRemoveChildrenFromRoot() const
{
    //return Py::Boolean();
    throw Py::AttributeError("Not yet implemented");
}

Py::Boolean ViewProviderPy::getLinkVisibility() const
{
    //return Py::Boolean();
    throw Py::AttributeError("Not yet implemented");
}

void  ViewProviderPy::setLinkVisibility(Py::Boolean arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::String ViewProviderPy::getDropPrefix() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

PyObject *ViewProviderPy::getCustomAttributes(const char* /*attr*/) const
{
    return nullptr;
}

int ViewProviderPy::setCustomAttributes(const char* /*attr*/, PyObject* /*obj*/)
{
    return 0;
}


#endif



