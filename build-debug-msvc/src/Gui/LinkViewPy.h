
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the XML file
// Every change you make here gets lost in the next full rebuild!
#ifndef GUI_LINKVIEWPY_H
#define GUI_LINKVIEWPY_H

#include <Base/BaseClass.h>
#include <Gui/ViewProviderLink.h>
#include <string>


namespace Gui
{

//===========================================================================
// LinkViewPy - Python wrapper
//===========================================================================

/** The python export class for LinkView
 */
class GuiExport LinkViewPy : public Base::BaseClassPy
{
protected:
    ~LinkViewPy() override;

public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyGetSetDef    GetterSetter[];
    PyTypeObject *GetType() override {return &Type;}

public:
    LinkViewPy(LinkView *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(PyTypeObject *, PyObject *, PyObject *);
    int PyInit(PyObject* args, PyObject*k) override;


    using PointerType = LinkView*;

    PyObject *_repr() override;        // the representation
    std::string representation() const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    /// callback for the reset() method
    static PyObject * staticCallback_reset (PyObject *self, PyObject *args);
    /// implementer for the reset() method
    PyObject*  reset(PyObject *args);
    /// callback for the setMaterial() method
    static PyObject * staticCallback_setMaterial (PyObject *self, PyObject *args);
    /// implementer for the setMaterial() method
    PyObject*  setMaterial(PyObject *args);
    /// callback for the setType() method
    static PyObject * staticCallback_setType (PyObject *self, PyObject *args);
    /// implementer for the setType() method
    PyObject*  setType(PyObject *args);
    /// callback for the setTransform() method
    static PyObject * staticCallback_setTransform (PyObject *self, PyObject *args);
    /// implementer for the setTransform() method
    PyObject*  setTransform(PyObject *args);
    /// callback for the setChildren() method
    static PyObject * staticCallback_setChildren (PyObject *self, PyObject *args);
    /// implementer for the setChildren() method
    PyObject*  setChildren(PyObject *args);
    /// callback for the setLink() method
    static PyObject * staticCallback_setLink (PyObject *self, PyObject *args);
    /// implementer for the setLink() method
    PyObject*  setLink(PyObject *args);
    /// callback for the getDetailPath() method
    static PyObject * staticCallback_getDetailPath (PyObject *self, PyObject *args);
    /// implementer for the getDetailPath() method
    PyObject*  getDetailPath(PyObject *args);
    /// callback for the getElementPicked() method
    static PyObject * staticCallback_getElementPicked (PyObject *self, PyObject *args);
    /// implementer for the getElementPicked() method
    PyObject*  getElementPicked(PyObject *args);
    /// callback for the getBoundBox() method
    static PyObject * staticCallback_getBoundBox (PyObject *self, PyObject *args);
    /// implementer for the getBoundBox() method
    PyObject*  getBoundBox(PyObject *args);
    /// callback for the getChildren() method
    static PyObject * staticCallback_getChildren (PyObject *self, PyObject *args);
    /// implementer for the getChildren() method
    PyObject*  getChildren(PyObject *args);
    //@}


    /** @name callbacks and implementers for the python object attributes */
    //@{
    ///getter callback for the LinkedView attribute
    static PyObject * staticCallback_getLinkedView (PyObject *self, void *closure);
    /// getter for the LinkedView attribute
    Py::Object getLinkedView() const;
    /// setter callback for the LinkedView attribute
    static int staticCallback_setLinkedView (PyObject *self, PyObject *value, void *closure);
    // no setter method,  LinkedView is read only!
    ///getter callback for the SubNames attribute
    static PyObject * staticCallback_getSubNames (PyObject *self, void *closure);
    /// getter for the SubNames attribute
    Py::Object getSubNames() const;
    /// setter callback for the SubNames attribute
    static int staticCallback_setSubNames (PyObject *self, PyObject *value, void *closure);
    // no setter method,  SubNames is read only!
    ///getter callback for the RootNode attribute
    static PyObject * staticCallback_getRootNode (PyObject *self, void *closure);
    /// getter for the RootNode attribute
    Py::Object getRootNode() const;
    /// setter callback for the RootNode attribute
    static int staticCallback_setRootNode (PyObject *self, PyObject *value, void *closure);
    // no setter method,  RootNode is read only!
    ///getter callback for the Owner attribute
    static PyObject * staticCallback_getOwner (PyObject *self, void *closure);
    /// getter for the Owner attribute
    Py::Object getOwner() const;
    /// setter callback for the Owner attribute
    static int staticCallback_setOwner (PyObject *self, PyObject *value, void *closure);
    /// setter for the Owner attribute
    void setOwner(Py::Object arg);
    ///getter callback for the Visibilities attribute
    static PyObject * staticCallback_getVisibilities (PyObject *self, void *closure);
    /// getter for the Visibilities attribute
    Py::Object getVisibilities() const;
    /// setter callback for the Visibilities attribute
    static int staticCallback_setVisibilities (PyObject *self, PyObject *value, void *closure);
    /// setter for the Visibilities attribute
    void setVisibilities(Py::Object arg);
    ///getter callback for the Count attribute
    static PyObject * staticCallback_getCount (PyObject *self, void *closure);
    /// getter for the Count attribute
    Py::Int getCount() const;
    /// setter callback for the Count attribute
    static int staticCallback_setCount (PyObject *self, PyObject *value, void *closure);
    /// setter for the Count attribute
    void setCount(Py::Int arg);
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(const char *attr) override;              // __getattr__ function
    int _setattr(const char *attr, PyObject *value) override;   // __setattr__ function

    /// getter for the object handled by this class
    LinkView *getLinkViewPtr() const;

};

}  //namespace Gui

#endif  // GUI_LINKVIEWPY_H


