
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the XML file
// Every change you make here gets lost in the next full rebuild!
#ifndef GUI_WORKBENCHPY_H
#define GUI_WORKBENCHPY_H

#include <Base/BaseClassPy.h>
#include <Gui/Workbench.h>
#include <string>


namespace Gui
{

//===========================================================================
// WorkbenchPy - Python wrapper
//===========================================================================

/** The python export class for Workbench
 */
class GuiExport WorkbenchPy : public Base::BaseClassPy
{
protected:
    ~WorkbenchPy() override;

public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyGetSetDef    GetterSetter[];
    PyTypeObject *GetType() override {return &Type;}

public:
    WorkbenchPy(Workbench *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(PyTypeObject *, PyObject *, PyObject *);
    int PyInit(PyObject* args, PyObject*k) override;


    using PointerType = Workbench*;

    PyObject *_repr() override;        // the representation
    std::string representation() const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    /// callback for the name() method
    static PyObject * staticCallback_name (PyObject *self, PyObject *args);
    /// implementer for the name() method
    PyObject*  name(PyObject *args);
    /// callback for the activate() method
    static PyObject * staticCallback_activate (PyObject *self, PyObject *args);
    /// implementer for the activate() method
    PyObject*  activate(PyObject *args);
    /// callback for the listToolbars() method
    static PyObject * staticCallback_listToolbars (PyObject *self, PyObject *args);
    /// implementer for the listToolbars() method
    PyObject*  listToolbars(PyObject *args);
    /// callback for the getToolbarItems() method
    static PyObject * staticCallback_getToolbarItems (PyObject *self, PyObject *args);
    /// implementer for the getToolbarItems() method
    PyObject*  getToolbarItems(PyObject *args);
    /// callback for the listCommandbars() method
    static PyObject * staticCallback_listCommandbars (PyObject *self, PyObject *args);
    /// implementer for the listCommandbars() method
    PyObject*  listCommandbars(PyObject *args);
    /// callback for the listMenus() method
    static PyObject * staticCallback_listMenus (PyObject *self, PyObject *args);
    /// implementer for the listMenus() method
    PyObject*  listMenus(PyObject *args);
    /// callback for the reloadActive() method
    static PyObject * staticCallback_reloadActive (PyObject *self, PyObject *args);
    /// implementer for the reloadActive() method
    static PyObject*  reloadActive(PyObject *args);
    //@}


    /** @name callbacks and implementers for the python object attributes */
    //@{
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(const char *attr) override;              // __getattr__ function
    int _setattr(const char *attr, PyObject *value) override;   // __setattr__ function

    /// getter for the object handled by this class
    Workbench *getWorkbenchPtr() const;

};

}  //namespace Gui

#endif  // GUI_WORKBENCHPY_H


