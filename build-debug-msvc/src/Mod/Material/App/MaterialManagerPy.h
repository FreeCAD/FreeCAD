
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the XML file
// Every change you make here gets lost in the next full rebuild!
#ifndef MATERIALS_MATERIALMANAGERPY_H
#define MATERIALS_MATERIALMANAGERPY_H

#include <Base/BaseClassPy.h>
#include <Mod/Material/App/MaterialManager.h>
#include <string>


namespace Materials
{

//===========================================================================
// MaterialManagerPy - Python wrapper
//===========================================================================

/** The python export class for MaterialManager
 */
class MaterialsExport MaterialManagerPy : public Base::BaseClassPy
{
protected:
    ~MaterialManagerPy() override;

public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyGetSetDef    GetterSetter[];
    PyTypeObject *GetType() override {return &Type;}

public:
    MaterialManagerPy(MaterialManager *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(PyTypeObject *, PyObject *, PyObject *);
    int PyInit(PyObject* args, PyObject*k) override;


    using PointerType = MaterialManager*;

    PyObject *_repr() override;        // the representation
    std::string representation() const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    /// callback for the getMaterial() method
    static PyObject * staticCallback_getMaterial (PyObject *self, PyObject *args);
    /// implementer for the getMaterial() method
    PyObject*  getMaterial(PyObject *args);
    /// callback for the getMaterialByPath() method
    static PyObject * staticCallback_getMaterialByPath (PyObject *self, PyObject *args);
    /// implementer for the getMaterialByPath() method
    PyObject*  getMaterialByPath(PyObject *args);
    /// callback for the inheritMaterial() method
    static PyObject * staticCallback_inheritMaterial (PyObject *self, PyObject *args);
    /// implementer for the inheritMaterial() method
    PyObject*  inheritMaterial(PyObject *args);
    /// callback for the materialsWithModel() method
    static PyObject * staticCallback_materialsWithModel (PyObject *self, PyObject *args);
    /// implementer for the materialsWithModel() method
    PyObject*  materialsWithModel(PyObject *args);
    /// callback for the materialsWithModelComplete() method
    static PyObject * staticCallback_materialsWithModelComplete (PyObject *self, PyObject *args);
    /// implementer for the materialsWithModelComplete() method
    PyObject*  materialsWithModelComplete(PyObject *args);
    /// callback for the save() method
    static PyObject * staticCallback_save (PyObject *self, PyObject *args, PyObject *kwd);
    /// implementer for the save() method
    PyObject*  save(PyObject *args, PyObject *kwd);
    /// callback for the filterMaterials() method
    static PyObject * staticCallback_filterMaterials (PyObject *self, PyObject *args, PyObject *kwd);
    /// implementer for the filterMaterials() method
    PyObject*  filterMaterials(PyObject *args, PyObject *kwd);
    /// callback for the refresh() method
    static PyObject * staticCallback_refresh (PyObject *self, PyObject *args);
    /// implementer for the refresh() method
    PyObject*  refresh(PyObject *args);
    //@}


    /** @name callbacks and implementers for the python object attributes */
    //@{
    ///getter callback for the MaterialLibraries attribute
    static PyObject * staticCallback_getMaterialLibraries (PyObject *self, void *closure);
    /// getter for the MaterialLibraries attribute
    Py::List getMaterialLibraries() const;
    /// setter callback for the MaterialLibraries attribute
    static int staticCallback_setMaterialLibraries (PyObject *self, PyObject *value, void *closure);
    // no setter method,  MaterialLibraries is read only!
    ///getter callback for the Materials attribute
    static PyObject * staticCallback_getMaterials (PyObject *self, void *closure);
    /// getter for the Materials attribute
    Py::Dict getMaterials() const;
    /// setter callback for the Materials attribute
    static int staticCallback_setMaterials (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Materials is read only!
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(const char *attr) override;              // __getattr__ function
    int _setattr(const char *attr, PyObject *value) override;   // __setattr__ function

    /// getter for the object handled by this class
    MaterialManager *getMaterialManagerPtr() const;

};

}  //namespace Materials

#endif  // MATERIALS_MATERIALMANAGERPY_H


