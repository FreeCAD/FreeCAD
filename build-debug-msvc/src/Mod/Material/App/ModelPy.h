
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the XML file
// Every change you make here gets lost in the next full rebuild!
#ifndef MATERIALS_MODELPY_H
#define MATERIALS_MODELPY_H

#include <Base/BaseClassPy.h>
#include <Mod/Material/App/Model.h>
#include <string>


namespace Materials
{

//===========================================================================
// ModelPy - Python wrapper
//===========================================================================

/** The python export class for Model
 */
class MaterialsExport ModelPy : public Base::BaseClassPy
{
protected:
    ~ModelPy() override;

public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyGetSetDef    GetterSetter[];
    PyTypeObject *GetType() override {return &Type;}

public:
    ModelPy(Model *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(PyTypeObject *, PyObject *, PyObject *);
    int PyInit(PyObject* args, PyObject*k) override;


    using PointerType = Model*;

    PyObject *_repr() override;        // the representation
    std::string representation() const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    //@}


    /** @name callbacks and implementers for the python object attributes */
    //@{
    ///getter callback for the LibraryName attribute
    static PyObject * staticCallback_getLibraryName (PyObject *self, void *closure);
    /// getter for the LibraryName attribute
    Py::String getLibraryName() const;
    /// setter callback for the LibraryName attribute
    static int staticCallback_setLibraryName (PyObject *self, PyObject *value, void *closure);
    // no setter method,  LibraryName is read only!
    ///getter callback for the LibraryRoot attribute
    static PyObject * staticCallback_getLibraryRoot (PyObject *self, void *closure);
    /// getter for the LibraryRoot attribute
    Py::String getLibraryRoot() const;
    /// setter callback for the LibraryRoot attribute
    static int staticCallback_setLibraryRoot (PyObject *self, PyObject *value, void *closure);
    // no setter method,  LibraryRoot is read only!
    ///getter callback for the LibraryIcon attribute
    static PyObject * staticCallback_getLibraryIcon (PyObject *self, void *closure);
    /// getter for the LibraryIcon attribute
    Py::String getLibraryIcon() const;
    /// setter callback for the LibraryIcon attribute
    static int staticCallback_setLibraryIcon (PyObject *self, PyObject *value, void *closure);
    // no setter method,  LibraryIcon is read only!
    ///getter callback for the Name attribute
    static PyObject * staticCallback_getName (PyObject *self, void *closure);
    /// getter for the Name attribute
    Py::String getName() const;
    /// setter callback for the Name attribute
    static int staticCallback_setName (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Name is read only!
    ///getter callback for the Directory attribute
    static PyObject * staticCallback_getDirectory (PyObject *self, void *closure);
    /// getter for the Directory attribute
    Py::String getDirectory() const;
    /// setter callback for the Directory attribute
    static int staticCallback_setDirectory (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Directory is read only!
    ///getter callback for the UUID attribute
    static PyObject * staticCallback_getUUID (PyObject *self, void *closure);
    /// getter for the UUID attribute
    Py::String getUUID() const;
    /// setter callback for the UUID attribute
    static int staticCallback_setUUID (PyObject *self, PyObject *value, void *closure);
    // no setter method,  UUID is read only!
    ///getter callback for the Description attribute
    static PyObject * staticCallback_getDescription (PyObject *self, void *closure);
    /// getter for the Description attribute
    Py::String getDescription() const;
    /// setter callback for the Description attribute
    static int staticCallback_setDescription (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Description is read only!
    ///getter callback for the URL attribute
    static PyObject * staticCallback_getURL (PyObject *self, void *closure);
    /// getter for the URL attribute
    Py::String getURL() const;
    /// setter callback for the URL attribute
    static int staticCallback_setURL (PyObject *self, PyObject *value, void *closure);
    // no setter method,  URL is read only!
    ///getter callback for the DOI attribute
    static PyObject * staticCallback_getDOI (PyObject *self, void *closure);
    /// getter for the DOI attribute
    Py::String getDOI() const;
    /// setter callback for the DOI attribute
    static int staticCallback_setDOI (PyObject *self, PyObject *value, void *closure);
    // no setter method,  DOI is read only!
    ///getter callback for the Inherited attribute
    static PyObject * staticCallback_getInherited (PyObject *self, void *closure);
    /// getter for the Inherited attribute
    Py::List getInherited() const;
    /// setter callback for the Inherited attribute
    static int staticCallback_setInherited (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Inherited is read only!
    ///getter callback for the Properties attribute
    static PyObject * staticCallback_getProperties (PyObject *self, void *closure);
    /// getter for the Properties attribute
    Py::Dict getProperties() const;
    /// setter callback for the Properties attribute
    static int staticCallback_setProperties (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Properties is read only!
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(const char *attr) override;              // __getattr__ function
    int _setattr(const char *attr, PyObject *value) override;   // __setattr__ function

    /// getter for the object handled by this class
    Model *getModelPtr() const;

};

}  //namespace Materials

#endif  // MATERIALS_MODELPY_H


