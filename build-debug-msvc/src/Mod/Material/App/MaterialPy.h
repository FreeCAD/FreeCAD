
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the XML file
// Every change you make here gets lost in the next full rebuild!
#ifndef MATERIALS_MATERIALPY_H
#define MATERIALS_MATERIALPY_H

#include <Base/BaseClassPy.h>
#include <Mod/Material/App/Materials.h>
#include <string>


namespace Materials
{

//===========================================================================
// MaterialPy - Python wrapper
//===========================================================================

/** The python export class for Material
 */
class MaterialsExport MaterialPy : public Base::BaseClassPy
{
protected:
    ~MaterialPy() override;

public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyGetSetDef    GetterSetter[];
    PyTypeObject *GetType() override {return &Type;}

public:
    MaterialPy(Material *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(PyTypeObject *, PyObject *, PyObject *);
    int PyInit(PyObject* args, PyObject*k) override;


    using PointerType = Material*;

    PyObject *_repr() override;        // the representation
    std::string representation() const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    /// callback for the addPhysicalModel() method
    static PyObject * staticCallback_addPhysicalModel (PyObject *self, PyObject *args);
    /// implementer for the addPhysicalModel() method
    PyObject*  addPhysicalModel(PyObject *args);
    /// callback for the removePhysicalModel() method
    static PyObject * staticCallback_removePhysicalModel (PyObject *self, PyObject *args);
    /// implementer for the removePhysicalModel() method
    PyObject*  removePhysicalModel(PyObject *args);
    /// callback for the hasPhysicalModel() method
    static PyObject * staticCallback_hasPhysicalModel (PyObject *self, PyObject *args);
    /// implementer for the hasPhysicalModel() method
    PyObject*  hasPhysicalModel(PyObject *args);
    /// callback for the addAppearanceModel() method
    static PyObject * staticCallback_addAppearanceModel (PyObject *self, PyObject *args);
    /// implementer for the addAppearanceModel() method
    PyObject*  addAppearanceModel(PyObject *args);
    /// callback for the removeAppearanceModel() method
    static PyObject * staticCallback_removeAppearanceModel (PyObject *self, PyObject *args);
    /// implementer for the removeAppearanceModel() method
    PyObject*  removeAppearanceModel(PyObject *args);
    /// callback for the hasAppearanceModel() method
    static PyObject * staticCallback_hasAppearanceModel (PyObject *self, PyObject *args);
    /// implementer for the hasAppearanceModel() method
    PyObject*  hasAppearanceModel(PyObject *args);
    /// callback for the isPhysicalModelComplete() method
    static PyObject * staticCallback_isPhysicalModelComplete (PyObject *self, PyObject *args);
    /// implementer for the isPhysicalModelComplete() method
    PyObject*  isPhysicalModelComplete(PyObject *args);
    /// callback for the isAppearanceModelComplete() method
    static PyObject * staticCallback_isAppearanceModelComplete (PyObject *self, PyObject *args);
    /// implementer for the isAppearanceModelComplete() method
    PyObject*  isAppearanceModelComplete(PyObject *args);
    /// callback for the hasPhysicalProperty() method
    static PyObject * staticCallback_hasPhysicalProperty (PyObject *self, PyObject *args);
    /// implementer for the hasPhysicalProperty() method
    PyObject*  hasPhysicalProperty(PyObject *args);
    /// callback for the hasAppearanceProperty() method
    static PyObject * staticCallback_hasAppearanceProperty (PyObject *self, PyObject *args);
    /// implementer for the hasAppearanceProperty() method
    PyObject*  hasAppearanceProperty(PyObject *args);
    /// callback for the hasLegacyProperties() method
    static PyObject * staticCallback_hasLegacyProperties (PyObject *self, PyObject *args);
    /// implementer for the hasLegacyProperties() method
    PyObject*  hasLegacyProperties(PyObject *args);
    /// callback for the getPhysicalValue() method
    static PyObject * staticCallback_getPhysicalValue (PyObject *self, PyObject *args);
    /// implementer for the getPhysicalValue() method
    PyObject*  getPhysicalValue(PyObject *args);
    /// callback for the setPhysicalValue() method
    static PyObject * staticCallback_setPhysicalValue (PyObject *self, PyObject *args);
    /// implementer for the setPhysicalValue() method
    PyObject*  setPhysicalValue(PyObject *args);
    /// callback for the getAppearanceValue() method
    static PyObject * staticCallback_getAppearanceValue (PyObject *self, PyObject *args);
    /// implementer for the getAppearanceValue() method
    PyObject*  getAppearanceValue(PyObject *args);
    /// callback for the setAppearanceValue() method
    static PyObject * staticCallback_setAppearanceValue (PyObject *self, PyObject *args);
    /// implementer for the setAppearanceValue() method
    PyObject*  setAppearanceValue(PyObject *args);
    //@}


    /** @name callbacks and implementers for the python object attributes */
    //@{
    ///getter callback for the LibraryName attribute
    static PyObject * staticCallback_getLibraryName (PyObject *self, void *closure);
    /// getter for the LibraryName attribute
    Py::String getLibraryName() const;
    /// setter callback for the LibraryName attribute
    static int staticCallback_setLibraryName (PyObject *self, PyObject *value, void *closure);
    // no setter method,  LibraryName is read only!
    ///getter callback for the LibraryRoot attribute
    static PyObject * staticCallback_getLibraryRoot (PyObject *self, void *closure);
    /// getter for the LibraryRoot attribute
    Py::String getLibraryRoot() const;
    /// setter callback for the LibraryRoot attribute
    static int staticCallback_setLibraryRoot (PyObject *self, PyObject *value, void *closure);
    // no setter method,  LibraryRoot is read only!
    ///getter callback for the LibraryIcon attribute
    static PyObject * staticCallback_getLibraryIcon (PyObject *self, void *closure);
    /// getter for the LibraryIcon attribute
    Py::String getLibraryIcon() const;
    /// setter callback for the LibraryIcon attribute
    static int staticCallback_setLibraryIcon (PyObject *self, PyObject *value, void *closure);
    // no setter method,  LibraryIcon is read only!
    ///getter callback for the Name attribute
    static PyObject * staticCallback_getName (PyObject *self, void *closure);
    /// getter for the Name attribute
    Py::String getName() const;
    /// setter callback for the Name attribute
    static int staticCallback_setName (PyObject *self, PyObject *value, void *closure);
    /// setter for the Name attribute
    void setName(Py::String arg);
    ///getter callback for the Directory attribute
    static PyObject * staticCallback_getDirectory (PyObject *self, void *closure);
    /// getter for the Directory attribute
    Py::String getDirectory() const;
    /// setter callback for the Directory attribute
    static int staticCallback_setDirectory (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Directory is read only!
    ///getter callback for the UUID attribute
    static PyObject * staticCallback_getUUID (PyObject *self, void *closure);
    /// getter for the UUID attribute
    Py::String getUUID() const;
    /// setter callback for the UUID attribute
    static int staticCallback_setUUID (PyObject *self, PyObject *value, void *closure);
    // no setter method,  UUID is read only!
    ///getter callback for the Description attribute
    static PyObject * staticCallback_getDescription (PyObject *self, void *closure);
    /// getter for the Description attribute
    Py::String getDescription() const;
    /// setter callback for the Description attribute
    static int staticCallback_setDescription (PyObject *self, PyObject *value, void *closure);
    /// setter for the Description attribute
    void setDescription(Py::String arg);
    ///getter callback for the URL attribute
    static PyObject * staticCallback_getURL (PyObject *self, void *closure);
    /// getter for the URL attribute
    Py::String getURL() const;
    /// setter callback for the URL attribute
    static int staticCallback_setURL (PyObject *self, PyObject *value, void *closure);
    /// setter for the URL attribute
    void setURL(Py::String arg);
    ///getter callback for the Reference attribute
    static PyObject * staticCallback_getReference (PyObject *self, void *closure);
    /// getter for the Reference attribute
    Py::String getReference() const;
    /// setter callback for the Reference attribute
    static int staticCallback_setReference (PyObject *self, PyObject *value, void *closure);
    /// setter for the Reference attribute
    void setReference(Py::String arg);
    ///getter callback for the Parent attribute
    static PyObject * staticCallback_getParent (PyObject *self, void *closure);
    /// getter for the Parent attribute
    Py::String getParent() const;
    /// setter callback for the Parent attribute
    static int staticCallback_setParent (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Parent is read only!
    ///getter callback for the AuthorAndLicense attribute
    static PyObject * staticCallback_getAuthorAndLicense (PyObject *self, void *closure);
    /// getter for the AuthorAndLicense attribute
    Py::String getAuthorAndLicense() const;
    /// setter callback for the AuthorAndLicense attribute
    static int staticCallback_setAuthorAndLicense (PyObject *self, PyObject *value, void *closure);
    // no setter method,  AuthorAndLicense is read only!
    ///getter callback for the Author attribute
    static PyObject * staticCallback_getAuthor (PyObject *self, void *closure);
    /// getter for the Author attribute
    Py::String getAuthor() const;
    /// setter callback for the Author attribute
    static int staticCallback_setAuthor (PyObject *self, PyObject *value, void *closure);
    /// setter for the Author attribute
    void setAuthor(Py::String arg);
    ///getter callback for the License attribute
    static PyObject * staticCallback_getLicense (PyObject *self, void *closure);
    /// getter for the License attribute
    Py::String getLicense() const;
    /// setter callback for the License attribute
    static int staticCallback_setLicense (PyObject *self, PyObject *value, void *closure);
    /// setter for the License attribute
    void setLicense(Py::String arg);
    ///getter callback for the PhysicalModels attribute
    static PyObject * staticCallback_getPhysicalModels (PyObject *self, void *closure);
    /// getter for the PhysicalModels attribute
    Py::List getPhysicalModels() const;
    /// setter callback for the PhysicalModels attribute
    static int staticCallback_setPhysicalModels (PyObject *self, PyObject *value, void *closure);
    // no setter method,  PhysicalModels is read only!
    ///getter callback for the AppearanceModels attribute
    static PyObject * staticCallback_getAppearanceModels (PyObject *self, void *closure);
    /// getter for the AppearanceModels attribute
    Py::List getAppearanceModels() const;
    /// setter callback for the AppearanceModels attribute
    static int staticCallback_setAppearanceModels (PyObject *self, PyObject *value, void *closure);
    // no setter method,  AppearanceModels is read only!
    ///getter callback for the Tags attribute
    static PyObject * staticCallback_getTags (PyObject *self, void *closure);
    /// getter for the Tags attribute
    Py::List getTags() const;
    /// setter callback for the Tags attribute
    static int staticCallback_setTags (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Tags is read only!
    ///getter callback for the Properties attribute
    static PyObject * staticCallback_getProperties (PyObject *self, void *closure);
    /// getter for the Properties attribute
    Py::Dict getProperties() const;
    /// setter callback for the Properties attribute
    static int staticCallback_setProperties (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Properties is read only!
    ///getter callback for the PhysicalProperties attribute
    static PyObject * staticCallback_getPhysicalProperties (PyObject *self, void *closure);
    /// getter for the PhysicalProperties attribute
    Py::Dict getPhysicalProperties() const;
    /// setter callback for the PhysicalProperties attribute
    static int staticCallback_setPhysicalProperties (PyObject *self, PyObject *value, void *closure);
    // no setter method,  PhysicalProperties is read only!
    ///getter callback for the AppearanceProperties attribute
    static PyObject * staticCallback_getAppearanceProperties (PyObject *self, void *closure);
    /// getter for the AppearanceProperties attribute
    Py::Dict getAppearanceProperties() const;
    /// setter callback for the AppearanceProperties attribute
    static int staticCallback_setAppearanceProperties (PyObject *self, PyObject *value, void *closure);
    // no setter method,  AppearanceProperties is read only!
    ///getter callback for the LegacyProperties attribute
    static PyObject * staticCallback_getLegacyProperties (PyObject *self, void *closure);
    /// getter for the LegacyProperties attribute
    Py::Dict getLegacyProperties() const;
    /// setter callback for the LegacyProperties attribute
    static int staticCallback_setLegacyProperties (PyObject *self, PyObject *value, void *closure);
    // no setter method,  LegacyProperties is read only!
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(const char *attr) override;              // __getattr__ function
    int _setattr(const char *attr, PyObject *value) override;   // __setattr__ function

    /// getter for the object handled by this class
    Material *getMaterialPtr() const;

};

}  //namespace Materials

#endif  // MATERIALS_MATERIALPY_H


