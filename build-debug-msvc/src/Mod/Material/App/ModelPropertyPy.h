
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the XML file
// Every change you make here gets lost in the next full rebuild!
#ifndef MATERIALS_MODELPROPERTYPY_H
#define MATERIALS_MODELPROPERTYPY_H

#include <Base/BaseClassPy.h>
#include <Mod/Material/App/Model.h>
#include <string>


namespace Materials
{

//===========================================================================
// ModelPropertyPy - Python wrapper
//===========================================================================

/** The python export class for ModelProperty
 */
class MaterialsExport ModelPropertyPy : public Base::BaseClassPy
{
protected:
    ~ModelPropertyPy() override;

public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyGetSetDef    GetterSetter[];
    PyTypeObject *GetType() override {return &Type;}

public:
    ModelPropertyPy(ModelProperty *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(PyTypeObject *, PyObject *, PyObject *);
    int PyInit(PyObject* args, PyObject*k) override;


    using PointerType = ModelProperty*;

    PyObject *_repr() override;        // the representation
    std::string representation() const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    //@}


    /** @name callbacks and implementers for the python object attributes */
    //@{
    ///getter callback for the Name attribute
    static PyObject * staticCallback_getName (PyObject *self, void *closure);
    /// getter for the Name attribute
    Py::String getName() const;
    /// setter callback for the Name attribute
    static int staticCallback_setName (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Name is read only!
    ///getter callback for the Type attribute
    static PyObject * staticCallback_getType (PyObject *self, void *closure);
    /// getter for the Type attribute
    Py::String getType() const;
    /// setter callback for the Type attribute
    static int staticCallback_setType (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Type is read only!
    ///getter callback for the Units attribute
    static PyObject * staticCallback_getUnits (PyObject *self, void *closure);
    /// getter for the Units attribute
    Py::String getUnits() const;
    /// setter callback for the Units attribute
    static int staticCallback_setUnits (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Units is read only!
    ///getter callback for the URL attribute
    static PyObject * staticCallback_getURL (PyObject *self, void *closure);
    /// getter for the URL attribute
    Py::String getURL() const;
    /// setter callback for the URL attribute
    static int staticCallback_setURL (PyObject *self, PyObject *value, void *closure);
    // no setter method,  URL is read only!
    ///getter callback for the Description attribute
    static PyObject * staticCallback_getDescription (PyObject *self, void *closure);
    /// getter for the Description attribute
    Py::String getDescription() const;
    /// setter callback for the Description attribute
    static int staticCallback_setDescription (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Description is read only!
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(const char *attr) override;              // __getattr__ function
    int _setattr(const char *attr, PyObject *value) override;   // __setattr__ function

    /// getter for the object handled by this class
    ModelProperty *getModelPropertyPtr() const;

};

}  //namespace Materials

#endif  // MATERIALS_MODELPROPERTYPY_H


