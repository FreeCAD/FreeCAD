
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the .XML file
// Every change you make here gets lost in the next full rebuild!
// This File is normally built as an include in UUIDsPyImp.cpp! It's not intended to be in a project!

#include <boost/filesystem/path.hpp>
#include <boost/filesystem/operations.hpp>
#include <boost/filesystem/exception.hpp>
#include <Base/PyObjectBase.h>
#include <Base/Console.h>
#include <Base/Exception.h>
#include <CXX/Objects.hxx>

#if defined(__clang__)
# pragma clang diagnostic push
# pragma clang diagnostic ignored "-Wdeprecated-declarations"
#endif

using Base::streq;
using namespace Materials;

/// Type structure of UUIDsPy
PyTypeObject UUIDsPy::Type = {
    PyVarObject_HEAD_INIT(&PyType_Type,0)
    "Material.UUIDs",     /*tp_name*/
    sizeof(UUIDsPy),                       /*tp_basicsize*/
    0,                                                /*tp_itemsize*/
    /* methods */
    PyDestructor,                                     /*tp_dealloc*/
#if PY_VERSION_HEX >= 0x03080000
    0,                                                /*tp_vectorcall_offset*/
#else
    nullptr,                                          /*tp_print*/
#endif
    nullptr,                                          /*tp_getattr*/
    nullptr,                                          /*tp_setattr*/
    nullptr,                                          /*tp_compare*/
    __repr,                                           /*tp_repr*/
    nullptr,                                          /*tp_as_number*/
    nullptr,                                          /*tp_as_sequence*/
    nullptr,                                          /*tp_as_mapping*/
    nullptr,                                          /*tp_hash*/
    nullptr,                                          /*tp_call */
    nullptr,                                          /*tp_str  */
    __getattro,                                       /*tp_getattro*/
    __setattro,                                       /*tp_setattro*/
    /* --- Functions to access object as input/output buffer ---------*/
    nullptr,                                          /* tp_as_buffer */
    /* --- Flags to define presence of optional/expanded features */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT,        /*tp_flags */
    "Material model UUID identifiers.",           /*tp_doc */
    nullptr,                                          /*tp_traverse */
    nullptr,                                          /*tp_clear */
    nullptr,                                          /*tp_richcompare */
    0,                                                /*tp_weaklistoffset */
    nullptr,                                          /*tp_iter */
    nullptr,                                          /*tp_iternext */
    Materials::UUIDsPy::Methods,                     /*tp_methods */
    nullptr,                                          /*tp_members */
    Materials::UUIDsPy::GetterSetter,                     /*tp_getset */
    &Base::BaseClassPy::Type,                        /*tp_base */
    nullptr,                                          /*tp_dict */
    nullptr,                                          /*tp_descr_get */
    nullptr,                                          /*tp_descr_set */
    0,                                                /*tp_dictoffset */
    __PyInit,                                         /*tp_init */
    nullptr,                                          /*tp_alloc */
    Materials::UUIDsPy::PyMake,/*tp_new */
    nullptr,                                          /*tp_free   Low-level free-memory routine */
    nullptr,                                          /*tp_is_gc  For PyObject_IS_GC */
    nullptr,                                          /*tp_bases */
    nullptr,                                          /*tp_mro    method resolution order */
    nullptr,                                          /*tp_cache */
    nullptr,                                          /*tp_subclasses */
    nullptr,                                          /*tp_weaklist */
    nullptr,                                          /*tp_del */
    0,                                                /*tp_version_tag */
    nullptr                                           /*tp_finalize */
#if PY_VERSION_HEX >= 0x03090000
    ,nullptr                                          /*tp_vectorcall */
#if PY_VERSION_HEX >= 0x030c0000
    ,0                                                /*tp_watched */
#endif
#elif PY_VERSION_HEX >= 0x03080000
    ,nullptr                                          /*tp_vectorcall */
    /* bpo-37250: kept for backwards compatibility in CPython 3.8 only */
    ,nullptr                                          /*tp_print */
#endif
};

/// Methods structure of UUIDsPy
PyMethodDef UUIDsPy::Methods[] = {
    {nullptr, nullptr, 0, nullptr}		/* Sentinel */
};



/// Attribute structure of UUIDsPy
PyGetSetDef UUIDsPy::GetterSetter[] = {
    {"Father",
        (getter) staticCallback_getFather,
        (setter) staticCallback_setFather,
        "UUID for model System:Legacy/Father",
        nullptr
    },
    {"MaterialStandard",
        (getter) staticCallback_getMaterialStandard,
        (setter) staticCallback_setMaterialStandard,
        "UUID for model System:Legacy/MaterialStandard",
        nullptr
    },
    {"ArrudaBoyce",
        (getter) staticCallback_getArrudaBoyce,
        (setter) staticCallback_setArrudaBoyce,
        "UUID for model System:Mechanical/ArrudaBoyce",
        nullptr
    },
    {"Density",
        (getter) staticCallback_getDensity,
        (setter) staticCallback_setDensity,
        "UUID for model System:Mechanical/Density",
        nullptr
    },
    {"Hardness",
        (getter) staticCallback_getHardness,
        (setter) staticCallback_setHardness,
        "UUID for model System:Mechanical/Hardness",
        nullptr
    },
    {"IsotropicLinearElastic",
        (getter) staticCallback_getIsotropicLinearElastic,
        (setter) staticCallback_setIsotropicLinearElastic,
        "UUID for model System:Mechanical/IsotropicLinearElastic",
        nullptr
    },
    {"LinearElastic",
        (getter) staticCallback_getLinearElastic,
        (setter) staticCallback_setLinearElastic,
        "UUID for model System:Mechanical/LinearElastic",
        nullptr
    },
    {"Machinability",
        (getter) staticCallback_getMachinability,
        (setter) staticCallback_setMachinability,
        "UUID for model System:Machining/Machinability",
        nullptr
    },
    {"MooneyRivlin",
        (getter) staticCallback_getMooneyRivlin,
        (setter) staticCallback_setMooneyRivlin,
        "UUID for model System:Mechanical/MooneyRivlin",
        nullptr
    },
    {"NeoHooke",
        (getter) staticCallback_getNeoHooke,
        (setter) staticCallback_setNeoHooke,
        "UUID for model System:Mechanical/NeoHooke",
        nullptr
    },
    {"OgdenN1",
        (getter) staticCallback_getOgdenN1,
        (setter) staticCallback_setOgdenN1,
        "UUID for model System:Mechanical/OgdenN1",
        nullptr
    },
    {"OgdenN2",
        (getter) staticCallback_getOgdenN2,
        (setter) staticCallback_setOgdenN2,
        "UUID for model System:Mechanical/OgdenN2",
        nullptr
    },
    {"OgdenN3",
        (getter) staticCallback_getOgdenN3,
        (setter) staticCallback_setOgdenN3,
        "UUID for model System:Mechanical/OgdenN3",
        nullptr
    },
    {"OgdenYld2004p18",
        (getter) staticCallback_getOgdenYld2004p18,
        (setter) staticCallback_setOgdenYld2004p18,
        "UUID for model System:Mechanical/OgdenYld2004p18",
        nullptr
    },
    {"OrthotropicLinearElastic",
        (getter) staticCallback_getOrthotropicLinearElastic,
        (setter) staticCallback_setOrthotropicLinearElastic,
        "UUID for model System:Mechanical/OrthotropicLinearElastic",
        nullptr
    },
    {"PolynomialN1",
        (getter) staticCallback_getPolynomialN1,
        (setter) staticCallback_setPolynomialN1,
        "UUID for model System:Mechanical/PolynomialN1",
        nullptr
    },
    {"PolynomialN2",
        (getter) staticCallback_getPolynomialN2,
        (setter) staticCallback_setPolynomialN2,
        "UUID for model System:Mechanical/PolynomialN2",
        nullptr
    },
    {"PolynomialN3",
        (getter) staticCallback_getPolynomialN3,
        (setter) staticCallback_setPolynomialN3,
        "UUID for model System:Mechanical/PolynomialN3",
        nullptr
    },
    {"ReducedPolynomialN1",
        (getter) staticCallback_getReducedPolynomialN1,
        (setter) staticCallback_setReducedPolynomialN1,
        "UUID for model System:Mechanical/ReducedPolynomialN1",
        nullptr
    },
    {"ReducedPolynomialN2",
        (getter) staticCallback_getReducedPolynomialN2,
        (setter) staticCallback_setReducedPolynomialN2,
        "UUID for model System:Mechanical/ReducedPolynomialN2",
        nullptr
    },
    {"ReducedPolynomialN3",
        (getter) staticCallback_getReducedPolynomialN3,
        (setter) staticCallback_setReducedPolynomialN3,
        "UUID for model System:Mechanical/ReducedPolynomialN3",
        nullptr
    },
    {"Yeoh",
        (getter) staticCallback_getYeoh,
        (setter) staticCallback_setYeoh,
        "UUID for model System:Mechanical/Yeoh",
        nullptr
    },
    {"Fluid",
        (getter) staticCallback_getFluid,
        (setter) staticCallback_setFluid,
        "UUID for model System:Fluid/Fluid",
        nullptr
    },
    {"Thermal",
        (getter) staticCallback_getThermal,
        (setter) staticCallback_setThermal,
        "UUID for model System:Thermal/Thermal",
        nullptr
    },
    {"Electromagnetic",
        (getter) staticCallback_getElectromagnetic,
        (setter) staticCallback_setElectromagnetic,
        "UUID for model System:Electromagnetic/Electromagnetic",
        nullptr
    },
    {"Architectural",
        (getter) staticCallback_getArchitectural,
        (setter) staticCallback_setArchitectural,
        "UUID for model System:Architectural/Architectural",
        nullptr
    },
    {"ArchitecturalRendering",
        (getter) staticCallback_getArchitecturalRendering,
        (setter) staticCallback_setArchitecturalRendering,
        "UUID for model System:Architectural/ArchitecturalRendering",
        nullptr
    },
    {"Costs",
        (getter) staticCallback_getCosts,
        (setter) staticCallback_setCosts,
        "UUID for model System:Costs/Costs",
        nullptr
    },
    {"BasicRendering",
        (getter) staticCallback_getBasicRendering,
        (setter) staticCallback_setBasicRendering,
        "UUID for model System:Rendering/BasicRendering",
        nullptr
    },
    {"TextureRendering",
        (getter) staticCallback_getTextureRendering,
        (setter) staticCallback_setTextureRendering,
        "UUID for model System:Rendering/TextureRendering",
        nullptr
    },
    {"AdvancedRendering",
        (getter) staticCallback_getAdvancedRendering,
        (setter) staticCallback_setAdvancedRendering,
        "UUID for model System:Rendering/AdvancedRendering",
        nullptr
    },
    {"VectorRendering",
        (getter) staticCallback_getVectorRendering,
        (setter) staticCallback_setVectorRendering,
        "UUID for model System:Rendering/VectorRendering",
        nullptr
    },
    {"RenderAppleseed",
        (getter) staticCallback_getRenderAppleseed,
        (setter) staticCallback_setRenderAppleseed,
        "UUID for model System:Rendering/RenderAppleseed",
        nullptr
    },
    {"RenderCarpaint",
        (getter) staticCallback_getRenderCarpaint,
        (setter) staticCallback_setRenderCarpaint,
        "UUID for model System:Rendering/RenderCarpaint",
        nullptr
    },
    {"RenderCycles",
        (getter) staticCallback_getRenderCycles,
        (setter) staticCallback_setRenderCycles,
        "UUID for model System:Rendering/RenderCycles",
        nullptr
    },
    {"RenderDiffuse",
        (getter) staticCallback_getRenderDiffuse,
        (setter) staticCallback_setRenderDiffuse,
        "UUID for model System:Rendering/RenderDiffuse",
        nullptr
    },
    {"RenderDisney",
        (getter) staticCallback_getRenderDisney,
        (setter) staticCallback_setRenderDisney,
        "UUID for model System:Rendering/RenderDisney",
        nullptr
    },
    {"RenderEmission",
        (getter) staticCallback_getRenderEmission,
        (setter) staticCallback_setRenderEmission,
        "UUID for model System:Rendering/RenderEmission",
        nullptr
    },
    {"RenderGlass",
        (getter) staticCallback_getRenderGlass,
        (setter) staticCallback_setRenderGlass,
        "UUID for model System:Rendering/RenderGlass",
        nullptr
    },
    {"RenderLuxcore",
        (getter) staticCallback_getRenderLuxcore,
        (setter) staticCallback_setRenderLuxcore,
        "UUID for model System:Rendering/RenderLuxcore",
        nullptr
    },
    {"RenderLuxrender",
        (getter) staticCallback_getRenderLuxrender,
        (setter) staticCallback_setRenderLuxrender,
        "UUID for model System:Rendering/RenderLuxrender",
        nullptr
    },
    {"RenderMixed",
        (getter) staticCallback_getRenderMixed,
        (setter) staticCallback_setRenderMixed,
        "UUID for model System:Rendering/RenderMixed",
        nullptr
    },
    {"RenderOspray",
        (getter) staticCallback_getRenderOspray,
        (setter) staticCallback_setRenderOspray,
        "UUID for model System:Rendering/RenderOspray",
        nullptr
    },
    {"RenderPbrt",
        (getter) staticCallback_getRenderPbrt,
        (setter) staticCallback_setRenderPbrt,
        "UUID for model System:Rendering/RenderPbrt",
        nullptr
    },
    {"RenderPovray",
        (getter) staticCallback_getRenderPovray,
        (setter) staticCallback_setRenderPovray,
        "UUID for model System:Rendering/RenderPovray",
        nullptr
    },
    {"RenderSubstancePBR",
        (getter) staticCallback_getRenderSubstancePBR,
        (setter) staticCallback_setRenderSubstancePBR,
        "UUID for model System:Rendering/RenderSubstancePBR",
        nullptr
    },
    {"RenderTexture",
        (getter) staticCallback_getRenderTexture,
        (setter) staticCallback_setRenderTexture,
        "UUID for model System:Rendering/RenderTexture",
        nullptr
    },
    {"RenderWB",
        (getter) staticCallback_getRenderWB,
        (setter) staticCallback_setRenderWB,
        "UUID for model System:Rendering/RenderWB",
        nullptr
    },
    {"TestModel",
        (getter) staticCallback_getTestModel,
        (setter) staticCallback_setTestModel,
        "UUID for model System:Test/Test Model",
        nullptr
    },
    {nullptr, nullptr, nullptr, nullptr, nullptr}		/* Sentinel */
};

// Father() callback and implementer
// PyObject*  UUIDsPy::Father(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getFather (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getFather());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Father' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setFather (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'Father' of object 'ModelUUIDs' is read-only");
    return -1;
}

// MaterialStandard() callback and implementer
// PyObject*  UUIDsPy::MaterialStandard(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getMaterialStandard (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getMaterialStandard());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'MaterialStandard' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setMaterialStandard (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'MaterialStandard' of object 'ModelUUIDs' is read-only");
    return -1;
}

// ArrudaBoyce() callback and implementer
// PyObject*  UUIDsPy::ArrudaBoyce(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getArrudaBoyce (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getArrudaBoyce());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'ArrudaBoyce' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setArrudaBoyce (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'ArrudaBoyce' of object 'ModelUUIDs' is read-only");
    return -1;
}

// Density() callback and implementer
// PyObject*  UUIDsPy::Density(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getDensity (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getDensity());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Density' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setDensity (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'Density' of object 'ModelUUIDs' is read-only");
    return -1;
}

// Hardness() callback and implementer
// PyObject*  UUIDsPy::Hardness(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getHardness (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getHardness());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Hardness' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setHardness (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'Hardness' of object 'ModelUUIDs' is read-only");
    return -1;
}

// IsotropicLinearElastic() callback and implementer
// PyObject*  UUIDsPy::IsotropicLinearElastic(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getIsotropicLinearElastic (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getIsotropicLinearElastic());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'IsotropicLinearElastic' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setIsotropicLinearElastic (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'IsotropicLinearElastic' of object 'ModelUUIDs' is read-only");
    return -1;
}

// LinearElastic() callback and implementer
// PyObject*  UUIDsPy::LinearElastic(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getLinearElastic (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getLinearElastic());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'LinearElastic' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setLinearElastic (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'LinearElastic' of object 'ModelUUIDs' is read-only");
    return -1;
}

// Machinability() callback and implementer
// PyObject*  UUIDsPy::Machinability(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getMachinability (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getMachinability());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Machinability' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setMachinability (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'Machinability' of object 'ModelUUIDs' is read-only");
    return -1;
}

// MooneyRivlin() callback and implementer
// PyObject*  UUIDsPy::MooneyRivlin(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getMooneyRivlin (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getMooneyRivlin());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'MooneyRivlin' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setMooneyRivlin (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'MooneyRivlin' of object 'ModelUUIDs' is read-only");
    return -1;
}

// NeoHooke() callback and implementer
// PyObject*  UUIDsPy::NeoHooke(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getNeoHooke (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getNeoHooke());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'NeoHooke' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setNeoHooke (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'NeoHooke' of object 'ModelUUIDs' is read-only");
    return -1;
}

// OgdenN1() callback and implementer
// PyObject*  UUIDsPy::OgdenN1(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getOgdenN1 (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getOgdenN1());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'OgdenN1' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setOgdenN1 (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'OgdenN1' of object 'ModelUUIDs' is read-only");
    return -1;
}

// OgdenN2() callback and implementer
// PyObject*  UUIDsPy::OgdenN2(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getOgdenN2 (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getOgdenN2());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'OgdenN2' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setOgdenN2 (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'OgdenN2' of object 'ModelUUIDs' is read-only");
    return -1;
}

// OgdenN3() callback and implementer
// PyObject*  UUIDsPy::OgdenN3(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getOgdenN3 (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getOgdenN3());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'OgdenN3' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setOgdenN3 (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'OgdenN3' of object 'ModelUUIDs' is read-only");
    return -1;
}

// OgdenYld2004p18() callback and implementer
// PyObject*  UUIDsPy::OgdenYld2004p18(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getOgdenYld2004p18 (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getOgdenYld2004p18());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'OgdenYld2004p18' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setOgdenYld2004p18 (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'OgdenYld2004p18' of object 'ModelUUIDs' is read-only");
    return -1;
}

// OrthotropicLinearElastic() callback and implementer
// PyObject*  UUIDsPy::OrthotropicLinearElastic(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getOrthotropicLinearElastic (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getOrthotropicLinearElastic());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'OrthotropicLinearElastic' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setOrthotropicLinearElastic (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'OrthotropicLinearElastic' of object 'ModelUUIDs' is read-only");
    return -1;
}

// PolynomialN1() callback and implementer
// PyObject*  UUIDsPy::PolynomialN1(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getPolynomialN1 (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getPolynomialN1());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'PolynomialN1' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setPolynomialN1 (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'PolynomialN1' of object 'ModelUUIDs' is read-only");
    return -1;
}

// PolynomialN2() callback and implementer
// PyObject*  UUIDsPy::PolynomialN2(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getPolynomialN2 (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getPolynomialN2());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'PolynomialN2' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setPolynomialN2 (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'PolynomialN2' of object 'ModelUUIDs' is read-only");
    return -1;
}

// PolynomialN3() callback and implementer
// PyObject*  UUIDsPy::PolynomialN3(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getPolynomialN3 (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getPolynomialN3());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'PolynomialN3' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setPolynomialN3 (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'PolynomialN3' of object 'ModelUUIDs' is read-only");
    return -1;
}

// ReducedPolynomialN1() callback and implementer
// PyObject*  UUIDsPy::ReducedPolynomialN1(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getReducedPolynomialN1 (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getReducedPolynomialN1());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'ReducedPolynomialN1' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setReducedPolynomialN1 (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'ReducedPolynomialN1' of object 'ModelUUIDs' is read-only");
    return -1;
}

// ReducedPolynomialN2() callback and implementer
// PyObject*  UUIDsPy::ReducedPolynomialN2(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getReducedPolynomialN2 (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getReducedPolynomialN2());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'ReducedPolynomialN2' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setReducedPolynomialN2 (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'ReducedPolynomialN2' of object 'ModelUUIDs' is read-only");
    return -1;
}

// ReducedPolynomialN3() callback and implementer
// PyObject*  UUIDsPy::ReducedPolynomialN3(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getReducedPolynomialN3 (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getReducedPolynomialN3());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'ReducedPolynomialN3' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setReducedPolynomialN3 (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'ReducedPolynomialN3' of object 'ModelUUIDs' is read-only");
    return -1;
}

// Yeoh() callback and implementer
// PyObject*  UUIDsPy::Yeoh(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getYeoh (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getYeoh());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Yeoh' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setYeoh (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'Yeoh' of object 'ModelUUIDs' is read-only");
    return -1;
}

// Fluid() callback and implementer
// PyObject*  UUIDsPy::Fluid(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getFluid (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getFluid());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Fluid' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setFluid (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'Fluid' of object 'ModelUUIDs' is read-only");
    return -1;
}

// Thermal() callback and implementer
// PyObject*  UUIDsPy::Thermal(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getThermal (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getThermal());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Thermal' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setThermal (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'Thermal' of object 'ModelUUIDs' is read-only");
    return -1;
}

// Electromagnetic() callback and implementer
// PyObject*  UUIDsPy::Electromagnetic(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getElectromagnetic (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getElectromagnetic());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Electromagnetic' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setElectromagnetic (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'Electromagnetic' of object 'ModelUUIDs' is read-only");
    return -1;
}

// Architectural() callback and implementer
// PyObject*  UUIDsPy::Architectural(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getArchitectural (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getArchitectural());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Architectural' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setArchitectural (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'Architectural' of object 'ModelUUIDs' is read-only");
    return -1;
}

// ArchitecturalRendering() callback and implementer
// PyObject*  UUIDsPy::ArchitecturalRendering(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getArchitecturalRendering (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getArchitecturalRendering());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'ArchitecturalRendering' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setArchitecturalRendering (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'ArchitecturalRendering' of object 'ModelUUIDs' is read-only");
    return -1;
}

// Costs() callback and implementer
// PyObject*  UUIDsPy::Costs(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getCosts (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getCosts());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Costs' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setCosts (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'Costs' of object 'ModelUUIDs' is read-only");
    return -1;
}

// BasicRendering() callback and implementer
// PyObject*  UUIDsPy::BasicRendering(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getBasicRendering (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getBasicRendering());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'BasicRendering' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setBasicRendering (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'BasicRendering' of object 'ModelUUIDs' is read-only");
    return -1;
}

// TextureRendering() callback and implementer
// PyObject*  UUIDsPy::TextureRendering(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getTextureRendering (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getTextureRendering());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'TextureRendering' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setTextureRendering (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'TextureRendering' of object 'ModelUUIDs' is read-only");
    return -1;
}

// AdvancedRendering() callback and implementer
// PyObject*  UUIDsPy::AdvancedRendering(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getAdvancedRendering (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getAdvancedRendering());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'AdvancedRendering' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setAdvancedRendering (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'AdvancedRendering' of object 'ModelUUIDs' is read-only");
    return -1;
}

// VectorRendering() callback and implementer
// PyObject*  UUIDsPy::VectorRendering(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getVectorRendering (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getVectorRendering());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'VectorRendering' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setVectorRendering (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'VectorRendering' of object 'ModelUUIDs' is read-only");
    return -1;
}

// RenderAppleseed() callback and implementer
// PyObject*  UUIDsPy::RenderAppleseed(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getRenderAppleseed (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getRenderAppleseed());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'RenderAppleseed' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setRenderAppleseed (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'RenderAppleseed' of object 'ModelUUIDs' is read-only");
    return -1;
}

// RenderCarpaint() callback and implementer
// PyObject*  UUIDsPy::RenderCarpaint(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getRenderCarpaint (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getRenderCarpaint());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'RenderCarpaint' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setRenderCarpaint (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'RenderCarpaint' of object 'ModelUUIDs' is read-only");
    return -1;
}

// RenderCycles() callback and implementer
// PyObject*  UUIDsPy::RenderCycles(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getRenderCycles (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getRenderCycles());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'RenderCycles' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setRenderCycles (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'RenderCycles' of object 'ModelUUIDs' is read-only");
    return -1;
}

// RenderDiffuse() callback and implementer
// PyObject*  UUIDsPy::RenderDiffuse(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getRenderDiffuse (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getRenderDiffuse());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'RenderDiffuse' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setRenderDiffuse (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'RenderDiffuse' of object 'ModelUUIDs' is read-only");
    return -1;
}

// RenderDisney() callback and implementer
// PyObject*  UUIDsPy::RenderDisney(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getRenderDisney (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getRenderDisney());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'RenderDisney' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setRenderDisney (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'RenderDisney' of object 'ModelUUIDs' is read-only");
    return -1;
}

// RenderEmission() callback and implementer
// PyObject*  UUIDsPy::RenderEmission(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getRenderEmission (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getRenderEmission());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'RenderEmission' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setRenderEmission (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'RenderEmission' of object 'ModelUUIDs' is read-only");
    return -1;
}

// RenderGlass() callback and implementer
// PyObject*  UUIDsPy::RenderGlass(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getRenderGlass (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getRenderGlass());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'RenderGlass' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setRenderGlass (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'RenderGlass' of object 'ModelUUIDs' is read-only");
    return -1;
}

// RenderLuxcore() callback and implementer
// PyObject*  UUIDsPy::RenderLuxcore(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getRenderLuxcore (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getRenderLuxcore());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'RenderLuxcore' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setRenderLuxcore (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'RenderLuxcore' of object 'ModelUUIDs' is read-only");
    return -1;
}

// RenderLuxrender() callback and implementer
// PyObject*  UUIDsPy::RenderLuxrender(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getRenderLuxrender (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getRenderLuxrender());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'RenderLuxrender' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setRenderLuxrender (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'RenderLuxrender' of object 'ModelUUIDs' is read-only");
    return -1;
}

// RenderMixed() callback and implementer
// PyObject*  UUIDsPy::RenderMixed(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getRenderMixed (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getRenderMixed());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'RenderMixed' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setRenderMixed (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'RenderMixed' of object 'ModelUUIDs' is read-only");
    return -1;
}

// RenderOspray() callback and implementer
// PyObject*  UUIDsPy::RenderOspray(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getRenderOspray (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getRenderOspray());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'RenderOspray' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setRenderOspray (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'RenderOspray' of object 'ModelUUIDs' is read-only");
    return -1;
}

// RenderPbrt() callback and implementer
// PyObject*  UUIDsPy::RenderPbrt(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getRenderPbrt (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getRenderPbrt());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'RenderPbrt' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setRenderPbrt (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'RenderPbrt' of object 'ModelUUIDs' is read-only");
    return -1;
}

// RenderPovray() callback and implementer
// PyObject*  UUIDsPy::RenderPovray(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getRenderPovray (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getRenderPovray());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'RenderPovray' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setRenderPovray (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'RenderPovray' of object 'ModelUUIDs' is read-only");
    return -1;
}

// RenderSubstancePBR() callback and implementer
// PyObject*  UUIDsPy::RenderSubstancePBR(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getRenderSubstancePBR (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getRenderSubstancePBR());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'RenderSubstancePBR' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setRenderSubstancePBR (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'RenderSubstancePBR' of object 'ModelUUIDs' is read-only");
    return -1;
}

// RenderTexture() callback and implementer
// PyObject*  UUIDsPy::RenderTexture(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getRenderTexture (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getRenderTexture());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'RenderTexture' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setRenderTexture (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'RenderTexture' of object 'ModelUUIDs' is read-only");
    return -1;
}

// RenderWB() callback and implementer
// PyObject*  UUIDsPy::RenderWB(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getRenderWB (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getRenderWB());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'RenderWB' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setRenderWB (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'RenderWB' of object 'ModelUUIDs' is read-only");
    return -1;
}

// TestModel() callback and implementer
// PyObject*  UUIDsPy::TestModel(PyObject *args){};
// has to be implemented in UUIDsPyImp.cpp
PyObject * UUIDsPy::staticCallback_getTestModel (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<UUIDsPy*>(self)->getTestModel());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'TestModel' of object 'ModelUUIDs'");
        return nullptr;
    }
}

int UUIDsPy::staticCallback_setTestModel (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'TestModel' of object 'ModelUUIDs' is read-only");
    return -1;
}




//--------------------------------------------------------------------------
// Constructor
//--------------------------------------------------------------------------
UUIDsPy::UUIDsPy(ModelUUIDs *pcObject, PyTypeObject *T)
    : BaseClassPy(static_cast<BaseClassPy::PointerType>(pcObject), T)
{
}


//--------------------------------------------------------------------------
// destructor
//--------------------------------------------------------------------------
UUIDsPy::~UUIDsPy()                                // Everything handled in parent
{
    // delete the handled object when the PyObject dies
    UUIDsPy::PointerType ptr = static_cast<UUIDsPy::PointerType>(_pcTwinPointer);
    delete ptr;
}

//--------------------------------------------------------------------------
// UUIDsPy representation
//--------------------------------------------------------------------------
PyObject *UUIDsPy::_repr()
{
    return Py_BuildValue("s", representation().c_str());
}

//--------------------------------------------------------------------------
// UUIDsPy Attributes
//--------------------------------------------------------------------------
PyObject *UUIDsPy::_getattr(const char *attr)			// __getattr__ function: note only need to handle new state
{
    try {
        // getter method for special Attributes (e.g. dynamic ones)
        PyObject *r = getCustomAttributes(attr);
        if(r) return r;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError,"Unknown C++ exception");
        return nullptr;
    }
#endif

    PyMethodDef *ml = Methods;
    for (; ml->ml_name != nullptr; ml++) {
        if (attr[0] == ml->ml_name[0] &&
            strcmp(attr+1, ml->ml_name+1) == 0)
            return PyCFunction_New(ml, this);
    }

    PyErr_Clear();
    return BaseClassPy::_getattr(attr);
}

int UUIDsPy::_setattr(const char *attr, PyObject *value) // __setattr__ function: note only need to handle new state
{
    try {
        // setter for special Attributes (e.g. dynamic ones)
        int r = setCustomAttributes(attr, value);
        // r = 1: handled
        // r = -1: error
        // r = 0: ignore
        if (r == 1)
            return 0;
        else if (r == -1)
            return -1;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return -1;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return -1;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return -1;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return -1;
    }
#endif

    return BaseClassPy::_setattr(attr, value);
}

ModelUUIDs *UUIDsPy::getModelUUIDsPtr() const
{
    return static_cast<ModelUUIDs *>(_pcTwinPointer);
}

#if defined(__clang__)
# pragma clang diagnostic pop
#endif

#if 0
/* From here on come the methods you have to implement, but NOT in this module. Implement in UUIDsPyImp.cpp! This prototypes
 * are just for convenience when you add a new method.
 */

PyObject *UUIDsPy::PyMake(PyTypeObject* /*type*/, PyObject* /*args*/, PyObject* /*kwds*/)
{
    // create a new instance of UUIDsPy and the Twin object
    return new UUIDsPy(new ModelUUIDs);
}

// constructor method
int UUIDsPy::PyInit(PyObject* /*args*/, PyObject* /*kwd*/)
{
    return 0;
}


// returns a string which represents the object e.g. when printed in python
std::string UUIDsPy::representation() const
{
    return {"<ModelUUIDs object>"};
}



Py::String UUIDsPy::getFather() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getMaterialStandard() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getArrudaBoyce() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getDensity() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getHardness() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getIsotropicLinearElastic() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getLinearElastic() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getMachinability() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getMooneyRivlin() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getNeoHooke() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getOgdenN1() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getOgdenN2() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getOgdenN3() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getOgdenYld2004p18() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getOrthotropicLinearElastic() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getPolynomialN1() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getPolynomialN2() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getPolynomialN3() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getReducedPolynomialN1() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getReducedPolynomialN2() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getReducedPolynomialN3() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getYeoh() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getFluid() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getThermal() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getElectromagnetic() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getArchitectural() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getArchitecturalRendering() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getCosts() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getBasicRendering() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getTextureRendering() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getAdvancedRendering() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getVectorRendering() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getRenderAppleseed() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getRenderCarpaint() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getRenderCycles() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getRenderDiffuse() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getRenderDisney() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getRenderEmission() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getRenderGlass() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getRenderLuxcore() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getRenderLuxrender() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getRenderMixed() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getRenderOspray() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getRenderPbrt() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getRenderPovray() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getRenderSubstancePBR() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getRenderTexture() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getRenderWB() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String UUIDsPy::getTestModel() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

PyObject *UUIDsPy::getCustomAttributes(const char* /*attr*/) const
{
    return nullptr;
}

int UUIDsPy::setCustomAttributes(const char* /*attr*/, PyObject* /*obj*/)
{
    return 0;
}


#endif



