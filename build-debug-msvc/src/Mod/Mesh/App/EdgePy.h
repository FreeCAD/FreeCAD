
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the XML file
// Every change you make here gets lost in the next full rebuild!
#ifndef MESH_EDGEPY_H
#define MESH_EDGEPY_H

#include <Base/PyObjectBase.h>
#include <Mod/Mesh/App/Edge.h>
#include <string>


namespace Mesh
{

//===========================================================================
// EdgePy - Python wrapper
//===========================================================================

/** The python export class for Edge
 */
class MeshExport EdgePy : public Base::PyObjectBase
{
protected:
    ~EdgePy() override;

public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyGetSetDef    GetterSetter[];
    PyTypeObject *GetType() override {return &Type;}

public:
    EdgePy(Edge *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(PyTypeObject *, PyObject *, PyObject *);
    int PyInit(PyObject* args, PyObject*k) override;


    using PointerType = Edge*;

    PyObject *_repr() override;        // the representation
    std::string representation() const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    /// callback for the intersectWithEdge() method
    static PyObject * staticCallback_intersectWithEdge (PyObject *self, PyObject *args);
    /// implementer for the intersectWithEdge() method
    PyObject*  intersectWithEdge(PyObject *args);
    /// callback for the isParallel() method
    static PyObject * staticCallback_isParallel (PyObject *self, PyObject *args);
    /// implementer for the isParallel() method
    PyObject*  isParallel(PyObject *args);
    /// callback for the isCollinear() method
    static PyObject * staticCallback_isCollinear (PyObject *self, PyObject *args);
    /// implementer for the isCollinear() method
    PyObject*  isCollinear(PyObject *args);
    /// callback for the unbound() method
    static PyObject * staticCallback_unbound (PyObject *self, PyObject *args);
    /// implementer for the unbound() method
    PyObject*  unbound(PyObject *args);
    //@}


    /** @name callbacks and implementers for the python object attributes */
    //@{
    ///getter callback for the Index attribute
    static PyObject * staticCallback_getIndex (PyObject *self, void *closure);
    /// getter for the Index attribute
    Py::Long getIndex() const;
    /// setter callback for the Index attribute
    static int staticCallback_setIndex (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Index is read only!
    ///getter callback for the Points attribute
    static PyObject * staticCallback_getPoints (PyObject *self, void *closure);
    /// getter for the Points attribute
    Py::List getPoints() const;
    /// setter callback for the Points attribute
    static int staticCallback_setPoints (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Points is read only!
    ///getter callback for the PointIndices attribute
    static PyObject * staticCallback_getPointIndices (PyObject *self, void *closure);
    /// getter for the PointIndices attribute
    Py::Tuple getPointIndices() const;
    /// setter callback for the PointIndices attribute
    static int staticCallback_setPointIndices (PyObject *self, PyObject *value, void *closure);
    // no setter method,  PointIndices is read only!
    ///getter callback for the NeighbourIndices attribute
    static PyObject * staticCallback_getNeighbourIndices (PyObject *self, void *closure);
    /// getter for the NeighbourIndices attribute
    Py::Tuple getNeighbourIndices() const;
    /// setter callback for the NeighbourIndices attribute
    static int staticCallback_setNeighbourIndices (PyObject *self, PyObject *value, void *closure);
    // no setter method,  NeighbourIndices is read only!
    ///getter callback for the Length attribute
    static PyObject * staticCallback_getLength (PyObject *self, void *closure);
    /// getter for the Length attribute
    Py::Float getLength() const;
    /// setter callback for the Length attribute
    static int staticCallback_setLength (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Length is read only!
    ///getter callback for the Bound attribute
    static PyObject * staticCallback_getBound (PyObject *self, void *closure);
    /// getter for the Bound attribute
    Py::Boolean getBound() const;
    /// setter callback for the Bound attribute
    static int staticCallback_setBound (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Bound is read only!
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(const char *attr) override;              // __getattr__ function
    int _setattr(const char *attr, PyObject *value) override;   // __setattr__ function

    /// getter for the object handled by this class
    Edge *getEdgePtr() const;

};

}  //namespace Mesh

#endif  // MESH_EDGEPY_H


