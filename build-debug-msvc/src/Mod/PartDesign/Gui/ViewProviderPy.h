
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the XML file
// Every change you make here gets lost in the next full rebuild!
#ifndef PARTDESIGNGUI_VIEWPROVIDERPY_H
#define PARTDESIGNGUI_VIEWPROVIDERPY_H

#include <Mod/Part/Gui/ViewProviderPartExtPy.h>
#include <Mod/PartDesign/Gui/ViewProvider.h>
#include <string>


namespace PartDesignGui
{

//===========================================================================
// ViewProviderPy - Python wrapper
//===========================================================================

/** The python export class for ViewProvider
 */
class PartDesignGuiExport ViewProviderPy : public PartGui::ViewProviderPartExtPy
{
protected:
    ~ViewProviderPy() override;

public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyGetSetDef    GetterSetter[];
    PyTypeObject *GetType() override {return &Type;}

public:
    ViewProviderPy(ViewProvider *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(PyTypeObject *, PyObject *, PyObject *);
    int PyInit(PyObject* args, PyObject*k) override;


    using PointerType = ViewProvider*;

    PyObject *_repr() override;        // the representation
    std::string representation() const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    /// callback for the setBodyMode() method
    static PyObject * staticCallback_setBodyMode (PyObject *self, PyObject *args);
    /// implementer for the setBodyMode() method
    PyObject*  setBodyMode(PyObject *args);
    /// callback for the makeTemporaryVisible() method
    static PyObject * staticCallback_makeTemporaryVisible (PyObject *self, PyObject *args);
    /// implementer for the makeTemporaryVisible() method
    PyObject*  makeTemporaryVisible(PyObject *args);
    //@}


    /** @name callbacks and implementers for the python object attributes */
    //@{
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(const char *attr) override;              // __getattr__ function
    int _setattr(const char *attr, PyObject *value) override;   // __setattr__ function

    /// getter for the object handled by this class
    ViewProvider *getViewProviderPtr() const;

};

}  //namespace PartDesignGui

#endif  // PARTDESIGNGUI_VIEWPROVIDERPY_H


