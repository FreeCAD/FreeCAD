
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the XML file
// Every change you make here gets lost in the next full rebuild!
#ifndef FEMGUI_VIEWPROVIDERFEMMESHPY_H
#define FEMGUI_VIEWPROVIDERFEMMESHPY_H

#include <Gui/ViewProviderGeometryObjectPy.h>
#include <Mod/Fem/Gui/ViewProviderFemMesh.h>
#include <string>


namespace FemGui
{

//===========================================================================
// ViewProviderFemMeshPy - Python wrapper
//===========================================================================

/** The python export class for ViewProviderFemMesh
 */
class FemGuiExport ViewProviderFemMeshPy : public Gui::ViewProviderGeometryObjectPy
{
protected:
    ~ViewProviderFemMeshPy() override;

public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyGetSetDef    GetterSetter[];
    PyTypeObject *GetType() override {return &Type;}

public:
    ViewProviderFemMeshPy(ViewProviderFemMesh *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(PyTypeObject *, PyObject *, PyObject *);
    int PyInit(PyObject* args, PyObject*k) override;


    using PointerType = ViewProviderFemMesh*;

    PyObject *_repr() override;        // the representation
    std::string representation() const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    /// callback for the applyDisplacement() method
    static PyObject * staticCallback_applyDisplacement (PyObject *self, PyObject *args);
    /// implementer for the applyDisplacement() method
    PyObject*  applyDisplacement(PyObject *args);
    /// callback for the resetNodeColor() method
    static PyObject * staticCallback_resetNodeColor (PyObject *self, PyObject *args);
    /// implementer for the resetNodeColor() method
    PyObject*  resetNodeColor(PyObject *args);
    /// callback for the resetNodeDisplacement() method
    static PyObject * staticCallback_resetNodeDisplacement (PyObject *self, PyObject *args);
    /// implementer for the resetNodeDisplacement() method
    PyObject*  resetNodeDisplacement(PyObject *args);
    /// callback for the resetHighlightedNodes() method
    static PyObject * staticCallback_resetHighlightedNodes (PyObject *self, PyObject *args);
    /// implementer for the resetHighlightedNodes() method
    PyObject*  resetHighlightedNodes(PyObject *args);
    /// callback for the setNodeColorByScalars() method
    static PyObject * staticCallback_setNodeColorByScalars (PyObject *self, PyObject *args);
    /// implementer for the setNodeColorByScalars() method
    PyObject*  setNodeColorByScalars(PyObject *args);
    /// callback for the setNodeDisplacementByVectors() method
    static PyObject * staticCallback_setNodeDisplacementByVectors (PyObject *self, PyObject *args);
    /// implementer for the setNodeDisplacementByVectors() method
    PyObject*  setNodeDisplacementByVectors(PyObject *args);
    //@}


    /** @name callbacks and implementers for the python object attributes */
    //@{
    ///getter callback for the NodeColor attribute
    static PyObject * staticCallback_getNodeColor (PyObject *self, void *closure);
    /// getter for the NodeColor attribute
    Py::Dict getNodeColor() const;
    /// setter callback for the NodeColor attribute
    static int staticCallback_setNodeColor (PyObject *self, PyObject *value, void *closure);
    /// setter for the NodeColor attribute
    void setNodeColor(Py::Dict arg);
    ///getter callback for the ElementColor attribute
    static PyObject * staticCallback_getElementColor (PyObject *self, void *closure);
    /// getter for the ElementColor attribute
    Py::Dict getElementColor() const;
    /// setter callback for the ElementColor attribute
    static int staticCallback_setElementColor (PyObject *self, PyObject *value, void *closure);
    /// setter for the ElementColor attribute
    void setElementColor(Py::Dict arg);
    ///getter callback for the NodeDisplacement attribute
    static PyObject * staticCallback_getNodeDisplacement (PyObject *self, void *closure);
    /// getter for the NodeDisplacement attribute
    Py::Dict getNodeDisplacement() const;
    /// setter callback for the NodeDisplacement attribute
    static int staticCallback_setNodeDisplacement (PyObject *self, PyObject *value, void *closure);
    /// setter for the NodeDisplacement attribute
    void setNodeDisplacement(Py::Dict arg);
    ///getter callback for the HighlightedNodes attribute
    static PyObject * staticCallback_getHighlightedNodes (PyObject *self, void *closure);
    /// getter for the HighlightedNodes attribute
    Py::List getHighlightedNodes() const;
    /// setter callback for the HighlightedNodes attribute
    static int staticCallback_setHighlightedNodes (PyObject *self, PyObject *value, void *closure);
    /// setter for the HighlightedNodes attribute
    void setHighlightedNodes(Py::List arg);
    ///getter callback for the VisibleElementFaces attribute
    static PyObject * staticCallback_getVisibleElementFaces (PyObject *self, void *closure);
    /// getter for the VisibleElementFaces attribute
    Py::List getVisibleElementFaces() const;
    /// setter callback for the VisibleElementFaces attribute
    static int staticCallback_setVisibleElementFaces (PyObject *self, PyObject *value, void *closure);
    // no setter method,  VisibleElementFaces is read only!
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(const char *attr) override;              // __getattr__ function
    int _setattr(const char *attr, PyObject *value) override;   // __setattr__ function

    /// getter for the object handled by this class
    ViewProviderFemMesh *getViewProviderFemMeshPtr() const;

};

}  //namespace FemGui

#endif  // FEMGUI_VIEWPROVIDERFEMMESHPY_H


