
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the .XML file
// Every change you make here gets lost in the next full rebuild!
// This File is normally built as an include in CenterLinePyImp.cpp! It's not intended to be in a project!

#include <boost/filesystem/path.hpp>
#include <boost/filesystem/operations.hpp>
#include <boost/filesystem/exception.hpp>
#include <Base/PyObjectBase.h>
#include <Base/Console.h>
#include <Base/Exception.h>
#include <CXX/Objects.hxx>

#if defined(__clang__)
# pragma clang diagnostic push
# pragma clang diagnostic ignored "-Wdeprecated-declarations"
#endif

using Base::streq;
using namespace TechDraw;

/// Type structure of CenterLinePy
PyTypeObject CenterLinePy::Type = {
    PyVarObject_HEAD_INIT(&PyType_Type,0)
    "TechDraw.CenterLine",     /*tp_name*/
    sizeof(CenterLinePy),                       /*tp_basicsize*/
    0,                                                /*tp_itemsize*/
    /* methods */
    PyDestructor,                                     /*tp_dealloc*/
#if PY_VERSION_HEX >= 0x03080000
    0,                                                /*tp_vectorcall_offset*/
#else
    nullptr,                                          /*tp_print*/
#endif
    nullptr,                                          /*tp_getattr*/
    nullptr,                                          /*tp_setattr*/
    nullptr,                                          /*tp_compare*/
    __repr,                                           /*tp_repr*/
    nullptr,                                          /*tp_as_number*/
    nullptr,                                          /*tp_as_sequence*/
    nullptr,                                          /*tp_as_mapping*/
    nullptr,                                          /*tp_hash*/
    nullptr,                                          /*tp_call */
    nullptr,                                          /*tp_str  */
    __getattro,                                       /*tp_getattro*/
    __setattro,                                       /*tp_setattro*/
    /* --- Functions to access object as input/output buffer ---------*/
    nullptr,                                          /* tp_as_buffer */
    /* --- Flags to define presence of optional/expanded features */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT,        /*tp_flags */
    "CenterLine specifies additional mark up edges in a View",           /*tp_doc */
    nullptr,                                          /*tp_traverse */
    nullptr,                                          /*tp_clear */
    nullptr,                                          /*tp_richcompare */
    0,                                                /*tp_weaklistoffset */
    nullptr,                                          /*tp_iter */
    nullptr,                                          /*tp_iternext */
    TechDraw::CenterLinePy::Methods,                     /*tp_methods */
    nullptr,                                          /*tp_members */
    TechDraw::CenterLinePy::GetterSetter,                     /*tp_getset */
    &Base::PyObjectBase::Type,                        /*tp_base */
    nullptr,                                          /*tp_dict */
    nullptr,                                          /*tp_descr_get */
    nullptr,                                          /*tp_descr_set */
    0,                                                /*tp_dictoffset */
    __PyInit,                                         /*tp_init */
    nullptr,                                          /*tp_alloc */
    TechDraw::CenterLinePy::PyMake,/*tp_new */
    nullptr,                                          /*tp_free   Low-level free-memory routine */
    nullptr,                                          /*tp_is_gc  For PyObject_IS_GC */
    nullptr,                                          /*tp_bases */
    nullptr,                                          /*tp_mro    method resolution order */
    nullptr,                                          /*tp_cache */
    nullptr,                                          /*tp_subclasses */
    nullptr,                                          /*tp_weaklist */
    nullptr,                                          /*tp_del */
    0,                                                /*tp_version_tag */
    nullptr                                           /*tp_finalize */
#if PY_VERSION_HEX >= 0x03090000
    ,nullptr                                          /*tp_vectorcall */
#if PY_VERSION_HEX >= 0x030c0000
    ,0                                                /*tp_watched */
#endif
#elif PY_VERSION_HEX >= 0x03080000
    ,nullptr                                          /*tp_vectorcall */
    /* bpo-37250: kept for backwards compatibility in CPython 3.8 only */
    ,nullptr                                          /*tp_print */
#endif
};

/// Methods structure of CenterLinePy
PyMethodDef CenterLinePy::Methods[] = {
    {"clone",
        reinterpret_cast<PyCFunction>( staticCallback_clone ),
        METH_VARARGS,
        "Create a clone of this centerline"
    },
    {"copy",
        reinterpret_cast<PyCFunction>( staticCallback_copy ),
        METH_VARARGS,
        "Create a copy of this centerline"
    },
    {nullptr, nullptr, 0, nullptr}		/* Sentinel */
};



/// Attribute structure of CenterLinePy
PyGetSetDef CenterLinePy::GetterSetter[] = {
    {"Tag",
        (getter) staticCallback_getTag,
        (setter) staticCallback_setTag,
        "Gives the tag of the CenterLine as string.",
        nullptr
    },
    {"Type",
        (getter) staticCallback_getType,
        (setter) staticCallback_setType,
        "0 - face, 1 - 2 line, 2 - 2 point.",
        nullptr
    },
    {"Mode",
        (getter) staticCallback_getMode,
        (setter) staticCallback_setMode,
        "0 - vert/ 1 - horiz/ 2 - aligned.",
        nullptr
    },
    {"Format",
        (getter) staticCallback_getFormat,
        (setter) staticCallback_setFormat,
        "The appearance attributes (style, color, weight, visible) for this CenterLine.",
        nullptr
    },
    {"HorizShift",
        (getter) staticCallback_getHorizShift,
        (setter) staticCallback_setHorizShift,
        "The left/right offset for this CenterLine.",
        nullptr
    },
    {"VertShift",
        (getter) staticCallback_getVertShift,
        (setter) staticCallback_setVertShift,
        "The up/down offset for this CenterLine.",
        nullptr
    },
    {"Rotation",
        (getter) staticCallback_getRotation,
        (setter) staticCallback_setRotation,
        "The rotation of the Centerline in degrees.",
        nullptr
    },
    {"Extension",
        (getter) staticCallback_getExtension,
        (setter) staticCallback_setExtension,
        "The additional length to be added to this CenterLine.",
        nullptr
    },
    {"Flip",
        (getter) staticCallback_getFlip,
        (setter) staticCallback_setFlip,
        "Reverse the order of points for 2 point CenterLine.",
        nullptr
    },
    {"Edges",
        (getter) staticCallback_getEdges,
        (setter) staticCallback_setEdges,
        "The names of source edges for this CenterLine.",
        nullptr
    },
    {"Faces",
        (getter) staticCallback_getFaces,
        (setter) staticCallback_setFaces,
        "The names of source Faces for this CenterLine.",
        nullptr
    },
    {"Points",
        (getter) staticCallback_getPoints,
        (setter) staticCallback_setPoints,
        "The names of source Points for this CenterLine.",
        nullptr
    },
    {nullptr, nullptr, nullptr, nullptr, nullptr}		/* Sentinel */
};

// clone() callback and implementer
// PyObject*  CenterLinePy::clone(PyObject *args){};
// has to be implemented in CenterLinePyImp.cpp
PyObject * CenterLinePy::staticCallback_clone (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'clone' of 'TechDraw.CenterLine' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }


    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<CenterLinePy*>(self)->clone(args);
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// copy() callback and implementer
// PyObject*  CenterLinePy::copy(PyObject *args){};
// has to be implemented in CenterLinePyImp.cpp
PyObject * CenterLinePy::staticCallback_copy (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'copy' of 'TechDraw.CenterLine' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }


    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<CenterLinePy*>(self)->copy(args);
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// Tag() callback and implementer
// PyObject*  CenterLinePy::Tag(PyObject *args){};
// has to be implemented in CenterLinePyImp.cpp
PyObject * CenterLinePy::staticCallback_getTag (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<CenterLinePy*>(self)->getTag());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Tag' of object 'CenterLine'");
        return nullptr;
    }
}

int CenterLinePy::staticCallback_setTag (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'Tag' of object 'CenterLine' is read-only");
    return -1;
}

// Type() callback and implementer
// PyObject*  CenterLinePy::Type(PyObject *args){};
// has to be implemented in CenterLinePyImp.cpp
PyObject * CenterLinePy::staticCallback_getType (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<CenterLinePy*>(self)->getType());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Type' of object 'CenterLine'");
        return nullptr;
    }
}

int CenterLinePy::staticCallback_setType (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'Type' of object 'CenterLine' is read-only");
    return -1;
}

// Mode() callback and implementer
// PyObject*  CenterLinePy::Mode(PyObject *args){};
// has to be implemented in CenterLinePyImp.cpp
PyObject * CenterLinePy::staticCallback_getMode (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<CenterLinePy*>(self)->getMode());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Mode' of object 'CenterLine'");
        return nullptr;
    }
}

int CenterLinePy::staticCallback_setMode (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<CenterLinePy*>(self)->setMode(Py::Long(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'Mode' of object 'CenterLine'");
        return -1;
    }
}

// Format() callback and implementer
// PyObject*  CenterLinePy::Format(PyObject *args){};
// has to be implemented in CenterLinePyImp.cpp
PyObject * CenterLinePy::staticCallback_getFormat (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<CenterLinePy*>(self)->getFormat());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Format' of object 'CenterLine'");
        return nullptr;
    }
}

int CenterLinePy::staticCallback_setFormat (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<CenterLinePy*>(self)->setFormat(Py::Dict(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'Format' of object 'CenterLine'");
        return -1;
    }
}

// HorizShift() callback and implementer
// PyObject*  CenterLinePy::HorizShift(PyObject *args){};
// has to be implemented in CenterLinePyImp.cpp
PyObject * CenterLinePy::staticCallback_getHorizShift (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<CenterLinePy*>(self)->getHorizShift());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'HorizShift' of object 'CenterLine'");
        return nullptr;
    }
}

int CenterLinePy::staticCallback_setHorizShift (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<CenterLinePy*>(self)->setHorizShift(Py::Float(PyNumber_Float(value),true));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'HorizShift' of object 'CenterLine'");
        return -1;
    }
}

// VertShift() callback and implementer
// PyObject*  CenterLinePy::VertShift(PyObject *args){};
// has to be implemented in CenterLinePyImp.cpp
PyObject * CenterLinePy::staticCallback_getVertShift (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<CenterLinePy*>(self)->getVertShift());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'VertShift' of object 'CenterLine'");
        return nullptr;
    }
}

int CenterLinePy::staticCallback_setVertShift (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<CenterLinePy*>(self)->setVertShift(Py::Float(PyNumber_Float(value),true));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'VertShift' of object 'CenterLine'");
        return -1;
    }
}

// Rotation() callback and implementer
// PyObject*  CenterLinePy::Rotation(PyObject *args){};
// has to be implemented in CenterLinePyImp.cpp
PyObject * CenterLinePy::staticCallback_getRotation (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<CenterLinePy*>(self)->getRotation());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Rotation' of object 'CenterLine'");
        return nullptr;
    }
}

int CenterLinePy::staticCallback_setRotation (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<CenterLinePy*>(self)->setRotation(Py::Float(PyNumber_Float(value),true));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'Rotation' of object 'CenterLine'");
        return -1;
    }
}

// Extension() callback and implementer
// PyObject*  CenterLinePy::Extension(PyObject *args){};
// has to be implemented in CenterLinePyImp.cpp
PyObject * CenterLinePy::staticCallback_getExtension (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<CenterLinePy*>(self)->getExtension());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Extension' of object 'CenterLine'");
        return nullptr;
    }
}

int CenterLinePy::staticCallback_setExtension (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<CenterLinePy*>(self)->setExtension(Py::Float(PyNumber_Float(value),true));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'Extension' of object 'CenterLine'");
        return -1;
    }
}

// Flip() callback and implementer
// PyObject*  CenterLinePy::Flip(PyObject *args){};
// has to be implemented in CenterLinePyImp.cpp
PyObject * CenterLinePy::staticCallback_getFlip (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<CenterLinePy*>(self)->getFlip());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Flip' of object 'CenterLine'");
        return nullptr;
    }
}

int CenterLinePy::staticCallback_setFlip (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<CenterLinePy*>(self)->setFlip(Py::Boolean(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'Flip' of object 'CenterLine'");
        return -1;
    }
}

// Edges() callback and implementer
// PyObject*  CenterLinePy::Edges(PyObject *args){};
// has to be implemented in CenterLinePyImp.cpp
PyObject * CenterLinePy::staticCallback_getEdges (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<CenterLinePy*>(self)->getEdges());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Edges' of object 'CenterLine'");
        return nullptr;
    }
}

int CenterLinePy::staticCallback_setEdges (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<CenterLinePy*>(self)->setEdges(Py::List(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'Edges' of object 'CenterLine'");
        return -1;
    }
}

// Faces() callback and implementer
// PyObject*  CenterLinePy::Faces(PyObject *args){};
// has to be implemented in CenterLinePyImp.cpp
PyObject * CenterLinePy::staticCallback_getFaces (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<CenterLinePy*>(self)->getFaces());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Faces' of object 'CenterLine'");
        return nullptr;
    }
}

int CenterLinePy::staticCallback_setFaces (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<CenterLinePy*>(self)->setFaces(Py::List(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'Faces' of object 'CenterLine'");
        return -1;
    }
}

// Points() callback and implementer
// PyObject*  CenterLinePy::Points(PyObject *args){};
// has to be implemented in CenterLinePyImp.cpp
PyObject * CenterLinePy::staticCallback_getPoints (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<CenterLinePy*>(self)->getPoints());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Points' of object 'CenterLine'");
        return nullptr;
    }
}

int CenterLinePy::staticCallback_setPoints (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<CenterLinePy*>(self)->setPoints(Py::List(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'Points' of object 'CenterLine'");
        return -1;
    }
}




//--------------------------------------------------------------------------
// Constructor
//--------------------------------------------------------------------------
CenterLinePy::CenterLinePy(CenterLine *pcObject, PyTypeObject *T)
    : PyObjectBase(static_cast<PyObjectBase::PointerType>(pcObject), T)
{
}


//--------------------------------------------------------------------------
// destructor
//--------------------------------------------------------------------------
CenterLinePy::~CenterLinePy()                                // Everything handled in parent
{
    // delete the handled object when the PyObject dies
    CenterLinePy::PointerType ptr = static_cast<CenterLinePy::PointerType>(_pcTwinPointer);
    delete ptr;
}

//--------------------------------------------------------------------------
// CenterLinePy representation
//--------------------------------------------------------------------------
PyObject *CenterLinePy::_repr()
{
    return Py_BuildValue("s", representation().c_str());
}

//--------------------------------------------------------------------------
// CenterLinePy Attributes
//--------------------------------------------------------------------------
PyObject *CenterLinePy::_getattr(const char *attr)			// __getattr__ function: note only need to handle new state
{
    try {
        // getter method for special Attributes (e.g. dynamic ones)
        PyObject *r = getCustomAttributes(attr);
        if(r) return r;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError,"Unknown C++ exception");
        return nullptr;
    }
#endif

    PyMethodDef *ml = Methods;
    for (; ml->ml_name != nullptr; ml++) {
        if (attr[0] == ml->ml_name[0] &&
            strcmp(attr+1, ml->ml_name+1) == 0)
            return PyCFunction_New(ml, this);
    }

    PyErr_Clear();
    return PyObjectBase::_getattr(attr);
}

int CenterLinePy::_setattr(const char *attr, PyObject *value) // __setattr__ function: note only need to handle new state
{
    try {
        // setter for special Attributes (e.g. dynamic ones)
        int r = setCustomAttributes(attr, value);
        // r = 1: handled
        // r = -1: error
        // r = 0: ignore
        if (r == 1)
            return 0;
        else if (r == -1)
            return -1;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return -1;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return -1;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return -1;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return -1;
    }
#endif

    return PyObjectBase::_setattr(attr, value);
}

CenterLine *CenterLinePy::getCenterLinePtr() const
{
    return static_cast<CenterLine *>(_pcTwinPointer);
}

#if defined(__clang__)
# pragma clang diagnostic pop
#endif

#if 0
/* From here on come the methods you have to implement, but NOT in this module. Implement in CenterLinePyImp.cpp! This prototypes
 * are just for convenience when you add a new method.
 */

PyObject *CenterLinePy::PyMake(PyTypeObject* /*type*/, PyObject* /*args*/, PyObject* /*kwds*/)
{
    // create a new instance of CenterLinePy and the Twin object
    return new CenterLinePy(new CenterLine);
}

// constructor method
int CenterLinePy::PyInit(PyObject* /*args*/, PyObject* /*kwd*/)
{
    return 0;
}


// returns a string which represents the object e.g. when printed in python
std::string CenterLinePy::representation() const
{
    return {"<CenterLine object>"};
}

PyObject* CenterLinePy::clone(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* CenterLinePy::copy(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}



Py::String CenterLinePy::getTag() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::Long CenterLinePy::getType() const
{
    //return Py::Long();
    throw Py::AttributeError("Not yet implemented");
}

Py::Long CenterLinePy::getMode() const
{
    //return Py::Long();
    throw Py::AttributeError("Not yet implemented");
}

void  CenterLinePy::setMode(Py::Long arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Dict CenterLinePy::getFormat() const
{
    //return Py::Dict();
    throw Py::AttributeError("Not yet implemented");
}

void  CenterLinePy::setFormat(Py::Dict arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Float CenterLinePy::getHorizShift() const
{
    //return Py::Float();
    throw Py::AttributeError("Not yet implemented");
}

void  CenterLinePy::setHorizShift(Py::Float arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Float CenterLinePy::getVertShift() const
{
    //return Py::Float();
    throw Py::AttributeError("Not yet implemented");
}

void  CenterLinePy::setVertShift(Py::Float arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Float CenterLinePy::getRotation() const
{
    //return Py::Float();
    throw Py::AttributeError("Not yet implemented");
}

void  CenterLinePy::setRotation(Py::Float arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Float CenterLinePy::getExtension() const
{
    //return Py::Float();
    throw Py::AttributeError("Not yet implemented");
}

void  CenterLinePy::setExtension(Py::Float arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Boolean CenterLinePy::getFlip() const
{
    //return Py::Boolean();
    throw Py::AttributeError("Not yet implemented");
}

void  CenterLinePy::setFlip(Py::Boolean arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::List CenterLinePy::getEdges() const
{
    //return Py::List();
    throw Py::AttributeError("Not yet implemented");
}

void  CenterLinePy::setEdges(Py::List arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::List CenterLinePy::getFaces() const
{
    //return Py::List();
    throw Py::AttributeError("Not yet implemented");
}

void  CenterLinePy::setFaces(Py::List arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::List CenterLinePy::getPoints() const
{
    //return Py::List();
    throw Py::AttributeError("Not yet implemented");
}

void  CenterLinePy::setPoints(Py::List arg)
{
    throw Py::AttributeError("Not yet implemented");
}

PyObject *CenterLinePy::getCustomAttributes(const char* /*attr*/) const
{
    return nullptr;
}

int CenterLinePy::setCustomAttributes(const char* /*attr*/, PyObject* /*obj*/)
{
    return 0;
}


#endif



