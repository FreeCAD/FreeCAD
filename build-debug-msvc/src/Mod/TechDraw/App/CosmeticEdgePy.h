
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the XML file
// Every change you make here gets lost in the next full rebuild!
#ifndef TECHDRAW_COSMETICEDGEPY_H
#define TECHDRAW_COSMETICEDGEPY_H

#include <Base/GeometryPyCXX.h>
#include <Mod/TechDraw/App/Cosmetic.h>
#include <string>


namespace TechDraw
{

//===========================================================================
// CosmeticEdgePy - Python wrapper
//===========================================================================

/** The python export class for CosmeticEdge
 */
class TechDrawExport CosmeticEdgePy : public Base::PyObjectBase
{
protected:
    ~CosmeticEdgePy() override;

public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyGetSetDef    GetterSetter[];
    PyTypeObject *GetType() override {return &Type;}

public:
    CosmeticEdgePy(CosmeticEdge *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(PyTypeObject *, PyObject *, PyObject *);
    int PyInit(PyObject* args, PyObject*k) override;


    using PointerType = CosmeticEdge*;

    PyObject *_repr() override;        // the representation
    std::string representation() const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    //@}


    /** @name callbacks and implementers for the python object attributes */
    //@{
    ///getter callback for the Tag attribute
    static PyObject * staticCallback_getTag (PyObject *self, void *closure);
    /// getter for the Tag attribute
    Py::String getTag() const;
    /// setter callback for the Tag attribute
    static int staticCallback_setTag (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Tag is read only!
    ///getter callback for the Start attribute
    static PyObject * staticCallback_getStart (PyObject *self, void *closure);
    /// getter for the Start attribute
    Py::Vector getStart() const;
    /// setter callback for the Start attribute
    static int staticCallback_setStart (PyObject *self, PyObject *value, void *closure);
    /// setter for the Start attribute
    void setStart(Py::Vector arg);
    ///getter callback for the End attribute
    static PyObject * staticCallback_getEnd (PyObject *self, void *closure);
    /// getter for the End attribute
    Py::Vector getEnd() const;
    /// setter callback for the End attribute
    static int staticCallback_setEnd (PyObject *self, PyObject *value, void *closure);
    /// setter for the End attribute
    void setEnd(Py::Vector arg);
    ///getter callback for the Center attribute
    static PyObject * staticCallback_getCenter (PyObject *self, void *closure);
    /// getter for the Center attribute
    Py::Vector getCenter() const;
    /// setter callback for the Center attribute
    static int staticCallback_setCenter (PyObject *self, PyObject *value, void *closure);
    /// setter for the Center attribute
    void setCenter(Py::Vector arg);
    ///getter callback for the Radius attribute
    static PyObject * staticCallback_getRadius (PyObject *self, void *closure);
    /// getter for the Radius attribute
    Py::Float getRadius() const;
    /// setter callback for the Radius attribute
    static int staticCallback_setRadius (PyObject *self, PyObject *value, void *closure);
    /// setter for the Radius attribute
    void setRadius(Py::Float arg);
    ///getter callback for the Format attribute
    static PyObject * staticCallback_getFormat (PyObject *self, void *closure);
    /// getter for the Format attribute
    Py::Dict getFormat() const;
    /// setter callback for the Format attribute
    static int staticCallback_setFormat (PyObject *self, PyObject *value, void *closure);
    /// setter for the Format attribute
    void setFormat(Py::Dict arg);
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(const char *attr) override;              // __getattr__ function
    int _setattr(const char *attr, PyObject *value) override;   // __setattr__ function

    /// getter for the object handled by this class
    CosmeticEdge *getCosmeticEdgePtr() const;

};

}  //namespace TechDraw

#endif  // TECHDRAW_COSMETICEDGEPY_H


