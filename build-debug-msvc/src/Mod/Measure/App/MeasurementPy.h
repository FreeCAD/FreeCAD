
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the XML file
// Every change you make here gets lost in the next full rebuild!
#ifndef MEASURE_MEASUREMENTPY_H
#define MEASURE_MEASUREMENTPY_H

#include <Base/BaseClassPy.h>
#include <Mod/Measure/App/Measurement.h>
#include <string>


namespace Measure
{

//===========================================================================
// MeasurementPy - Python wrapper
//===========================================================================

/** The python export class for Measurement
 */
class MeasureExport MeasurementPy : public Base::BaseClassPy
{
protected:
    ~MeasurementPy() override;

public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyGetSetDef    GetterSetter[];
    PyTypeObject *GetType() override {return &Type;}

public:
    MeasurementPy(Measurement *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(PyTypeObject *, PyObject *, PyObject *);
    int PyInit(PyObject* args, PyObject*k) override;


    using PointerType = Measurement*;

    PyObject *_repr() override;        // the representation
    std::string representation() const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    /// callback for the addReference3D() method
    static PyObject * staticCallback_addReference3D (PyObject *self, PyObject *args);
    /// implementer for the addReference3D() method
    PyObject*  addReference3D(PyObject *args);
    /// callback for the has3DReferences() method
    static PyObject * staticCallback_has3DReferences (PyObject *self, PyObject *args);
    /// implementer for the has3DReferences() method
    PyObject*  has3DReferences(PyObject *args);
    /// callback for the clear() method
    static PyObject * staticCallback_clear (PyObject *self, PyObject *args);
    /// implementer for the clear() method
    PyObject*  clear(PyObject *args);
    /// callback for the delta() method
    static PyObject * staticCallback_delta (PyObject *self, PyObject *args);
    /// implementer for the delta() method
    PyObject*  delta(PyObject *args);
    /// callback for the length() method
    static PyObject * staticCallback_length (PyObject *self, PyObject *args);
    /// implementer for the length() method
    PyObject*  length(PyObject *args);
    /// callback for the volume() method
    static PyObject * staticCallback_volume (PyObject *self, PyObject *args);
    /// implementer for the volume() method
    PyObject*  volume(PyObject *args);
    /// callback for the area() method
    static PyObject * staticCallback_area (PyObject *self, PyObject *args);
    /// implementer for the area() method
    PyObject*  area(PyObject *args);
    /// callback for the lineLineDistance() method
    static PyObject * staticCallback_lineLineDistance (PyObject *self, PyObject *args);
    /// implementer for the lineLineDistance() method
    PyObject*  lineLineDistance(PyObject *args);
    /// callback for the planePlaneDistance() method
    static PyObject * staticCallback_planePlaneDistance (PyObject *self, PyObject *args);
    /// implementer for the planePlaneDistance() method
    PyObject*  planePlaneDistance(PyObject *args);
    /// callback for the angle() method
    static PyObject * staticCallback_angle (PyObject *self, PyObject *args);
    /// implementer for the angle() method
    PyObject*  angle(PyObject *args);
    /// callback for the radius() method
    static PyObject * staticCallback_radius (PyObject *self, PyObject *args);
    /// implementer for the radius() method
    PyObject*  radius(PyObject *args);
    /// callback for the com() method
    static PyObject * staticCallback_com (PyObject *self, PyObject *args);
    /// implementer for the com() method
    PyObject*  com(PyObject *args);
    //@}


    /** @name callbacks and implementers for the python object attributes */
    //@{
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(const char *attr) override;              // __getattr__ function
    int _setattr(const char *attr, PyObject *value) override;   // __setattr__ function

    /// getter for the object handled by this class
    Measurement *getMeasurementPtr() const;

};

}  //namespace Measure

#endif  // MEASURE_MEASUREMENTPY_H


