
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the .XML file
// Every change you make here gets lost in the next full rebuild!
// This File is normally built as an include in BRepOffsetAPI_MakePipeShellPyImp.cpp! It's not intended to be in a project!

#include <boost/filesystem/path.hpp>
#include <boost/filesystem/operations.hpp>
#include <boost/filesystem/exception.hpp>
#include <Base/PyObjectBase.h>
#include <Base/Console.h>
#include <Base/Exception.h>
#include <CXX/Objects.hxx>

#if defined(__clang__)
# pragma clang diagnostic push
# pragma clang diagnostic ignored "-Wdeprecated-declarations"
#endif

using Base::streq;
using namespace Part;

/// Type structure of BRepOffsetAPI_MakePipeShellPy
PyTypeObject BRepOffsetAPI_MakePipeShellPy::Type = {
    PyVarObject_HEAD_INIT(&PyType_Type,0)
    "Part.BRepOffsetAPI_MakePipeShell",     /*tp_name*/
    sizeof(BRepOffsetAPI_MakePipeShellPy),                       /*tp_basicsize*/
    0,                                                /*tp_itemsize*/
    /* methods */
    PyDestructor,                                     /*tp_dealloc*/
#if PY_VERSION_HEX >= 0x03080000
    0,                                                /*tp_vectorcall_offset*/
#else
    nullptr,                                          /*tp_print*/
#endif
    nullptr,                                          /*tp_getattr*/
    nullptr,                                          /*tp_setattr*/
    nullptr,                                          /*tp_compare*/
    __repr,                                           /*tp_repr*/
    nullptr,                                          /*tp_as_number*/
    nullptr,                                          /*tp_as_sequence*/
    nullptr,                                          /*tp_as_mapping*/
    nullptr,                                          /*tp_hash*/
    nullptr,                                          /*tp_call */
    nullptr,                                          /*tp_str  */
    __getattro,                                       /*tp_getattro*/
    __setattro,                                       /*tp_setattro*/
    /* --- Functions to access object as input/output buffer ---------*/
    nullptr,                                          /* tp_as_buffer */
    /* --- Flags to define presence of optional/expanded features */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT,        /*tp_flags */
    "Describes a portion of a circle",           /*tp_doc */
    nullptr,                                          /*tp_traverse */
    nullptr,                                          /*tp_clear */
    nullptr,                                          /*tp_richcompare */
    0,                                                /*tp_weaklistoffset */
    nullptr,                                          /*tp_iter */
    nullptr,                                          /*tp_iternext */
    Part::BRepOffsetAPI_MakePipeShellPy::Methods,                     /*tp_methods */
    nullptr,                                          /*tp_members */
    Part::BRepOffsetAPI_MakePipeShellPy::GetterSetter,                     /*tp_getset */
    &Base::PyObjectBase::Type,                        /*tp_base */
    nullptr,                                          /*tp_dict */
    nullptr,                                          /*tp_descr_get */
    nullptr,                                          /*tp_descr_set */
    0,                                                /*tp_dictoffset */
    __PyInit,                                         /*tp_init */
    nullptr,                                          /*tp_alloc */
    Part::BRepOffsetAPI_MakePipeShellPy::PyMake,/*tp_new */
    nullptr,                                          /*tp_free   Low-level free-memory routine */
    nullptr,                                          /*tp_is_gc  For PyObject_IS_GC */
    nullptr,                                          /*tp_bases */
    nullptr,                                          /*tp_mro    method resolution order */
    nullptr,                                          /*tp_cache */
    nullptr,                                          /*tp_subclasses */
    nullptr,                                          /*tp_weaklist */
    nullptr,                                          /*tp_del */
    0,                                                /*tp_version_tag */
    nullptr                                           /*tp_finalize */
#if PY_VERSION_HEX >= 0x03090000
    ,nullptr                                          /*tp_vectorcall */
#if PY_VERSION_HEX >= 0x030c0000
    ,0                                                /*tp_watched */
#endif
#elif PY_VERSION_HEX >= 0x03080000
    ,nullptr                                          /*tp_vectorcall */
    /* bpo-37250: kept for backwards compatibility in CPython 3.8 only */
    ,nullptr                                          /*tp_print */
#endif
};

/// Methods structure of BRepOffsetAPI_MakePipeShellPy
PyMethodDef BRepOffsetAPI_MakePipeShellPy::Methods[] = {
    {"setFrenetMode",
        reinterpret_cast<PyCFunction>( staticCallback_setFrenetMode ),
        METH_VARARGS,
        "setFrenetMode(True|False)\n"
        "                    Sets a Frenet or a CorrectedFrenet trihedron to perform the sweeping.\n"
        "                    True  = Frenet\n"
        "                    False = CorrectedFrenet"
    },
    {"setTrihedronMode",
        reinterpret_cast<PyCFunction>( staticCallback_setTrihedronMode ),
        METH_VARARGS,
        "setTrihedronMode(point,direction)\n"
        "                    Sets a fixed trihedron to perform the sweeping.\n"
        "                    All sections will be parallel."
    },
    {"setBiNormalMode",
        reinterpret_cast<PyCFunction>( staticCallback_setBiNormalMode ),
        METH_VARARGS,
        "setBiNormalMode(direction)\n"
        "                    Sets a fixed BiNormal direction to perform the sweeping.\n"
        "                    Angular relations between the section(s) and the BiNormal direction will be constant."
    },
    {"setSpineSupport",
        reinterpret_cast<PyCFunction>( staticCallback_setSpineSupport ),
        METH_VARARGS,
        "setSpineSupport(shape)\n"
        "                    Sets support to the spine to define the BiNormal of the trihedron, like the normal to the surfaces.\n"
        "                    Warning: To be effective, Each edge of the spine must have an representation on one face of SpineSupport."
    },
    {"setAuxiliarySpine",
        reinterpret_cast<PyCFunction>( staticCallback_setAuxiliarySpine ),
        METH_VARARGS,
        "setAuxiliarySpine(wire, CurvilinearEquivalence, TypeOfContact)\n"
        "                    Sets an auxiliary spine to define the Normal.\n"
        "\n"
        "                    CurvilinearEquivalence = bool\n"
        "                    For each Point of the Spine P, an Point Q is evalued on AuxiliarySpine.\n"
        "                    If CurvilinearEquivalence=True Q split AuxiliarySpine with the same length ratio than P split Spine.\n"
        "\n"
        "                    * OCC >= 6.7\n"
        "                    TypeOfContact = long\n"
        "                    0: No contact\n"
        "                    1: Contact\n"
        "                    2: Contact On Border (The auxiliary spine becomes a boundary of the swept surface)"
    },
    {"add",
        reinterpret_cast<PyCFunction>(reinterpret_cast<void (*) ()>( staticCallback_add )),
        METH_VARARGS|METH_KEYWORDS,
        "add(shape Profile, bool WithContact=False, bool WithCorrection=False)\n"
        "                    add(shape Profile, vertex Location, bool WithContact=False, bool WithCorrection=False)\n"
        "                    Adds the section Profile to this framework.\n"
        "                    First and last sections may be punctual, so the shape Profile may be both wire and vertex.\n"
        "                    If WithContact is true, the section is translated to be in contact with the spine.\n"
        "                    If WithCorrection is true, the section is rotated to be orthogonal to the spine tangent in the correspondent point."
    },
    {"remove",
        reinterpret_cast<PyCFunction>( staticCallback_remove ),
        METH_VARARGS,
        "remove(shape Profile)\n"
        "                    Removes the section Profile from this framework."
    },
    {"isReady",
        reinterpret_cast<PyCFunction>( staticCallback_isReady ),
        METH_VARARGS,
        "isReady()\n"
        "                    Returns true if this tool object is ready to build the shape."
    },
    {"getStatus",
        reinterpret_cast<PyCFunction>( staticCallback_getStatus ),
        METH_VARARGS,
        "getStatus()\n"
        "                    Get a status, when Simulate or Build failed."
    },
    {"makeSolid",
        reinterpret_cast<PyCFunction>( staticCallback_makeSolid ),
        METH_VARARGS,
        "makeSolid()\n"
        "                    Transforms the sweeping Shell in Solid. If a propfile is not closed returns False."
    },
    {"setTolerance",
        reinterpret_cast<PyCFunction>( staticCallback_setTolerance ),
        METH_VARARGS,
        "setTolerance( tol3d, boundTol, tolAngular)\n"
        "                    Tol3d = 3D tolerance\n"
        "                    BoundTol = boundary tolerance\n"
        "                    TolAngular = angular tolerance"
    },
    {"setTransitionMode",
        reinterpret_cast<PyCFunction>( staticCallback_setTransitionMode ),
        METH_VARARGS,
        "0: BRepBuilderAPI_Transformed\n"
        "                    1: BRepBuilderAPI_RightCorner\n"
        "                    2: BRepBuilderAPI_RoundCorner"
    },
    {"firstShape",
        reinterpret_cast<PyCFunction>( staticCallback_firstShape ),
        METH_VARARGS,
        "firstShape()\n"
        "                    Returns the Shape of the bottom of the sweep."
    },
    {"lastShape",
        reinterpret_cast<PyCFunction>( staticCallback_lastShape ),
        METH_VARARGS,
        "lastShape()\n"
        "                    Returns the Shape of the top of the sweep."
    },
    {"build",
        reinterpret_cast<PyCFunction>( staticCallback_build ),
        METH_VARARGS,
        "build()\n"
        "                    Builds the resulting shape."
    },
    {"shape",
        reinterpret_cast<PyCFunction>( staticCallback_shape ),
        METH_VARARGS,
        "shape()\n"
        "                    Returns the resulting shape."
    },
    {"generated",
        reinterpret_cast<PyCFunction>( staticCallback_generated ),
        METH_VARARGS,
        "generated(shape S)\n"
        "                    Returns a list of new shapes generated from the shape S by the shell-generating algorithm."
    },
    {"setMaxDegree",
        reinterpret_cast<PyCFunction>( staticCallback_setMaxDegree ),
        METH_VARARGS,
        "setMaxDegree(int degree)\n"
        "                    Define the maximum V degree of resulting surface."
    },
    {"setMaxSegments",
        reinterpret_cast<PyCFunction>( staticCallback_setMaxSegments ),
        METH_VARARGS,
        "setMaxSegments(int num)\n"
        "                    Define the maximum number of spans in V-direction on resulting surface."
    },
    {"setForceApproxC1",
        reinterpret_cast<PyCFunction>( staticCallback_setForceApproxC1 ),
        METH_VARARGS,
        "setForceApproxC1(bool)\n"
        "                    Set the flag that indicates attempt to approximate a C1-continuous surface if a swept surface proved to be C0."
    },
    {"simulate",
        reinterpret_cast<PyCFunction>( staticCallback_simulate ),
        METH_VARARGS,
        "simulate(int nbsec)\n"
        "                    Simulates the resulting shape by calculating the given number of cross-sections."
    },
    {nullptr, nullptr, 0, nullptr}		/* Sentinel */
};



/// Attribute structure of BRepOffsetAPI_MakePipeShellPy
PyGetSetDef BRepOffsetAPI_MakePipeShellPy::GetterSetter[] = {
    {nullptr, nullptr, nullptr, nullptr, nullptr}		/* Sentinel */
};

// setFrenetMode() callback and implementer
// PyObject*  BRepOffsetAPI_MakePipeShellPy::setFrenetMode(PyObject *args){};
// has to be implemented in BRepOffsetAPI_MakePipeShellPyImp.cpp
PyObject * BRepOffsetAPI_MakePipeShellPy::staticCallback_setFrenetMode (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'setFrenetMode' of 'Part.BRepOffsetAPI_MakePipeShell' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<BRepOffsetAPI_MakePipeShellPy*>(self)->setFrenetMode(args);
        if (ret != nullptr)
            static_cast<BRepOffsetAPI_MakePipeShellPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// setTrihedronMode() callback and implementer
// PyObject*  BRepOffsetAPI_MakePipeShellPy::setTrihedronMode(PyObject *args){};
// has to be implemented in BRepOffsetAPI_MakePipeShellPyImp.cpp
PyObject * BRepOffsetAPI_MakePipeShellPy::staticCallback_setTrihedronMode (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'setTrihedronMode' of 'Part.BRepOffsetAPI_MakePipeShell' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<BRepOffsetAPI_MakePipeShellPy*>(self)->setTrihedronMode(args);
        if (ret != nullptr)
            static_cast<BRepOffsetAPI_MakePipeShellPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// setBiNormalMode() callback and implementer
// PyObject*  BRepOffsetAPI_MakePipeShellPy::setBiNormalMode(PyObject *args){};
// has to be implemented in BRepOffsetAPI_MakePipeShellPyImp.cpp
PyObject * BRepOffsetAPI_MakePipeShellPy::staticCallback_setBiNormalMode (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'setBiNormalMode' of 'Part.BRepOffsetAPI_MakePipeShell' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<BRepOffsetAPI_MakePipeShellPy*>(self)->setBiNormalMode(args);
        if (ret != nullptr)
            static_cast<BRepOffsetAPI_MakePipeShellPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// setSpineSupport() callback and implementer
// PyObject*  BRepOffsetAPI_MakePipeShellPy::setSpineSupport(PyObject *args){};
// has to be implemented in BRepOffsetAPI_MakePipeShellPyImp.cpp
PyObject * BRepOffsetAPI_MakePipeShellPy::staticCallback_setSpineSupport (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'setSpineSupport' of 'Part.BRepOffsetAPI_MakePipeShell' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<BRepOffsetAPI_MakePipeShellPy*>(self)->setSpineSupport(args);
        if (ret != nullptr)
            static_cast<BRepOffsetAPI_MakePipeShellPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// setAuxiliarySpine() callback and implementer
// PyObject*  BRepOffsetAPI_MakePipeShellPy::setAuxiliarySpine(PyObject *args){};
// has to be implemented in BRepOffsetAPI_MakePipeShellPyImp.cpp
PyObject * BRepOffsetAPI_MakePipeShellPy::staticCallback_setAuxiliarySpine (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'setAuxiliarySpine' of 'Part.BRepOffsetAPI_MakePipeShell' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<BRepOffsetAPI_MakePipeShellPy*>(self)->setAuxiliarySpine(args);
        if (ret != nullptr)
            static_cast<BRepOffsetAPI_MakePipeShellPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// add() callback and implementer
// PyObject*  BRepOffsetAPI_MakePipeShellPy::add(PyObject *args){};
// has to be implemented in BRepOffsetAPI_MakePipeShellPyImp.cpp
PyObject * BRepOffsetAPI_MakePipeShellPy::staticCallback_add (PyObject *self, PyObject *args, PyObject * kwd)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'add' of 'Part.BRepOffsetAPI_MakePipeShell' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<BRepOffsetAPI_MakePipeShellPy*>(self)->add(args, kwd);
        if (ret != nullptr)
            static_cast<BRepOffsetAPI_MakePipeShellPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// remove() callback and implementer
// PyObject*  BRepOffsetAPI_MakePipeShellPy::remove(PyObject *args){};
// has to be implemented in BRepOffsetAPI_MakePipeShellPyImp.cpp
PyObject * BRepOffsetAPI_MakePipeShellPy::staticCallback_remove (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'remove' of 'Part.BRepOffsetAPI_MakePipeShell' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<BRepOffsetAPI_MakePipeShellPy*>(self)->remove(args);
        if (ret != nullptr)
            static_cast<BRepOffsetAPI_MakePipeShellPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// isReady() callback and implementer
// PyObject*  BRepOffsetAPI_MakePipeShellPy::isReady(PyObject *args){};
// has to be implemented in BRepOffsetAPI_MakePipeShellPyImp.cpp
PyObject * BRepOffsetAPI_MakePipeShellPy::staticCallback_isReady (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'isReady' of 'Part.BRepOffsetAPI_MakePipeShell' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<BRepOffsetAPI_MakePipeShellPy*>(self)->isReady(args);
        if (ret != nullptr)
            static_cast<BRepOffsetAPI_MakePipeShellPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// getStatus() callback and implementer
// PyObject*  BRepOffsetAPI_MakePipeShellPy::getStatus(PyObject *args){};
// has to be implemented in BRepOffsetAPI_MakePipeShellPyImp.cpp
PyObject * BRepOffsetAPI_MakePipeShellPy::staticCallback_getStatus (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'getStatus' of 'Part.BRepOffsetAPI_MakePipeShell' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<BRepOffsetAPI_MakePipeShellPy*>(self)->getStatus(args);
        if (ret != nullptr)
            static_cast<BRepOffsetAPI_MakePipeShellPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// makeSolid() callback and implementer
// PyObject*  BRepOffsetAPI_MakePipeShellPy::makeSolid(PyObject *args){};
// has to be implemented in BRepOffsetAPI_MakePipeShellPyImp.cpp
PyObject * BRepOffsetAPI_MakePipeShellPy::staticCallback_makeSolid (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'makeSolid' of 'Part.BRepOffsetAPI_MakePipeShell' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<BRepOffsetAPI_MakePipeShellPy*>(self)->makeSolid(args);
        if (ret != nullptr)
            static_cast<BRepOffsetAPI_MakePipeShellPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// setTolerance() callback and implementer
// PyObject*  BRepOffsetAPI_MakePipeShellPy::setTolerance(PyObject *args){};
// has to be implemented in BRepOffsetAPI_MakePipeShellPyImp.cpp
PyObject * BRepOffsetAPI_MakePipeShellPy::staticCallback_setTolerance (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'setTolerance' of 'Part.BRepOffsetAPI_MakePipeShell' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<BRepOffsetAPI_MakePipeShellPy*>(self)->setTolerance(args);
        if (ret != nullptr)
            static_cast<BRepOffsetAPI_MakePipeShellPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// setTransitionMode() callback and implementer
// PyObject*  BRepOffsetAPI_MakePipeShellPy::setTransitionMode(PyObject *args){};
// has to be implemented in BRepOffsetAPI_MakePipeShellPyImp.cpp
PyObject * BRepOffsetAPI_MakePipeShellPy::staticCallback_setTransitionMode (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'setTransitionMode' of 'Part.BRepOffsetAPI_MakePipeShell' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<BRepOffsetAPI_MakePipeShellPy*>(self)->setTransitionMode(args);
        if (ret != nullptr)
            static_cast<BRepOffsetAPI_MakePipeShellPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// firstShape() callback and implementer
// PyObject*  BRepOffsetAPI_MakePipeShellPy::firstShape(PyObject *args){};
// has to be implemented in BRepOffsetAPI_MakePipeShellPyImp.cpp
PyObject * BRepOffsetAPI_MakePipeShellPy::staticCallback_firstShape (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'firstShape' of 'Part.BRepOffsetAPI_MakePipeShell' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<BRepOffsetAPI_MakePipeShellPy*>(self)->firstShape(args);
        if (ret != nullptr)
            static_cast<BRepOffsetAPI_MakePipeShellPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// lastShape() callback and implementer
// PyObject*  BRepOffsetAPI_MakePipeShellPy::lastShape(PyObject *args){};
// has to be implemented in BRepOffsetAPI_MakePipeShellPyImp.cpp
PyObject * BRepOffsetAPI_MakePipeShellPy::staticCallback_lastShape (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'lastShape' of 'Part.BRepOffsetAPI_MakePipeShell' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<BRepOffsetAPI_MakePipeShellPy*>(self)->lastShape(args);
        if (ret != nullptr)
            static_cast<BRepOffsetAPI_MakePipeShellPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// build() callback and implementer
// PyObject*  BRepOffsetAPI_MakePipeShellPy::build(PyObject *args){};
// has to be implemented in BRepOffsetAPI_MakePipeShellPyImp.cpp
PyObject * BRepOffsetAPI_MakePipeShellPy::staticCallback_build (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'build' of 'Part.BRepOffsetAPI_MakePipeShell' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<BRepOffsetAPI_MakePipeShellPy*>(self)->build(args);
        if (ret != nullptr)
            static_cast<BRepOffsetAPI_MakePipeShellPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// shape() callback and implementer
// PyObject*  BRepOffsetAPI_MakePipeShellPy::shape(PyObject *args){};
// has to be implemented in BRepOffsetAPI_MakePipeShellPyImp.cpp
PyObject * BRepOffsetAPI_MakePipeShellPy::staticCallback_shape (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'shape' of 'Part.BRepOffsetAPI_MakePipeShell' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<BRepOffsetAPI_MakePipeShellPy*>(self)->shape(args);
        if (ret != nullptr)
            static_cast<BRepOffsetAPI_MakePipeShellPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// generated() callback and implementer
// PyObject*  BRepOffsetAPI_MakePipeShellPy::generated(PyObject *args){};
// has to be implemented in BRepOffsetAPI_MakePipeShellPyImp.cpp
PyObject * BRepOffsetAPI_MakePipeShellPy::staticCallback_generated (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'generated' of 'Part.BRepOffsetAPI_MakePipeShell' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<BRepOffsetAPI_MakePipeShellPy*>(self)->generated(args);
        if (ret != nullptr)
            static_cast<BRepOffsetAPI_MakePipeShellPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// setMaxDegree() callback and implementer
// PyObject*  BRepOffsetAPI_MakePipeShellPy::setMaxDegree(PyObject *args){};
// has to be implemented in BRepOffsetAPI_MakePipeShellPyImp.cpp
PyObject * BRepOffsetAPI_MakePipeShellPy::staticCallback_setMaxDegree (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'setMaxDegree' of 'Part.BRepOffsetAPI_MakePipeShell' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<BRepOffsetAPI_MakePipeShellPy*>(self)->setMaxDegree(args);
        if (ret != nullptr)
            static_cast<BRepOffsetAPI_MakePipeShellPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// setMaxSegments() callback and implementer
// PyObject*  BRepOffsetAPI_MakePipeShellPy::setMaxSegments(PyObject *args){};
// has to be implemented in BRepOffsetAPI_MakePipeShellPyImp.cpp
PyObject * BRepOffsetAPI_MakePipeShellPy::staticCallback_setMaxSegments (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'setMaxSegments' of 'Part.BRepOffsetAPI_MakePipeShell' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<BRepOffsetAPI_MakePipeShellPy*>(self)->setMaxSegments(args);
        if (ret != nullptr)
            static_cast<BRepOffsetAPI_MakePipeShellPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// setForceApproxC1() callback and implementer
// PyObject*  BRepOffsetAPI_MakePipeShellPy::setForceApproxC1(PyObject *args){};
// has to be implemented in BRepOffsetAPI_MakePipeShellPyImp.cpp
PyObject * BRepOffsetAPI_MakePipeShellPy::staticCallback_setForceApproxC1 (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'setForceApproxC1' of 'Part.BRepOffsetAPI_MakePipeShell' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<BRepOffsetAPI_MakePipeShellPy*>(self)->setForceApproxC1(args);
        if (ret != nullptr)
            static_cast<BRepOffsetAPI_MakePipeShellPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// simulate() callback and implementer
// PyObject*  BRepOffsetAPI_MakePipeShellPy::simulate(PyObject *args){};
// has to be implemented in BRepOffsetAPI_MakePipeShellPyImp.cpp
PyObject * BRepOffsetAPI_MakePipeShellPy::staticCallback_simulate (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'simulate' of 'Part.BRepOffsetAPI_MakePipeShell' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<BRepOffsetAPI_MakePipeShellPy*>(self)->simulate(args);
        if (ret != nullptr)
            static_cast<BRepOffsetAPI_MakePipeShellPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}




//--------------------------------------------------------------------------
// Constructor
//--------------------------------------------------------------------------
BRepOffsetAPI_MakePipeShellPy::BRepOffsetAPI_MakePipeShellPy(BRepOffsetAPI_MakePipeShell *pcObject, PyTypeObject *T)
    : PyObjectBase(static_cast<PyObjectBase::PointerType>(pcObject), T)
{
}


//--------------------------------------------------------------------------
// destructor
//--------------------------------------------------------------------------
BRepOffsetAPI_MakePipeShellPy::~BRepOffsetAPI_MakePipeShellPy()                                // Everything handled in parent
{
    // delete the handled object when the PyObject dies
    BRepOffsetAPI_MakePipeShellPy::PointerType ptr = static_cast<BRepOffsetAPI_MakePipeShellPy::PointerType>(_pcTwinPointer);
    delete ptr;
}

//--------------------------------------------------------------------------
// BRepOffsetAPI_MakePipeShellPy representation
//--------------------------------------------------------------------------
PyObject *BRepOffsetAPI_MakePipeShellPy::_repr()
{
    return Py_BuildValue("s", representation().c_str());
}

//--------------------------------------------------------------------------
// BRepOffsetAPI_MakePipeShellPy Attributes
//--------------------------------------------------------------------------
PyObject *BRepOffsetAPI_MakePipeShellPy::_getattr(const char *attr)			// __getattr__ function: note only need to handle new state
{
    try {
        // getter method for special Attributes (e.g. dynamic ones)
        PyObject *r = getCustomAttributes(attr);
        if(r) return r;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError,"Unknown C++ exception");
        return nullptr;
    }
#endif

    PyMethodDef *ml = Methods;
    for (; ml->ml_name != nullptr; ml++) {
        if (attr[0] == ml->ml_name[0] &&
            strcmp(attr+1, ml->ml_name+1) == 0)
            return PyCFunction_New(ml, this);
    }

    PyErr_Clear();
    return PyObjectBase::_getattr(attr);
}

int BRepOffsetAPI_MakePipeShellPy::_setattr(const char *attr, PyObject *value) // __setattr__ function: note only need to handle new state
{
    try {
        // setter for special Attributes (e.g. dynamic ones)
        int r = setCustomAttributes(attr, value);
        // r = 1: handled
        // r = -1: error
        // r = 0: ignore
        if (r == 1)
            return 0;
        else if (r == -1)
            return -1;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return -1;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return -1;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return -1;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return -1;
    }
#endif

    return PyObjectBase::_setattr(attr, value);
}

BRepOffsetAPI_MakePipeShell *BRepOffsetAPI_MakePipeShellPy::getBRepOffsetAPI_MakePipeShellPtr() const
{
    return static_cast<BRepOffsetAPI_MakePipeShell *>(_pcTwinPointer);
}

#if defined(__clang__)
# pragma clang diagnostic pop
#endif

#if 0
/* From here on come the methods you have to implement, but NOT in this module. Implement in BRepOffsetAPI_MakePipeShellPyImp.cpp! This prototypes
 * are just for convenience when you add a new method.
 */

PyObject *BRepOffsetAPI_MakePipeShellPy::PyMake(PyTypeObject* /*type*/, PyObject* /*args*/, PyObject* /*kwds*/)
{
    // create a new instance of BRepOffsetAPI_MakePipeShellPy and the Twin object
    return new BRepOffsetAPI_MakePipeShellPy(new BRepOffsetAPI_MakePipeShell);
}

// constructor method
int BRepOffsetAPI_MakePipeShellPy::PyInit(PyObject* /*args*/, PyObject* /*kwd*/)
{
    return 0;
}


// returns a string which represents the object e.g. when printed in python
std::string BRepOffsetAPI_MakePipeShellPy::representation() const
{
    return {"<BRepOffsetAPI_MakePipeShell object>"};
}

PyObject* BRepOffsetAPI_MakePipeShellPy::setFrenetMode(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* BRepOffsetAPI_MakePipeShellPy::setTrihedronMode(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* BRepOffsetAPI_MakePipeShellPy::setBiNormalMode(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* BRepOffsetAPI_MakePipeShellPy::setSpineSupport(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* BRepOffsetAPI_MakePipeShellPy::setAuxiliarySpine(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* BRepOffsetAPI_MakePipeShellPy::add(PyObject *args, PyObject *kwds)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* BRepOffsetAPI_MakePipeShellPy::remove(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* BRepOffsetAPI_MakePipeShellPy::isReady(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* BRepOffsetAPI_MakePipeShellPy::getStatus(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* BRepOffsetAPI_MakePipeShellPy::makeSolid(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* BRepOffsetAPI_MakePipeShellPy::setTolerance(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* BRepOffsetAPI_MakePipeShellPy::setTransitionMode(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* BRepOffsetAPI_MakePipeShellPy::firstShape(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* BRepOffsetAPI_MakePipeShellPy::lastShape(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* BRepOffsetAPI_MakePipeShellPy::build(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* BRepOffsetAPI_MakePipeShellPy::shape(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* BRepOffsetAPI_MakePipeShellPy::generated(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* BRepOffsetAPI_MakePipeShellPy::setMaxDegree(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* BRepOffsetAPI_MakePipeShellPy::setMaxSegments(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* BRepOffsetAPI_MakePipeShellPy::setForceApproxC1(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* BRepOffsetAPI_MakePipeShellPy::simulate(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}



PyObject *BRepOffsetAPI_MakePipeShellPy::getCustomAttributes(const char* /*attr*/) const
{
    return nullptr;
}

int BRepOffsetAPI_MakePipeShellPy::setCustomAttributes(const char* /*attr*/, PyObject* /*obj*/)
{
    return 0;
}


#endif



