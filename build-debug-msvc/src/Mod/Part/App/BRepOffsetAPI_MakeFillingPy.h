
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the XML file
// Every change you make here gets lost in the next full rebuild!
#ifndef PART_BREPOFFSETAPI_MAKEFILLINGPY_H
#define PART_BREPOFFSETAPI_MAKEFILLINGPY_H

#include <Base/PyObjectBase.h>
#include <BRepOffsetAPI_MakeFilling.hxx>
#include <string>


namespace Part
{

//===========================================================================
// BRepOffsetAPI_MakeFillingPy - Python wrapper
//===========================================================================

/** The python export class for BRepOffsetAPI_MakeFilling
 */
class PartExport BRepOffsetAPI_MakeFillingPy : public Base::PyObjectBase
{
protected:
    ~BRepOffsetAPI_MakeFillingPy() override;

public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyGetSetDef    GetterSetter[];
    PyTypeObject *GetType() override {return &Type;}

public:
    BRepOffsetAPI_MakeFillingPy(BRepOffsetAPI_MakeFilling *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(PyTypeObject *, PyObject *, PyObject *);
    int PyInit(PyObject* args, PyObject*k) override;


    using PointerType = BRepOffsetAPI_MakeFilling*;

    PyObject *_repr() override;        // the representation
    std::string representation() const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    /// callback for the setConstrParam() method
    static PyObject * staticCallback_setConstrParam (PyObject *self, PyObject *args, PyObject *kwd);
    /// implementer for the setConstrParam() method
    PyObject*  setConstrParam(PyObject *args, PyObject *kwd);
    /// callback for the setResolParam() method
    static PyObject * staticCallback_setResolParam (PyObject *self, PyObject *args, PyObject *kwd);
    /// implementer for the setResolParam() method
    PyObject*  setResolParam(PyObject *args, PyObject *kwd);
    /// callback for the setApproxParam() method
    static PyObject * staticCallback_setApproxParam (PyObject *self, PyObject *args, PyObject *kwd);
    /// implementer for the setApproxParam() method
    PyObject*  setApproxParam(PyObject *args, PyObject *kwd);
    /// callback for the loadInitSurface() method
    static PyObject * staticCallback_loadInitSurface (PyObject *self, PyObject *args);
    /// implementer for the loadInitSurface() method
    PyObject*  loadInitSurface(PyObject *args);
    /// callback for the add() method
    static PyObject * staticCallback_add (PyObject *self, PyObject *args, PyObject *kwd);
    /// implementer for the add() method
    PyObject*  add(PyObject *args, PyObject *kwd);
    /// callback for the build() method
    static PyObject * staticCallback_build (PyObject *self, PyObject *args);
    /// implementer for the build() method
    PyObject*  build(PyObject *args);
    /// callback for the isDone() method
    static PyObject * staticCallback_isDone (PyObject *self, PyObject *args);
    /// implementer for the isDone() method
    PyObject*  isDone(PyObject *args);
    /// callback for the G0Error() method
    static PyObject * staticCallback_G0Error (PyObject *self, PyObject *args);
    /// implementer for the G0Error() method
    PyObject*  G0Error(PyObject *args);
    /// callback for the G1Error() method
    static PyObject * staticCallback_G1Error (PyObject *self, PyObject *args);
    /// implementer for the G1Error() method
    PyObject*  G1Error(PyObject *args);
    /// callback for the G2Error() method
    static PyObject * staticCallback_G2Error (PyObject *self, PyObject *args);
    /// implementer for the G2Error() method
    PyObject*  G2Error(PyObject *args);
    /// callback for the shape() method
    static PyObject * staticCallback_shape (PyObject *self, PyObject *args);
    /// implementer for the shape() method
    PyObject*  shape(PyObject *args);
    //@}


    /** @name callbacks and implementers for the python object attributes */
    //@{
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(const char *attr) override;              // __getattr__ function
    int _setattr(const char *attr, PyObject *value) override;   // __setattr__ function

    /// getter for the object handled by this class
    BRepOffsetAPI_MakeFilling *getBRepOffsetAPI_MakeFillingPtr() const;

};

}  //namespace Part

#endif  // PART_BREPOFFSETAPI_MAKEFILLINGPY_H


