
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the XML file
// Every change you make here gets lost in the next full rebuild!
#ifndef PART_BUILDPLATESURFACEPY_H
#define PART_BUILDPLATESURFACEPY_H

#include <Base/PyObjectBase.h>
#include <GeomPlate_BuildPlateSurface.hxx>
#include <string>


namespace Part
{

//===========================================================================
// BuildPlateSurfacePy - Python wrapper
//===========================================================================

/** The python export class for GeomPlate_BuildPlateSurface
 */
class PartExport BuildPlateSurfacePy : public Base::PyObjectBase
{
protected:
    ~BuildPlateSurfacePy() override;

public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyGetSetDef    GetterSetter[];
    PyTypeObject *GetType() override {return &Type;}

public:
    BuildPlateSurfacePy(GeomPlate_BuildPlateSurface *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(PyTypeObject *, PyObject *, PyObject *);
    int PyInit(PyObject* args, PyObject*k) override;


    using PointerType = GeomPlate_BuildPlateSurface*;

    PyObject *_repr() override;        // the representation
    std::string representation() const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    /// callback for the init() method
    static PyObject * staticCallback_init (PyObject *self, PyObject *args);
    /// implementer for the init() method
    PyObject*  init(PyObject *args);
    /// callback for the setNbBounds() method
    static PyObject * staticCallback_setNbBounds (PyObject *self, PyObject *args);
    /// implementer for the setNbBounds() method
    PyObject*  setNbBounds(PyObject *args);
    /// callback for the loadInitSurface() method
    static PyObject * staticCallback_loadInitSurface (PyObject *self, PyObject *args);
    /// implementer for the loadInitSurface() method
    PyObject*  loadInitSurface(PyObject *args);
    /// callback for the surfInit() method
    static PyObject * staticCallback_surfInit (PyObject *self, PyObject *args);
    /// implementer for the surfInit() method
    PyObject*  surfInit(PyObject *args);
    /// callback for the surface() method
    static PyObject * staticCallback_surface (PyObject *self, PyObject *args);
    /// implementer for the surface() method
    PyObject*  surface(PyObject *args);
    /// callback for the add() method
    static PyObject * staticCallback_add (PyObject *self, PyObject *args);
    /// implementer for the add() method
    PyObject*  add(PyObject *args);
    /// callback for the perform() method
    static PyObject * staticCallback_perform (PyObject *self, PyObject *args);
    /// implementer for the perform() method
    PyObject*  perform(PyObject *args);
    /// callback for the isDone() method
    static PyObject * staticCallback_isDone (PyObject *self, PyObject *args);
    /// implementer for the isDone() method
    PyObject*  isDone(PyObject *args);
    /// callback for the sense() method
    static PyObject * staticCallback_sense (PyObject *self, PyObject *args);
    /// implementer for the sense() method
    PyObject*  sense(PyObject *args);
    /// callback for the order() method
    static PyObject * staticCallback_order (PyObject *self, PyObject *args);
    /// implementer for the order() method
    PyObject*  order(PyObject *args);
    /// callback for the curves2d() method
    static PyObject * staticCallback_curves2d (PyObject *self, PyObject *args);
    /// implementer for the curves2d() method
    PyObject*  curves2d(PyObject *args);
    /// callback for the curveConstraint() method
    static PyObject * staticCallback_curveConstraint (PyObject *self, PyObject *args);
    /// implementer for the curveConstraint() method
    PyObject*  curveConstraint(PyObject *args);
    /// callback for the pointConstraint() method
    static PyObject * staticCallback_pointConstraint (PyObject *self, PyObject *args);
    /// implementer for the pointConstraint() method
    PyObject*  pointConstraint(PyObject *args);
    /// callback for the disc2dContour() method
    static PyObject * staticCallback_disc2dContour (PyObject *self, PyObject *args);
    /// implementer for the disc2dContour() method
    PyObject*  disc2dContour(PyObject *args);
    /// callback for the disc3dContour() method
    static PyObject * staticCallback_disc3dContour (PyObject *self, PyObject *args);
    /// implementer for the disc3dContour() method
    PyObject*  disc3dContour(PyObject *args);
    /// callback for the G0Error() method
    static PyObject * staticCallback_G0Error (PyObject *self, PyObject *args);
    /// implementer for the G0Error() method
    PyObject*  G0Error(PyObject *args);
    /// callback for the G1Error() method
    static PyObject * staticCallback_G1Error (PyObject *self, PyObject *args);
    /// implementer for the G1Error() method
    PyObject*  G1Error(PyObject *args);
    /// callback for the G2Error() method
    static PyObject * staticCallback_G2Error (PyObject *self, PyObject *args);
    /// implementer for the G2Error() method
    PyObject*  G2Error(PyObject *args);
    //@}


    /** @name callbacks and implementers for the python object attributes */
    //@{
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(const char *attr) override;              // __getattr__ function
    int _setattr(const char *attr, PyObject *value) override;   // __setattr__ function

    /// getter for the object handled by this class
    GeomPlate_BuildPlateSurface *getGeomPlate_BuildPlateSurfacePtr() const;

};

}  //namespace Part

#endif  // PART_BUILDPLATESURFACEPY_H


