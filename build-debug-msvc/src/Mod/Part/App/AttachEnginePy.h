
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the XML file
// Every change you make here gets lost in the next full rebuild!
#ifndef ATTACHER_ATTACHENGINEPY_H
#define ATTACHER_ATTACHENGINEPY_H

#include <Base/BaseClassPy.h>
#include <Mod/Part/App/Attacher.h>
#include <string>


namespace Attacher
{

//===========================================================================
// AttachEnginePy - Python wrapper
//===========================================================================

/** The python export class for AttachEngine
 */
class AttacherExport AttachEnginePy : public Base::BaseClassPy
{
protected:
    ~AttachEnginePy() override;

public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyGetSetDef    GetterSetter[];
    PyTypeObject *GetType() override {return &Type;}

public:
    AttachEnginePy(AttachEngine *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(PyTypeObject *, PyObject *, PyObject *);
    int PyInit(PyObject* args, PyObject*k) override;


    using PointerType = AttachEngine*;

    PyObject *_repr() override;        // the representation
    std::string representation() const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    /// callback for the getModeInfo() method
    static PyObject * staticCallback_getModeInfo (PyObject *self, PyObject *args);
    /// implementer for the getModeInfo() method
    PyObject*  getModeInfo(PyObject *args);
    /// callback for the getRefTypeOfShape() method
    static PyObject * staticCallback_getRefTypeOfShape (PyObject *self, PyObject *args);
    /// implementer for the getRefTypeOfShape() method
    PyObject*  getRefTypeOfShape(PyObject *args);
    /// callback for the isFittingRefType() method
    static PyObject * staticCallback_isFittingRefType (PyObject *self, PyObject *args);
    /// implementer for the isFittingRefType() method
    PyObject*  isFittingRefType(PyObject *args);
    /// callback for the downgradeRefType() method
    static PyObject * staticCallback_downgradeRefType (PyObject *self, PyObject *args);
    /// implementer for the downgradeRefType() method
    PyObject*  downgradeRefType(PyObject *args);
    /// callback for the getRefTypeInfo() method
    static PyObject * staticCallback_getRefTypeInfo (PyObject *self, PyObject *args);
    /// implementer for the getRefTypeInfo() method
    PyObject*  getRefTypeInfo(PyObject *args);
    /// callback for the copy() method
    static PyObject * staticCallback_copy (PyObject *self, PyObject *args);
    /// implementer for the copy() method
    PyObject*  copy(PyObject *args);
    /// callback for the calculateAttachedPlacement() method
    static PyObject * staticCallback_calculateAttachedPlacement (PyObject *self, PyObject *args);
    /// implementer for the calculateAttachedPlacement() method
    PyObject*  calculateAttachedPlacement(PyObject *args);
    /// callback for the suggestModes() method
    static PyObject * staticCallback_suggestModes (PyObject *self, PyObject *args);
    /// implementer for the suggestModes() method
    PyObject*  suggestModes(PyObject *args);
    /// callback for the readParametersFromFeature() method
    static PyObject * staticCallback_readParametersFromFeature (PyObject *self, PyObject *args);
    /// implementer for the readParametersFromFeature() method
    PyObject*  readParametersFromFeature(PyObject *args);
    /// callback for the writeParametersToFeature() method
    static PyObject * staticCallback_writeParametersToFeature (PyObject *self, PyObject *args);
    /// implementer for the writeParametersToFeature() method
    PyObject*  writeParametersToFeature(PyObject *args);
    //@}


    /** @name callbacks and implementers for the python object attributes */
    //@{
    ///getter callback for the AttacherType attribute
    static PyObject * staticCallback_getAttacherType (PyObject *self, void *closure);
    /// getter for the AttacherType attribute
    Py::String getAttacherType() const;
    /// setter callback for the AttacherType attribute
    static int staticCallback_setAttacherType (PyObject *self, PyObject *value, void *closure);
    // no setter method,  AttacherType is read only!
    ///getter callback for the Mode attribute
    static PyObject * staticCallback_getMode (PyObject *self, void *closure);
    /// getter for the Mode attribute
    Py::String getMode() const;
    /// setter callback for the Mode attribute
    static int staticCallback_setMode (PyObject *self, PyObject *value, void *closure);
    /// setter for the Mode attribute
    void setMode(Py::String arg);
    ///getter callback for the References attribute
    static PyObject * staticCallback_getReferences (PyObject *self, void *closure);
    /// getter for the References attribute
    Py::Object getReferences() const;
    /// setter callback for the References attribute
    static int staticCallback_setReferences (PyObject *self, PyObject *value, void *closure);
    /// setter for the References attribute
    void setReferences(Py::Object arg);
    ///getter callback for the AttachmentOffset attribute
    static PyObject * staticCallback_getAttachmentOffset (PyObject *self, void *closure);
    /// getter for the AttachmentOffset attribute
    Py::Object getAttachmentOffset() const;
    /// setter callback for the AttachmentOffset attribute
    static int staticCallback_setAttachmentOffset (PyObject *self, PyObject *value, void *closure);
    /// setter for the AttachmentOffset attribute
    void setAttachmentOffset(Py::Object arg);
    ///getter callback for the Reverse attribute
    static PyObject * staticCallback_getReverse (PyObject *self, void *closure);
    /// getter for the Reverse attribute
    Py::Boolean getReverse() const;
    /// setter callback for the Reverse attribute
    static int staticCallback_setReverse (PyObject *self, PyObject *value, void *closure);
    /// setter for the Reverse attribute
    void setReverse(Py::Boolean arg);
    ///getter callback for the Parameter attribute
    static PyObject * staticCallback_getParameter (PyObject *self, void *closure);
    /// getter for the Parameter attribute
    Py::Float getParameter() const;
    /// setter callback for the Parameter attribute
    static int staticCallback_setParameter (PyObject *self, PyObject *value, void *closure);
    /// setter for the Parameter attribute
    void setParameter(Py::Float arg);
    ///getter callback for the CompleteModeList attribute
    static PyObject * staticCallback_getCompleteModeList (PyObject *self, void *closure);
    /// getter for the CompleteModeList attribute
    Py::List getCompleteModeList() const;
    /// setter callback for the CompleteModeList attribute
    static int staticCallback_setCompleteModeList (PyObject *self, PyObject *value, void *closure);
    // no setter method,  CompleteModeList is read only!
    ///getter callback for the ImplementedModes attribute
    static PyObject * staticCallback_getImplementedModes (PyObject *self, void *closure);
    /// getter for the ImplementedModes attribute
    Py::List getImplementedModes() const;
    /// setter callback for the ImplementedModes attribute
    static int staticCallback_setImplementedModes (PyObject *self, PyObject *value, void *closure);
    // no setter method,  ImplementedModes is read only!
    ///getter callback for the CompleteRefTypeList attribute
    static PyObject * staticCallback_getCompleteRefTypeList (PyObject *self, void *closure);
    /// getter for the CompleteRefTypeList attribute
    Py::List getCompleteRefTypeList() const;
    /// setter callback for the CompleteRefTypeList attribute
    static int staticCallback_setCompleteRefTypeList (PyObject *self, PyObject *value, void *closure);
    // no setter method,  CompleteRefTypeList is read only!
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(const char *attr) override;              // __getattr__ function
    int _setattr(const char *attr, PyObject *value) override;   // __setattr__ function

    /// getter for the object handled by this class
    AttachEngine *getAttachEnginePtr() const;

};

}  //namespace Attacher

#endif  // ATTACHER_ATTACHENGINEPY_H


