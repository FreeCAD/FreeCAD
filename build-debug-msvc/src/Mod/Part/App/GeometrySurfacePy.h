
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the XML file
// Every change you make here gets lost in the next full rebuild!
#ifndef PART_GEOMETRYSURFACEPY_H
#define PART_GEOMETRYSURFACEPY_H

#include <Mod/Part/App/GeometryPy.h>
#include <Mod/Part/App/Geometry.h>
#include <string>


namespace Part
{

//===========================================================================
// GeometrySurfacePy - Python wrapper
//===========================================================================

/** The python export class for GeomSurface
 */
class PartExport GeometrySurfacePy : public Part::GeometryPy
{
protected:
    ~GeometrySurfacePy() override;

public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyGetSetDef    GetterSetter[];
    PyTypeObject *GetType() override {return &Type;}

public:
    GeometrySurfacePy(GeomSurface *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(PyTypeObject *, PyObject *, PyObject *);
    int PyInit(PyObject* args, PyObject*k) override;


    using PointerType = GeomSurface*;

    PyObject *_repr() override;        // the representation
    std::string representation() const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    /// callback for the toShape() method
    static PyObject * staticCallback_toShape (PyObject *self, PyObject *args);
    /// implementer for the toShape() method
    PyObject*  toShape(PyObject *args);
    /// callback for the toShell() method
    static PyObject * staticCallback_toShell (PyObject *self, PyObject *args, PyObject *kwd);
    /// implementer for the toShell() method
    PyObject*  toShell(PyObject *args, PyObject *kwd);
    /// callback for the getD0() method
    static PyObject * staticCallback_getD0 (PyObject *self, PyObject *args);
    /// implementer for the getD0() method
    PyObject*  getD0(PyObject *args);
    /// callback for the getDN() method
    static PyObject * staticCallback_getDN (PyObject *self, PyObject *args);
    /// implementer for the getDN() method
    PyObject*  getDN(PyObject *args);
    /// callback for the value() method
    static PyObject * staticCallback_value (PyObject *self, PyObject *args);
    /// implementer for the value() method
    PyObject*  value(PyObject *args);
    /// callback for the tangent() method
    static PyObject * staticCallback_tangent (PyObject *self, PyObject *args);
    /// implementer for the tangent() method
    PyObject*  tangent(PyObject *args);
    /// callback for the normal() method
    static PyObject * staticCallback_normal (PyObject *self, PyObject *args);
    /// implementer for the normal() method
    PyObject*  normal(PyObject *args);
    /// callback for the projectPoint() method
    static PyObject * staticCallback_projectPoint (PyObject *self, PyObject *args, PyObject *kwd);
    /// implementer for the projectPoint() method
    PyObject*  projectPoint(PyObject *args, PyObject *kwd);
    /// callback for the isUmbillic() method
    static PyObject * staticCallback_isUmbillic (PyObject *self, PyObject *args);
    /// implementer for the isUmbillic() method
    PyObject*  isUmbillic(PyObject *args);
    /// callback for the curvature() method
    static PyObject * staticCallback_curvature (PyObject *self, PyObject *args);
    /// implementer for the curvature() method
    PyObject*  curvature(PyObject *args);
    /// callback for the curvatureDirections() method
    static PyObject * staticCallback_curvatureDirections (PyObject *self, PyObject *args);
    /// implementer for the curvatureDirections() method
    PyObject*  curvatureDirections(PyObject *args);
    /// callback for the bounds() method
    static PyObject * staticCallback_bounds (PyObject *self, PyObject *args);
    /// implementer for the bounds() method
    PyObject*  bounds(PyObject *args);
    /// callback for the isPlanar() method
    static PyObject * staticCallback_isPlanar (PyObject *self, PyObject *args);
    /// implementer for the isPlanar() method
    PyObject*  isPlanar(PyObject *args);
    /// callback for the uIso() method
    static PyObject * staticCallback_uIso (PyObject *self, PyObject *args);
    /// implementer for the uIso() method
    PyObject*  uIso(PyObject *args);
    /// callback for the vIso() method
    static PyObject * staticCallback_vIso (PyObject *self, PyObject *args);
    /// implementer for the vIso() method
    PyObject*  vIso(PyObject *args);
    /// callback for the isUPeriodic() method
    static PyObject * staticCallback_isUPeriodic (PyObject *self, PyObject *args);
    /// implementer for the isUPeriodic() method
    PyObject*  isUPeriodic(PyObject *args);
    /// callback for the isVPeriodic() method
    static PyObject * staticCallback_isVPeriodic (PyObject *self, PyObject *args);
    /// implementer for the isVPeriodic() method
    PyObject*  isVPeriodic(PyObject *args);
    /// callback for the isUClosed() method
    static PyObject * staticCallback_isUClosed (PyObject *self, PyObject *args);
    /// implementer for the isUClosed() method
    PyObject*  isUClosed(PyObject *args);
    /// callback for the isVClosed() method
    static PyObject * staticCallback_isVClosed (PyObject *self, PyObject *args);
    /// implementer for the isVClosed() method
    PyObject*  isVClosed(PyObject *args);
    /// callback for the UPeriod() method
    static PyObject * staticCallback_UPeriod (PyObject *self, PyObject *args);
    /// implementer for the UPeriod() method
    PyObject*  UPeriod(PyObject *args);
    /// callback for the VPeriod() method
    static PyObject * staticCallback_VPeriod (PyObject *self, PyObject *args);
    /// implementer for the VPeriod() method
    PyObject*  VPeriod(PyObject *args);
    /// callback for the parameter() method
    static PyObject * staticCallback_parameter (PyObject *self, PyObject *args);
    /// implementer for the parameter() method
    PyObject*  parameter(PyObject *args);
    /// callback for the toBSpline() method
    static PyObject * staticCallback_toBSpline (PyObject *self, PyObject *args, PyObject *kwd);
    /// implementer for the toBSpline() method
    PyObject*  toBSpline(PyObject *args, PyObject *kwd);
    /// callback for the intersect() method
    static PyObject * staticCallback_intersect (PyObject *self, PyObject *args);
    /// implementer for the intersect() method
    PyObject*  intersect(PyObject *args);
    /// callback for the intersectSS() method
    static PyObject * staticCallback_intersectSS (PyObject *self, PyObject *args);
    /// implementer for the intersectSS() method
    PyObject*  intersectSS(PyObject *args);
    //@}


    /** @name callbacks and implementers for the python object attributes */
    //@{
    ///getter callback for the Continuity attribute
    static PyObject * staticCallback_getContinuity (PyObject *self, void *closure);
    /// getter for the Continuity attribute
    Py::String getContinuity() const;
    /// setter callback for the Continuity attribute
    static int staticCallback_setContinuity (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Continuity is read only!
    ///getter callback for the Rotation attribute
    static PyObject * staticCallback_getRotation (PyObject *self, void *closure);
    /// getter for the Rotation attribute
    Py::Object getRotation() const;
    /// setter callback for the Rotation attribute
    static int staticCallback_setRotation (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Rotation is read only!
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(const char *attr) override;              // __getattr__ function
    int _setattr(const char *attr, PyObject *value) override;   // __setattr__ function

    /// getter for the object handled by this class
    GeomSurface *getGeomSurfacePtr() const;

};

}  //namespace Part

#endif  // PART_GEOMETRYSURFACEPY_H


