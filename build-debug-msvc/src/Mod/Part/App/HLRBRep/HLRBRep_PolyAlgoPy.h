
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the XML file
// Every change you make here gets lost in the next full rebuild!
#ifndef PART_HLRBREP_POLYALGOPY_H
#define PART_HLRBREP_POLYALGOPY_H

#include <Base/PyObjectBase.h>
#include <HLRBRep_PolyAlgo.hxx>
#include <string>


namespace Part
{

//===========================================================================
// HLRBRep_PolyAlgoPy - Python wrapper
//===========================================================================

/** The python export class for HLRBRep_PolyAlgo
 */
class PartExport HLRBRep_PolyAlgoPy : public Base::PyObjectBase
{
protected:
    ~HLRBRep_PolyAlgoPy() override;

public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyGetSetDef    GetterSetter[];
    PyTypeObject *GetType() override {return &Type;}

public:
    HLRBRep_PolyAlgoPy(HLRBRep_PolyAlgo *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(PyTypeObject *, PyObject *, PyObject *);
    int PyInit(PyObject* args, PyObject*k) override;


    using PointerType = HLRBRep_PolyAlgo*;

    PyObject *_repr() override;        // the representation
    std::string representation() const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    /// callback for the load() method
    static PyObject * staticCallback_load (PyObject *self, PyObject *args);
    /// implementer for the load() method
    PyObject*  load(PyObject *args);
    /// callback for the remove() method
    static PyObject * staticCallback_remove (PyObject *self, PyObject *args);
    /// implementer for the remove() method
    PyObject*  remove(PyObject *args);
    /// callback for the nbShapes() method
    static PyObject * staticCallback_nbShapes (PyObject *self, PyObject *args);
    /// implementer for the nbShapes() method
    PyObject*  nbShapes(PyObject *args);
    /// callback for the shape() method
    static PyObject * staticCallback_shape (PyObject *self, PyObject *args);
    /// implementer for the shape() method
    PyObject*  shape(PyObject *args);
    /// callback for the index() method
    static PyObject * staticCallback_index (PyObject *self, PyObject *args);
    /// implementer for the index() method
    PyObject*  index(PyObject *args);
    /// callback for the setProjector() method
    static PyObject * staticCallback_setProjector (PyObject *self, PyObject *args, PyObject *kwd);
    /// implementer for the setProjector() method
    PyObject*  setProjector(PyObject *args, PyObject *kwd);
    /// callback for the update() method
    static PyObject * staticCallback_update (PyObject *self, PyObject *args);
    /// implementer for the update() method
    PyObject*  update(PyObject *args);
    /// callback for the initHide() method
    static PyObject * staticCallback_initHide (PyObject *self, PyObject *args);
    /// implementer for the initHide() method
    PyObject*  initHide(PyObject *args);
    /// callback for the moreHide() method
    static PyObject * staticCallback_moreHide (PyObject *self, PyObject *args);
    /// implementer for the moreHide() method
    PyObject*  moreHide(PyObject *args);
    /// callback for the nextHide() method
    static PyObject * staticCallback_nextHide (PyObject *self, PyObject *args);
    /// implementer for the nextHide() method
    PyObject*  nextHide(PyObject *args);
    /// callback for the initShow() method
    static PyObject * staticCallback_initShow (PyObject *self, PyObject *args);
    /// implementer for the initShow() method
    PyObject*  initShow(PyObject *args);
    /// callback for the moreShow() method
    static PyObject * staticCallback_moreShow (PyObject *self, PyObject *args);
    /// implementer for the moreShow() method
    PyObject*  moreShow(PyObject *args);
    /// callback for the nextShow() method
    static PyObject * staticCallback_nextShow (PyObject *self, PyObject *args);
    /// implementer for the nextShow() method
    PyObject*  nextShow(PyObject *args);
    /// callback for the outLinedShape() method
    static PyObject * staticCallback_outLinedShape (PyObject *self, PyObject *args);
    /// implementer for the outLinedShape() method
    PyObject*  outLinedShape(PyObject *args);
    //@}


    /** @name callbacks and implementers for the python object attributes */
    //@{
    ///getter callback for the Angle attribute
    static PyObject * staticCallback_getAngle (PyObject *self, void *closure);
    /// getter for the Angle attribute
    Py::Float getAngle() const;
    /// setter callback for the Angle attribute
    static int staticCallback_setAngle (PyObject *self, PyObject *value, void *closure);
    /// setter for the Angle attribute
    void setAngle(Py::Float arg);
    ///getter callback for the TolAngular attribute
    static PyObject * staticCallback_getTolAngular (PyObject *self, void *closure);
    /// getter for the TolAngular attribute
    Py::Float getTolAngular() const;
    /// setter callback for the TolAngular attribute
    static int staticCallback_setTolAngular (PyObject *self, PyObject *value, void *closure);
    /// setter for the TolAngular attribute
    void setTolAngular(Py::Float arg);
    ///getter callback for the TolCoef attribute
    static PyObject * staticCallback_getTolCoef (PyObject *self, void *closure);
    /// getter for the TolCoef attribute
    Py::Float getTolCoef() const;
    /// setter callback for the TolCoef attribute
    static int staticCallback_setTolCoef (PyObject *self, PyObject *value, void *closure);
    /// setter for the TolCoef attribute
    void setTolCoef(Py::Float arg);
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(const char *attr) override;              // __getattr__ function
    int _setattr(const char *attr, PyObject *value) override;   // __setattr__ function

    /// getter for the object handled by this class
    HLRBRep_PolyAlgo *getHLRBRep_PolyAlgoPtr() const;

    /** @name additional declarations and methods for the wrapper class */
    //@{

private:
    Handle(HLRBRep_PolyAlgo) hAlgo;

public:
    Handle(HLRBRep_PolyAlgo) handle() {
        return hAlgo;
    }
    
    //@}
};

}  //namespace Part

#endif  // PART_HLRBREP_POLYALGOPY_H


