
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the XML file
// Every change you make here gets lost in the next full rebuild!
#ifndef PART_HLRBREP_ALGOPY_H
#define PART_HLRBREP_ALGOPY_H

#include <Base/PyObjectBase.h>
#include <HLRBRep_Algo.hxx>
#include <string>


namespace Part
{

//===========================================================================
// HLRBRep_AlgoPy - Python wrapper
//===========================================================================

/** The python export class for HLRBRep_Algo
 */
class PartExport HLRBRep_AlgoPy : public Base::PyObjectBase
{
protected:
    ~HLRBRep_AlgoPy() override;

public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyGetSetDef    GetterSetter[];
    PyTypeObject *GetType() override {return &Type;}

public:
    HLRBRep_AlgoPy(HLRBRep_Algo *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(PyTypeObject *, PyObject *, PyObject *);
    int PyInit(PyObject* args, PyObject*k) override;


    using PointerType = HLRBRep_Algo*;

    PyObject *_repr() override;        // the representation
    std::string representation() const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    /// callback for the add() method
    static PyObject * staticCallback_add (PyObject *self, PyObject *args);
    /// implementer for the add() method
    PyObject*  add(PyObject *args);
    /// callback for the remove() method
    static PyObject * staticCallback_remove (PyObject *self, PyObject *args);
    /// implementer for the remove() method
    PyObject*  remove(PyObject *args);
    /// callback for the index() method
    static PyObject * staticCallback_index (PyObject *self, PyObject *args);
    /// implementer for the index() method
    PyObject*  index(PyObject *args);
    /// callback for the outLinedShapeNullify() method
    static PyObject * staticCallback_outLinedShapeNullify (PyObject *self, PyObject *args);
    /// implementer for the outLinedShapeNullify() method
    PyObject*  outLinedShapeNullify(PyObject *args);
    /// callback for the setProjector() method
    static PyObject * staticCallback_setProjector (PyObject *self, PyObject *args, PyObject *kwd);
    /// implementer for the setProjector() method
    PyObject*  setProjector(PyObject *args, PyObject *kwd);
    /// callback for the nbShapes() method
    static PyObject * staticCallback_nbShapes (PyObject *self, PyObject *args);
    /// implementer for the nbShapes() method
    PyObject*  nbShapes(PyObject *args);
    /// callback for the showAll() method
    static PyObject * staticCallback_showAll (PyObject *self, PyObject *args);
    /// implementer for the showAll() method
    PyObject*  showAll(PyObject *args);
    /// callback for the hide() method
    static PyObject * staticCallback_hide (PyObject *self, PyObject *args);
    /// implementer for the hide() method
    PyObject*  hide(PyObject *args);
    /// callback for the hideAll() method
    static PyObject * staticCallback_hideAll (PyObject *self, PyObject *args);
    /// implementer for the hideAll() method
    PyObject*  hideAll(PyObject *args);
    /// callback for the partialHide() method
    static PyObject * staticCallback_partialHide (PyObject *self, PyObject *args);
    /// implementer for the partialHide() method
    PyObject*  partialHide(PyObject *args);
    /// callback for the select() method
    static PyObject * staticCallback_select (PyObject *self, PyObject *args);
    /// implementer for the select() method
    PyObject*  select(PyObject *args);
    /// callback for the selectEdge() method
    static PyObject * staticCallback_selectEdge (PyObject *self, PyObject *args);
    /// implementer for the selectEdge() method
    PyObject*  selectEdge(PyObject *args);
    /// callback for the selectFace() method
    static PyObject * staticCallback_selectFace (PyObject *self, PyObject *args);
    /// implementer for the selectFace() method
    PyObject*  selectFace(PyObject *args);
    /// callback for the initEdgeStatus() method
    static PyObject * staticCallback_initEdgeStatus (PyObject *self, PyObject *args);
    /// implementer for the initEdgeStatus() method
    PyObject*  initEdgeStatus(PyObject *args);
    /// callback for the update() method
    static PyObject * staticCallback_update (PyObject *self, PyObject *args);
    /// implementer for the update() method
    PyObject*  update(PyObject *args);
    //@}


    /** @name callbacks and implementers for the python object attributes */
    //@{
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(const char *attr) override;              // __getattr__ function
    int _setattr(const char *attr, PyObject *value) override;   // __setattr__ function

    /// getter for the object handled by this class
    HLRBRep_Algo *getHLRBRep_AlgoPtr() const;

    /** @name additional declarations and methods for the wrapper class */
    //@{

private:
    Handle(HLRBRep_Algo) hAlgo;

public:
    Handle(HLRBRep_Algo) handle() {
        return hAlgo;
    }
    
    //@}
};

}  //namespace Part

#endif  // PART_HLRBREP_ALGOPY_H


