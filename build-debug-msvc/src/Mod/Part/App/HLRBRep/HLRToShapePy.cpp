
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the .XML file
// Every change you make here gets lost in the next full rebuild!
// This File is normally built as an include in HLRToShapePyImp.cpp! It's not intended to be in a project!

#include <boost/filesystem/path.hpp>
#include <boost/filesystem/operations.hpp>
#include <boost/filesystem/exception.hpp>
#include <Base/PyObjectBase.h>
#include <Base/Console.h>
#include <Base/Exception.h>
#include <CXX/Objects.hxx>

#if defined(__clang__)
# pragma clang diagnostic push
# pragma clang diagnostic ignored "-Wdeprecated-declarations"
#endif

using Base::streq;
using namespace Part;

/// Type structure of HLRToShapePy
PyTypeObject HLRToShapePy::Type = {
    PyVarObject_HEAD_INIT(&PyType_Type,0)
    "Part.HLRToShapePy",     /*tp_name*/
    sizeof(HLRToShapePy),                       /*tp_basicsize*/
    0,                                                /*tp_itemsize*/
    /* methods */
    PyDestructor,                                     /*tp_dealloc*/
#if PY_VERSION_HEX >= 0x03080000
    0,                                                /*tp_vectorcall_offset*/
#else
    nullptr,                                          /*tp_print*/
#endif
    nullptr,                                          /*tp_getattr*/
    nullptr,                                          /*tp_setattr*/
    nullptr,                                          /*tp_compare*/
    __repr,                                           /*tp_repr*/
    nullptr,                                          /*tp_as_number*/
    nullptr,                                          /*tp_as_sequence*/
    nullptr,                                          /*tp_as_mapping*/
    nullptr,                                          /*tp_hash*/
    nullptr,                                          /*tp_call */
    nullptr,                                          /*tp_str  */
    __getattro,                                       /*tp_getattro*/
    __setattro,                                       /*tp_setattro*/
    /* --- Functions to access object as input/output buffer ---------*/
    nullptr,                                          /* tp_as_buffer */
    /* --- Flags to define presence of optional/expanded features */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT,        /*tp_flags */
    "HLRToShape(algo: HLRBRep_Algo) -> HLRBRep_HLRToShape\n"
    "\n"
    "A framework for filtering the computation results of an HLRBRep_Algo algorithm\n"
    "by extraction. From the results calculated by the algorithm on a shape, a\n"
    "filter returns the type of edge you want to identify. You can choose any of the\n"
    "following types of output:\n"
    "- visible sharp edges\n"
    "- hidden sharp edges\n"
    "- visible smooth edges\n"
    "- hidden smooth edges\n"
    "- visible sewn edges\n"
    "- hidden sewn edges\n"
    "- visible outline edges\n"
    "- hidden outline edges\n"
    "- visible isoparameters and\n"
    "- hidden isoparameters.\n"
    "\n"
    "Sharp edges present a C0 continuity (non G1). Smooth edges present a G1\n"
    "continuity (non G2). Sewn edges present a C2 continuity. The result is composed\n"
    "of 2D edges in the projection plane of the view which the algorithm has worked\n"
    "with. These 2D edges are not included in the data structure of the visualized\n"
    "shape. In order to obtain a complete image, you must combine the shapes given\n"
    "by each of the chosen filters. The construction of the shape does not call a\n"
    "new computation of the algorithm, but only reads its internal results. The\n"
    "methods of this shape are almost identic to those of the HLRBrep_PolyHLRToShape\n"
    "class.",           /*tp_doc */
    nullptr,                                          /*tp_traverse */
    nullptr,                                          /*tp_clear */
    nullptr,                                          /*tp_richcompare */
    0,                                                /*tp_weaklistoffset */
    nullptr,                                          /*tp_iter */
    nullptr,                                          /*tp_iternext */
    Part::HLRToShapePy::Methods,                     /*tp_methods */
    nullptr,                                          /*tp_members */
    Part::HLRToShapePy::GetterSetter,                     /*tp_getset */
    &Base::PyObjectBase::Type,                        /*tp_base */
    nullptr,                                          /*tp_dict */
    nullptr,                                          /*tp_descr_get */
    nullptr,                                          /*tp_descr_set */
    0,                                                /*tp_dictoffset */
    __PyInit,                                         /*tp_init */
    nullptr,                                          /*tp_alloc */
    Part::HLRToShapePy::PyMake,/*tp_new */
    nullptr,                                          /*tp_free   Low-level free-memory routine */
    nullptr,                                          /*tp_is_gc  For PyObject_IS_GC */
    nullptr,                                          /*tp_bases */
    nullptr,                                          /*tp_mro    method resolution order */
    nullptr,                                          /*tp_cache */
    nullptr,                                          /*tp_subclasses */
    nullptr,                                          /*tp_weaklist */
    nullptr,                                          /*tp_del */
    0,                                                /*tp_version_tag */
    nullptr                                           /*tp_finalize */
#if PY_VERSION_HEX >= 0x03090000
    ,nullptr                                          /*tp_vectorcall */
#if PY_VERSION_HEX >= 0x030c0000
    ,0                                                /*tp_watched */
#endif
#elif PY_VERSION_HEX >= 0x03080000
    ,nullptr                                          /*tp_vectorcall */
    /* bpo-37250: kept for backwards compatibility in CPython 3.8 only */
    ,nullptr                                          /*tp_print */
#endif
};

/// Methods structure of HLRToShapePy
PyMethodDef HLRToShapePy::Methods[] = {
    {"vCompound",
        reinterpret_cast<PyCFunction>( staticCallback_vCompound ),
        METH_VARARGS,
        "vCompound(Shape=None) -> TopoShape\n"
        "\n"
        "Sets the extraction filter for visible sharp edges for either shape Shape or\n"
        "for all added shapes (Shape=None)."
    },
    {"Rg1LineVCompound",
        reinterpret_cast<PyCFunction>( staticCallback_Rg1LineVCompound ),
        METH_VARARGS,
        "Rg1LineVCompound(Shape=None) -> TopoShape\n"
        "\n"
        "Sets the extraction filter for visible smooth edges for either shape Shape or\n"
        "for all added shapes (Shape=None)."
    },
    {"RgNLineVCompound",
        reinterpret_cast<PyCFunction>( staticCallback_RgNLineVCompound ),
        METH_VARARGS,
        "RgNLineVCompound(Shape=None) -> TopoShape\n"
        "\n"
        "Sets the extraction filter for visible sewn edges for either shape Shape or for\n"
        "all added shapes (Shape=None)."
    },
    {"outLineVCompound",
        reinterpret_cast<PyCFunction>( staticCallback_outLineVCompound ),
        METH_VARARGS,
        "outLineVCompound(Shape=None) -> TopoShape\n"
        "\n"
        "Sets the extraction filter for visible outline edges for either shape Shape or\n"
        "for all added shapes (Shape=None)."
    },
    {"outLineVCompound3d",
        reinterpret_cast<PyCFunction>( staticCallback_outLineVCompound3d ),
        METH_VARARGS,
        "outLineVCompound(Shape=None) -> TopoShape\n"
        "\n"
        "Sets the extraction filter for visible outline edges in 3D for either shape\n"
        "Shape or for all added shapes (Shape=None)."
    },
    {"isoLineVCompound",
        reinterpret_cast<PyCFunction>( staticCallback_isoLineVCompound ),
        METH_VARARGS,
        "isoLineVCompound(Shape=None) -> TopoShape\n"
        "\n"
        "Sets the extraction filter for visible isoparameters for either shape Shape or\n"
        "for all added shapes (Shape=None)."
    },
    {"hCompound",
        reinterpret_cast<PyCFunction>( staticCallback_hCompound ),
        METH_VARARGS,
        "hCompound(Shape=None) -> TopoShape\n"
        "\n"
        "Sets the extraction filter for hidden sharp edges for either shape Shape or for\n"
        "all added shapes (Shape=None)."
    },
    {"Rg1LineHCompound",
        reinterpret_cast<PyCFunction>( staticCallback_Rg1LineHCompound ),
        METH_VARARGS,
        "Rg1LineHCompound(Shape=None) -> TopoShape\n"
        "\n"
        "Sets the extraction filter for hidden smooth edges for either shape Shape or\n"
        "for all added shapes (Shape=None)."
    },
    {"RgNLineHCompound",
        reinterpret_cast<PyCFunction>( staticCallback_RgNLineHCompound ),
        METH_VARARGS,
        "RgNLineHCompound(Shape=None) -> TopoShape\n"
        "\n"
        "Sets the extraction filter for hidden sewn edges for either shape Shape or for\n"
        "all added shapes (Shape=None)."
    },
    {"outLineHCompound",
        reinterpret_cast<PyCFunction>( staticCallback_outLineHCompound ),
        METH_VARARGS,
        "outLineHCompound(Shape=None) -> TopoShape\n"
        "\n"
        "Sets the extraction filter for hidden outline edges for either shape Shape or\n"
        "for all added shapes (Shape=None)."
    },
    {"isoLineHCompound",
        reinterpret_cast<PyCFunction>( staticCallback_isoLineHCompound ),
        METH_VARARGS,
        "isoLineHCompound(Shape=None) -> TopoShape\n"
        "\n"
        "Sets the extraction filter for hidden isoparameters for either shape Shape or\n"
        "for all added shapes (Shape=None)."
    },
    {"compoundOfEdges",
        reinterpret_cast<PyCFunction>(reinterpret_cast<void (*) ()>( staticCallback_compoundOfEdges )),
        METH_VARARGS|METH_KEYWORDS,
        "compoundOfEdges(Type: int, Visible: bool, In3D: bool, Shape=None) -> TopoShape\n"
        "\n"
        "Returns compound of resulting edges of required type and visibility, taking\n"
        "into account the kind of space (2d or 3d).  If Shape=None, return it for all\n"
        "added shapes, otherwise return it for shape Shape."
    },
    {nullptr, nullptr, 0, nullptr}		/* Sentinel */
};



/// Attribute structure of HLRToShapePy
PyGetSetDef HLRToShapePy::GetterSetter[] = {
    {nullptr, nullptr, nullptr, nullptr, nullptr}		/* Sentinel */
};

// vCompound() callback and implementer
// PyObject*  HLRToShapePy::vCompound(PyObject *args){};
// has to be implemented in HLRToShapePyImp.cpp
PyObject * HLRToShapePy::staticCallback_vCompound (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'vCompound' of 'Part.HLRBRep_HLRToShape' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<HLRToShapePy*>(self)->vCompound(args);
        if (ret != nullptr)
            static_cast<HLRToShapePy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// Rg1LineVCompound() callback and implementer
// PyObject*  HLRToShapePy::Rg1LineVCompound(PyObject *args){};
// has to be implemented in HLRToShapePyImp.cpp
PyObject * HLRToShapePy::staticCallback_Rg1LineVCompound (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'Rg1LineVCompound' of 'Part.HLRBRep_HLRToShape' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<HLRToShapePy*>(self)->Rg1LineVCompound(args);
        if (ret != nullptr)
            static_cast<HLRToShapePy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// RgNLineVCompound() callback and implementer
// PyObject*  HLRToShapePy::RgNLineVCompound(PyObject *args){};
// has to be implemented in HLRToShapePyImp.cpp
PyObject * HLRToShapePy::staticCallback_RgNLineVCompound (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'RgNLineVCompound' of 'Part.HLRBRep_HLRToShape' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<HLRToShapePy*>(self)->RgNLineVCompound(args);
        if (ret != nullptr)
            static_cast<HLRToShapePy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// outLineVCompound() callback and implementer
// PyObject*  HLRToShapePy::outLineVCompound(PyObject *args){};
// has to be implemented in HLRToShapePyImp.cpp
PyObject * HLRToShapePy::staticCallback_outLineVCompound (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'outLineVCompound' of 'Part.HLRBRep_HLRToShape' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<HLRToShapePy*>(self)->outLineVCompound(args);
        if (ret != nullptr)
            static_cast<HLRToShapePy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// outLineVCompound3d() callback and implementer
// PyObject*  HLRToShapePy::outLineVCompound3d(PyObject *args){};
// has to be implemented in HLRToShapePyImp.cpp
PyObject * HLRToShapePy::staticCallback_outLineVCompound3d (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'outLineVCompound3d' of 'Part.HLRBRep_HLRToShape' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<HLRToShapePy*>(self)->outLineVCompound3d(args);
        if (ret != nullptr)
            static_cast<HLRToShapePy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// isoLineVCompound() callback and implementer
// PyObject*  HLRToShapePy::isoLineVCompound(PyObject *args){};
// has to be implemented in HLRToShapePyImp.cpp
PyObject * HLRToShapePy::staticCallback_isoLineVCompound (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'isoLineVCompound' of 'Part.HLRBRep_HLRToShape' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<HLRToShapePy*>(self)->isoLineVCompound(args);
        if (ret != nullptr)
            static_cast<HLRToShapePy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// hCompound() callback and implementer
// PyObject*  HLRToShapePy::hCompound(PyObject *args){};
// has to be implemented in HLRToShapePyImp.cpp
PyObject * HLRToShapePy::staticCallback_hCompound (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'hCompound' of 'Part.HLRBRep_HLRToShape' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<HLRToShapePy*>(self)->hCompound(args);
        if (ret != nullptr)
            static_cast<HLRToShapePy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// Rg1LineHCompound() callback and implementer
// PyObject*  HLRToShapePy::Rg1LineHCompound(PyObject *args){};
// has to be implemented in HLRToShapePyImp.cpp
PyObject * HLRToShapePy::staticCallback_Rg1LineHCompound (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'Rg1LineHCompound' of 'Part.HLRBRep_HLRToShape' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<HLRToShapePy*>(self)->Rg1LineHCompound(args);
        if (ret != nullptr)
            static_cast<HLRToShapePy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// RgNLineHCompound() callback and implementer
// PyObject*  HLRToShapePy::RgNLineHCompound(PyObject *args){};
// has to be implemented in HLRToShapePyImp.cpp
PyObject * HLRToShapePy::staticCallback_RgNLineHCompound (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'RgNLineHCompound' of 'Part.HLRBRep_HLRToShape' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<HLRToShapePy*>(self)->RgNLineHCompound(args);
        if (ret != nullptr)
            static_cast<HLRToShapePy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// outLineHCompound() callback and implementer
// PyObject*  HLRToShapePy::outLineHCompound(PyObject *args){};
// has to be implemented in HLRToShapePyImp.cpp
PyObject * HLRToShapePy::staticCallback_outLineHCompound (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'outLineHCompound' of 'Part.HLRBRep_HLRToShape' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<HLRToShapePy*>(self)->outLineHCompound(args);
        if (ret != nullptr)
            static_cast<HLRToShapePy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// isoLineHCompound() callback and implementer
// PyObject*  HLRToShapePy::isoLineHCompound(PyObject *args){};
// has to be implemented in HLRToShapePyImp.cpp
PyObject * HLRToShapePy::staticCallback_isoLineHCompound (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'isoLineHCompound' of 'Part.HLRBRep_HLRToShape' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<HLRToShapePy*>(self)->isoLineHCompound(args);
        if (ret != nullptr)
            static_cast<HLRToShapePy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// compoundOfEdges() callback and implementer
// PyObject*  HLRToShapePy::compoundOfEdges(PyObject *args){};
// has to be implemented in HLRToShapePyImp.cpp
PyObject * HLRToShapePy::staticCallback_compoundOfEdges (PyObject *self, PyObject *args, PyObject * kwd)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'compoundOfEdges' of 'Part.HLRBRep_HLRToShape' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<HLRToShapePy*>(self)->compoundOfEdges(args, kwd);
        if (ret != nullptr)
            static_cast<HLRToShapePy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}




//--------------------------------------------------------------------------
// Constructor
//--------------------------------------------------------------------------
HLRToShapePy::HLRToShapePy(HLRBRep_HLRToShape *pcObject, PyTypeObject *T)
    : PyObjectBase(static_cast<PyObjectBase::PointerType>(pcObject), T)
{
}


//--------------------------------------------------------------------------
// destructor
//--------------------------------------------------------------------------
HLRToShapePy::~HLRToShapePy()                                // Everything handled in parent
{
    // delete the handled object when the PyObject dies
    HLRToShapePy::PointerType ptr = static_cast<HLRToShapePy::PointerType>(_pcTwinPointer);
    delete ptr;
}

//--------------------------------------------------------------------------
// HLRToShapePy representation
//--------------------------------------------------------------------------
PyObject *HLRToShapePy::_repr()
{
    return Py_BuildValue("s", representation().c_str());
}

//--------------------------------------------------------------------------
// HLRToShapePy Attributes
//--------------------------------------------------------------------------
PyObject *HLRToShapePy::_getattr(const char *attr)			// __getattr__ function: note only need to handle new state
{
    try {
        // getter method for special Attributes (e.g. dynamic ones)
        PyObject *r = getCustomAttributes(attr);
        if(r) return r;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError,"Unknown C++ exception");
        return nullptr;
    }
#endif

    PyMethodDef *ml = Methods;
    for (; ml->ml_name != nullptr; ml++) {
        if (attr[0] == ml->ml_name[0] &&
            strcmp(attr+1, ml->ml_name+1) == 0)
            return PyCFunction_New(ml, this);
    }

    PyErr_Clear();
    return PyObjectBase::_getattr(attr);
}

int HLRToShapePy::_setattr(const char *attr, PyObject *value) // __setattr__ function: note only need to handle new state
{
    try {
        // setter for special Attributes (e.g. dynamic ones)
        int r = setCustomAttributes(attr, value);
        // r = 1: handled
        // r = -1: error
        // r = 0: ignore
        if (r == 1)
            return 0;
        else if (r == -1)
            return -1;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return -1;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return -1;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return -1;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return -1;
    }
#endif

    return PyObjectBase::_setattr(attr, value);
}

HLRBRep_HLRToShape *HLRToShapePy::getHLRBRep_HLRToShapePtr() const
{
    return static_cast<HLRBRep_HLRToShape *>(_pcTwinPointer);
}

#if defined(__clang__)
# pragma clang diagnostic pop
#endif

#if 0
/* From here on come the methods you have to implement, but NOT in this module. Implement in HLRToShapePyImp.cpp! This prototypes
 * are just for convenience when you add a new method.
 */

PyObject *HLRToShapePy::PyMake(PyTypeObject* /*type*/, PyObject* /*args*/, PyObject* /*kwds*/)
{
    // create a new instance of HLRToShapePy and the Twin object
    return new HLRToShapePy(new HLRBRep_HLRToShape);
}

// constructor method
int HLRToShapePy::PyInit(PyObject* /*args*/, PyObject* /*kwd*/)
{
    return 0;
}


// returns a string which represents the object e.g. when printed in python
std::string HLRToShapePy::representation() const
{
    return {"<HLRBRep_HLRToShape object>"};
}

PyObject* HLRToShapePy::vCompound(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* HLRToShapePy::Rg1LineVCompound(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* HLRToShapePy::RgNLineVCompound(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* HLRToShapePy::outLineVCompound(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* HLRToShapePy::outLineVCompound3d(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* HLRToShapePy::isoLineVCompound(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* HLRToShapePy::hCompound(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* HLRToShapePy::Rg1LineHCompound(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* HLRToShapePy::RgNLineHCompound(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* HLRToShapePy::outLineHCompound(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* HLRToShapePy::isoLineHCompound(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* HLRToShapePy::compoundOfEdges(PyObject *args, PyObject *kwds)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}



PyObject *HLRToShapePy::getCustomAttributes(const char* /*attr*/) const
{
    return nullptr;
}

int HLRToShapePy::setCustomAttributes(const char* /*attr*/, PyObject* /*obj*/)
{
    return 0;
}


#endif



