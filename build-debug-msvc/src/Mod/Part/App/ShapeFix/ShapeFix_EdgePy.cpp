
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the .XML file
// Every change you make here gets lost in the next full rebuild!
// This File is normally built as an include in ShapeFix_EdgePyImp.cpp! It's not intended to be in a project!

#include <boost/filesystem/path.hpp>
#include <boost/filesystem/operations.hpp>
#include <boost/filesystem/exception.hpp>
#include <Base/PyObjectBase.h>
#include <Base/Console.h>
#include <Base/Exception.h>
#include <CXX/Objects.hxx>

#if defined(__clang__)
# pragma clang diagnostic push
# pragma clang diagnostic ignored "-Wdeprecated-declarations"
#endif

using Base::streq;
using namespace Part;

/// Type structure of ShapeFix_EdgePy
PyTypeObject ShapeFix_EdgePy::Type = {
    PyVarObject_HEAD_INIT(&PyType_Type,0)
    "Part.ShapeFix.Edge",     /*tp_name*/
    sizeof(ShapeFix_EdgePy),                       /*tp_basicsize*/
    0,                                                /*tp_itemsize*/
    /* methods */
    PyDestructor,                                     /*tp_dealloc*/
#if PY_VERSION_HEX >= 0x03080000
    0,                                                /*tp_vectorcall_offset*/
#else
    nullptr,                                          /*tp_print*/
#endif
    nullptr,                                          /*tp_getattr*/
    nullptr,                                          /*tp_setattr*/
    nullptr,                                          /*tp_compare*/
    __repr,                                           /*tp_repr*/
    nullptr,                                          /*tp_as_number*/
    nullptr,                                          /*tp_as_sequence*/
    nullptr,                                          /*tp_as_mapping*/
    nullptr,                                          /*tp_hash*/
    nullptr,                                          /*tp_call */
    nullptr,                                          /*tp_str  */
    __getattro,                                       /*tp_getattro*/
    __setattro,                                       /*tp_setattro*/
    /* --- Functions to access object as input/output buffer ---------*/
    nullptr,                                          /* tp_as_buffer */
    /* --- Flags to define presence of optional/expanded features */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT,        /*tp_flags */
    "Fixing invalid edge",           /*tp_doc */
    nullptr,                                          /*tp_traverse */
    nullptr,                                          /*tp_clear */
    nullptr,                                          /*tp_richcompare */
    0,                                                /*tp_weaklistoffset */
    nullptr,                                          /*tp_iter */
    nullptr,                                          /*tp_iternext */
    Part::ShapeFix_EdgePy::Methods,                     /*tp_methods */
    nullptr,                                          /*tp_members */
    Part::ShapeFix_EdgePy::GetterSetter,                     /*tp_getset */
    &Base::PyObjectBase::Type,                        /*tp_base */
    nullptr,                                          /*tp_dict */
    nullptr,                                          /*tp_descr_get */
    nullptr,                                          /*tp_descr_set */
    0,                                                /*tp_dictoffset */
    __PyInit,                                         /*tp_init */
    nullptr,                                          /*tp_alloc */
    Part::ShapeFix_EdgePy::PyMake,/*tp_new */
    nullptr,                                          /*tp_free   Low-level free-memory routine */
    nullptr,                                          /*tp_is_gc  For PyObject_IS_GC */
    nullptr,                                          /*tp_bases */
    nullptr,                                          /*tp_mro    method resolution order */
    nullptr,                                          /*tp_cache */
    nullptr,                                          /*tp_subclasses */
    nullptr,                                          /*tp_weaklist */
    nullptr,                                          /*tp_del */
    0,                                                /*tp_version_tag */
    nullptr                                           /*tp_finalize */
#if PY_VERSION_HEX >= 0x03090000
    ,nullptr                                          /*tp_vectorcall */
#if PY_VERSION_HEX >= 0x030c0000
    ,0                                                /*tp_watched */
#endif
#elif PY_VERSION_HEX >= 0x03080000
    ,nullptr                                          /*tp_vectorcall */
    /* bpo-37250: kept for backwards compatibility in CPython 3.8 only */
    ,nullptr                                          /*tp_print */
#endif
};

/// Methods structure of ShapeFix_EdgePy
PyMethodDef ShapeFix_EdgePy::Methods[] = {
    {"fixRemovePCurve",
        reinterpret_cast<PyCFunction>( staticCallback_fixRemovePCurve ),
        METH_VARARGS,
        "Removes the pcurve(s) of the edge if it does not match the\n"
        "   vertices\n"
        "   Check is done\n"
        "   Use    : It is to be called when pcurve of an edge can be wrong\n"
        "   (e.g., after import from IGES)\n"
        "   Returns: True, if does not match, removed (status DONE)\n"
        "   False, (status OK) if matches or (status FAIL) if no pcurve,\n"
        "   nothing done."
    },
    {"fixRemoveCurve3d",
        reinterpret_cast<PyCFunction>( staticCallback_fixRemoveCurve3d ),
        METH_VARARGS,
        "Removes 3d curve of the edge if it does not match the vertices\n"
        "   Returns: True,  if does not match, removed (status DONE)\n"
        "   False, (status OK) if matches or (status FAIL) if no 3d curve,\n"
        "   nothing done."
    },
    {"fixAddPCurve",
        reinterpret_cast<PyCFunction>( staticCallback_fixAddPCurve ),
        METH_VARARGS,
        "Adds pcurve(s) of the edge if missing (by projecting 3d curve)\n"
        "   Parameter isSeam indicates if the edge is a seam.\n"
        "   The parameter 'prec' defines the precision for calculations.\n"
        "   If it is 0 (default), the tolerance of the edge is taken.\n"
        "   Remark : This method is rather for internal use since it accepts parameter\n"
        "   'surfana' for optimization of computations\n"
        "   Use    : It is to be called after FixRemovePCurve (if removed) or in any\n"
        "   case when edge can have no pcurve\n"
        "   Returns: True if pcurve was added, else False\n"
        "   Status :\n"
        "   OK   : Pcurve exists\n"
        "   FAIL1: No 3d curve\n"
        "   FAIL2: fail during projecting\n"
        "   DONE1: Pcurve was added\n"
        "   DONE2: specific case of pcurve going through degenerated point on\n"
        "   sphere encountered during projection (see class\n"
        "   ShapeConstruct_ProjectCurveOnSurface for more info)."
    },
    {"fixAddCurve3d",
        reinterpret_cast<PyCFunction>( staticCallback_fixAddCurve3d ),
        METH_VARARGS,
        "Tries to build 3d curve of the edge if missing\n"
        "   Use    : It is to be called after FixRemoveCurve3d (if removed) or in any\n"
        "   case when edge can have no 3d curve\n"
        "   Returns: True if 3d curve was added, else False\n"
        "   Status :\n"
        "   OK   : 3d curve exists\n"
        "   FAIL1: BRepLib::BuildCurve3d() has failed\n"
        "   DONE1: 3d curve was added."
    },
    {"fixVertexTolerance",
        reinterpret_cast<PyCFunction>( staticCallback_fixVertexTolerance ),
        METH_VARARGS,
        "Increases the tolerances of the edge vertices to comprise\n"
        "   the ends of 3d curve and pcurve on the given face\n"
        "   (first method) or all pcurves stored in an edge (second one)\n"
        "   Returns: True, if tolerances have been increased, otherwise False\n"
        "   Status:\n"
        "   OK   : the original tolerances have not been changed\n"
        "   DONE1: the tolerance of first vertex has been increased\n"
        "   DONE2: the tolerance of last  vertex has been increased."
    },
    {"fixReversed2d",
        reinterpret_cast<PyCFunction>( staticCallback_fixReversed2d ),
        METH_VARARGS,
        "Fixes edge if pcurve is directed opposite to 3d curve\n"
        "   Check is done by call to the function\n"
        "   ShapeAnalysis_Edge::CheckCurve3dWithPCurve()\n"
        "   Warning: For seam edge this method will check and fix the pcurve in only\n"
        "   one direction. Hence, it should be called twice for seam edge:\n"
        "   once with edge orientation FORWARD and once with REVERSED.\n"
        "   Returns: False if nothing done, True if reversed (status DONE)\n"
        "   Status:  OK    - pcurve OK, nothing done\n"
        "   FAIL1 - no pcurve\n"
        "   FAIL2 - no 3d curve\n"
        "   DONE1 - pcurve was reversed."
    },
    {"fixSameParameter",
        reinterpret_cast<PyCFunction>( staticCallback_fixSameParameter ),
        METH_VARARGS,
        "Tries to make edge SameParameter and sets corresponding\n"
        "   tolerance and SameParameter flag.\n"
        "   First, it makes edge same range if SameRange flag is not set.\n"
        "   If flag SameParameter is set, this method calls the\n"
        "   function ShapeAnalysis_Edge::CheckSameParameter() that\n"
        "   calculates the maximal deviation of pcurves of the edge from\n"
        "   its 3d curve. If deviation > tolerance, the tolerance of edge\n"
        "   is increased to a value of deviation. If deviation < tolerance\n"
        "   nothing happens.\n"
        "\n"
        "   If flag SameParameter is not set, this method chooses the best\n"
        "   variant (one that has minimal tolerance), either\n"
        "   a. only after computing deviation (as above) or\n"
        "   b. after calling standard procedure BRepLib::SameParameter\n"
        "   and computing deviation (as above). If 'tolerance' > 0, it is\n"
        "   used as parameter for BRepLib::SameParameter, otherwise,\n"
        "   tolerance of the edge is used.\n"
        "\n"
        "   Use    : Is to be called after all pcurves and 3d curve of the edge are\n"
        "   correctly computed\n"
        "   Remark : SameParameter flag is always set to True after this method\n"
        "   Returns: True, if something done, else False\n"
        "   Status : OK    - edge was initially SameParameter, nothing is done\n"
        "   FAIL1 - computation of deviation of pcurves from 3d curve has failed\n"
        "   FAIL2 - BRepLib::SameParameter() has failed\n"
        "   DONE1 - tolerance of the edge was increased\n"
        "   DONE2 - flag SameParameter was set to True (only if\n"
        "   BRepLib::SameParameter() did not set it)\n"
        "   DONE3 - edge was modified by BRepLib::SameParameter() to SameParameter\n"
        "   DONE4 - not used anymore\n"
        "   DONE5 - if the edge resulting from BRepLib has been chosen, i.e. variant b. above\n"
        "   (only for edges with not set SameParameter)."
    },
    {nullptr, nullptr, 0, nullptr}		/* Sentinel */
};



/// Attribute structure of ShapeFix_EdgePy
PyGetSetDef ShapeFix_EdgePy::GetterSetter[] = {
    {nullptr, nullptr, nullptr, nullptr, nullptr}		/* Sentinel */
};

// fixRemovePCurve() callback and implementer
// PyObject*  ShapeFix_EdgePy::fixRemovePCurve(PyObject *args){};
// has to be implemented in ShapeFix_EdgePyImp.cpp
PyObject * ShapeFix_EdgePy::staticCallback_fixRemovePCurve (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'fixRemovePCurve' of 'Part.ShapeFix_Edge' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ShapeFix_EdgePy*>(self)->fixRemovePCurve(args);
        if (ret != nullptr)
            static_cast<ShapeFix_EdgePy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// fixRemoveCurve3d() callback and implementer
// PyObject*  ShapeFix_EdgePy::fixRemoveCurve3d(PyObject *args){};
// has to be implemented in ShapeFix_EdgePyImp.cpp
PyObject * ShapeFix_EdgePy::staticCallback_fixRemoveCurve3d (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'fixRemoveCurve3d' of 'Part.ShapeFix_Edge' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ShapeFix_EdgePy*>(self)->fixRemoveCurve3d(args);
        if (ret != nullptr)
            static_cast<ShapeFix_EdgePy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// fixAddPCurve() callback and implementer
// PyObject*  ShapeFix_EdgePy::fixAddPCurve(PyObject *args){};
// has to be implemented in ShapeFix_EdgePyImp.cpp
PyObject * ShapeFix_EdgePy::staticCallback_fixAddPCurve (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'fixAddPCurve' of 'Part.ShapeFix_Edge' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ShapeFix_EdgePy*>(self)->fixAddPCurve(args);
        if (ret != nullptr)
            static_cast<ShapeFix_EdgePy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// fixAddCurve3d() callback and implementer
// PyObject*  ShapeFix_EdgePy::fixAddCurve3d(PyObject *args){};
// has to be implemented in ShapeFix_EdgePyImp.cpp
PyObject * ShapeFix_EdgePy::staticCallback_fixAddCurve3d (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'fixAddCurve3d' of 'Part.ShapeFix_Edge' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ShapeFix_EdgePy*>(self)->fixAddCurve3d(args);
        if (ret != nullptr)
            static_cast<ShapeFix_EdgePy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// fixVertexTolerance() callback and implementer
// PyObject*  ShapeFix_EdgePy::fixVertexTolerance(PyObject *args){};
// has to be implemented in ShapeFix_EdgePyImp.cpp
PyObject * ShapeFix_EdgePy::staticCallback_fixVertexTolerance (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'fixVertexTolerance' of 'Part.ShapeFix_Edge' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ShapeFix_EdgePy*>(self)->fixVertexTolerance(args);
        if (ret != nullptr)
            static_cast<ShapeFix_EdgePy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// fixReversed2d() callback and implementer
// PyObject*  ShapeFix_EdgePy::fixReversed2d(PyObject *args){};
// has to be implemented in ShapeFix_EdgePyImp.cpp
PyObject * ShapeFix_EdgePy::staticCallback_fixReversed2d (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'fixReversed2d' of 'Part.ShapeFix_Edge' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ShapeFix_EdgePy*>(self)->fixReversed2d(args);
        if (ret != nullptr)
            static_cast<ShapeFix_EdgePy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// fixSameParameter() callback and implementer
// PyObject*  ShapeFix_EdgePy::fixSameParameter(PyObject *args){};
// has to be implemented in ShapeFix_EdgePyImp.cpp
PyObject * ShapeFix_EdgePy::staticCallback_fixSameParameter (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'fixSameParameter' of 'Part.ShapeFix_Edge' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ShapeFix_EdgePy*>(self)->fixSameParameter(args);
        if (ret != nullptr)
            static_cast<ShapeFix_EdgePy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}




//--------------------------------------------------------------------------
// Constructor
//--------------------------------------------------------------------------
ShapeFix_EdgePy::ShapeFix_EdgePy(ShapeFix_Edge *pcObject, PyTypeObject *T)
    : PyObjectBase(static_cast<PyObjectBase::PointerType>(pcObject), T)
{
}


//--------------------------------------------------------------------------
// destructor
//--------------------------------------------------------------------------
ShapeFix_EdgePy::~ShapeFix_EdgePy()                                // Everything handled in parent
{
}

//--------------------------------------------------------------------------
// ShapeFix_EdgePy representation
//--------------------------------------------------------------------------
PyObject *ShapeFix_EdgePy::_repr()
{
    return Py_BuildValue("s", representation().c_str());
}

//--------------------------------------------------------------------------
// ShapeFix_EdgePy Attributes
//--------------------------------------------------------------------------
PyObject *ShapeFix_EdgePy::_getattr(const char *attr)			// __getattr__ function: note only need to handle new state
{
    try {
        // getter method for special Attributes (e.g. dynamic ones)
        PyObject *r = getCustomAttributes(attr);
        if(r) return r;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError,"Unknown C++ exception");
        return nullptr;
    }
#endif

    PyMethodDef *ml = Methods;
    for (; ml->ml_name != nullptr; ml++) {
        if (attr[0] == ml->ml_name[0] &&
            strcmp(attr+1, ml->ml_name+1) == 0)
            return PyCFunction_New(ml, this);
    }

    PyErr_Clear();
    return PyObjectBase::_getattr(attr);
}

int ShapeFix_EdgePy::_setattr(const char *attr, PyObject *value) // __setattr__ function: note only need to handle new state
{
    try {
        // setter for special Attributes (e.g. dynamic ones)
        int r = setCustomAttributes(attr, value);
        // r = 1: handled
        // r = -1: error
        // r = 0: ignore
        if (r == 1)
            return 0;
        else if (r == -1)
            return -1;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return -1;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return -1;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return -1;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return -1;
    }
#endif

    return PyObjectBase::_setattr(attr, value);
}

ShapeFix_Edge *ShapeFix_EdgePy::getShapeFix_EdgePtr() const
{
    return static_cast<ShapeFix_Edge *>(_pcTwinPointer);
}

#if defined(__clang__)
# pragma clang diagnostic pop
#endif

#if 0
/* From here on come the methods you have to implement, but NOT in this module. Implement in ShapeFix_EdgePyImp.cpp! This prototypes
 * are just for convenience when you add a new method.
 */

PyObject *ShapeFix_EdgePy::PyMake(PyTypeObject* /*type*/, PyObject* /*args*/, PyObject* /*kwds*/)
{
    // create a new instance of ShapeFix_EdgePy and the Twin object
    return new ShapeFix_EdgePy(new ShapeFix_Edge);
}

// constructor method
int ShapeFix_EdgePy::PyInit(PyObject* /*args*/, PyObject* /*kwd*/)
{
    return 0;
}


// returns a string which represents the object e.g. when printed in python
std::string ShapeFix_EdgePy::representation() const
{
    return {"<ShapeFix_Edge object>"};
}

PyObject* ShapeFix_EdgePy::fixRemovePCurve(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ShapeFix_EdgePy::fixRemoveCurve3d(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ShapeFix_EdgePy::fixAddPCurve(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ShapeFix_EdgePy::fixAddCurve3d(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ShapeFix_EdgePy::fixVertexTolerance(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ShapeFix_EdgePy::fixReversed2d(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ShapeFix_EdgePy::fixSameParameter(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}



PyObject *ShapeFix_EdgePy::getCustomAttributes(const char* /*attr*/) const
{
    return nullptr;
}

int ShapeFix_EdgePy::setCustomAttributes(const char* /*attr*/, PyObject* /*obj*/)
{
    return 0;
}


#endif



