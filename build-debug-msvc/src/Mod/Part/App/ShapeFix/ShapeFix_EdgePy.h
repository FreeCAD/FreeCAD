
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the XML file
// Every change you make here gets lost in the next full rebuild!
#ifndef PART_SHAPEFIX_EDGEPY_H
#define PART_SHAPEFIX_EDGEPY_H

#include <Base/PyObjectBase.h>
#include <ShapeFix_Edge.hxx>
#include <string>


namespace Part
{

//===========================================================================
// ShapeFix_EdgePy - Python wrapper
//===========================================================================

/** The python export class for ShapeFix_Edge
 */
class PartExport ShapeFix_EdgePy : public Base::PyObjectBase
{
protected:
    ~ShapeFix_EdgePy() override;

public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyGetSetDef    GetterSetter[];
    PyTypeObject *GetType() override {return &Type;}

public:
    ShapeFix_EdgePy(ShapeFix_Edge *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(PyTypeObject *, PyObject *, PyObject *);
    int PyInit(PyObject* args, PyObject*k) override;


    using PointerType = ShapeFix_Edge*;

    PyObject *_repr() override;        // the representation
    std::string representation() const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    /// callback for the fixRemovePCurve() method
    static PyObject * staticCallback_fixRemovePCurve (PyObject *self, PyObject *args);
    /// implementer for the fixRemovePCurve() method
    PyObject*  fixRemovePCurve(PyObject *args);
    /// callback for the fixRemoveCurve3d() method
    static PyObject * staticCallback_fixRemoveCurve3d (PyObject *self, PyObject *args);
    /// implementer for the fixRemoveCurve3d() method
    PyObject*  fixRemoveCurve3d(PyObject *args);
    /// callback for the fixAddPCurve() method
    static PyObject * staticCallback_fixAddPCurve (PyObject *self, PyObject *args);
    /// implementer for the fixAddPCurve() method
    PyObject*  fixAddPCurve(PyObject *args);
    /// callback for the fixAddCurve3d() method
    static PyObject * staticCallback_fixAddCurve3d (PyObject *self, PyObject *args);
    /// implementer for the fixAddCurve3d() method
    PyObject*  fixAddCurve3d(PyObject *args);
    /// callback for the fixVertexTolerance() method
    static PyObject * staticCallback_fixVertexTolerance (PyObject *self, PyObject *args);
    /// implementer for the fixVertexTolerance() method
    PyObject*  fixVertexTolerance(PyObject *args);
    /// callback for the fixReversed2d() method
    static PyObject * staticCallback_fixReversed2d (PyObject *self, PyObject *args);
    /// implementer for the fixReversed2d() method
    PyObject*  fixReversed2d(PyObject *args);
    /// callback for the fixSameParameter() method
    static PyObject * staticCallback_fixSameParameter (PyObject *self, PyObject *args);
    /// implementer for the fixSameParameter() method
    PyObject*  fixSameParameter(PyObject *args);
    //@}


    /** @name callbacks and implementers for the python object attributes */
    //@{
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(const char *attr) override;              // __getattr__ function
    int _setattr(const char *attr, PyObject *value) override;   // __setattr__ function

    /// getter for the object handled by this class
    ShapeFix_Edge *getShapeFix_EdgePtr() const;

    /** @name additional declarations and methods for the wrapper class */
    //@{

private:
    Handle(ShapeFix_Edge) hEdge;

public:
    void setHandle(Handle(ShapeFix_Edge) handle) {
        setTwinPointer(handle.get());
        hEdge = handle;
    }
    
    //@}
};

}  //namespace Part

#endif  // PART_SHAPEFIX_EDGEPY_H


