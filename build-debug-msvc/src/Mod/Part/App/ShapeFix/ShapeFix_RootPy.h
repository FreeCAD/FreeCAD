
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the XML file
// Every change you make here gets lost in the next full rebuild!
#ifndef PART_SHAPEFIX_ROOTPY_H
#define PART_SHAPEFIX_ROOTPY_H

#include <Base/PyObjectBase.h>
#include <ShapeFix_Root.hxx>
#include <string>


namespace Part
{

//===========================================================================
// ShapeFix_RootPy - Python wrapper
//===========================================================================

/** The python export class for ShapeFix_Root
 */
class PartExport ShapeFix_RootPy : public Base::PyObjectBase
{
protected:
    ~ShapeFix_RootPy() override;

public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyGetSetDef    GetterSetter[];
    PyTypeObject *GetType() override {return &Type;}

public:
    ShapeFix_RootPy(ShapeFix_Root *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(PyTypeObject *, PyObject *, PyObject *);
    int PyInit(PyObject* args, PyObject*k) override;


    using PointerType = ShapeFix_Root*;

    PyObject *_repr() override;        // the representation
    std::string representation() const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    /// callback for the limitTolerance() method
    static PyObject * staticCallback_limitTolerance (PyObject *self, PyObject *args);
    /// implementer for the limitTolerance() method
    PyObject*  limitTolerance(PyObject *args);
    //@}


    /** @name callbacks and implementers for the python object attributes */
    //@{
    ///getter callback for the Precision attribute
    static PyObject * staticCallback_getPrecision (PyObject *self, void *closure);
    /// getter for the Precision attribute
    Py::Float getPrecision() const;
    /// setter callback for the Precision attribute
    static int staticCallback_setPrecision (PyObject *self, PyObject *value, void *closure);
    /// setter for the Precision attribute
    void setPrecision(Py::Float arg);
    ///getter callback for the MinTolerance attribute
    static PyObject * staticCallback_getMinTolerance (PyObject *self, void *closure);
    /// getter for the MinTolerance attribute
    Py::Float getMinTolerance() const;
    /// setter callback for the MinTolerance attribute
    static int staticCallback_setMinTolerance (PyObject *self, PyObject *value, void *closure);
    /// setter for the MinTolerance attribute
    void setMinTolerance(Py::Float arg);
    ///getter callback for the MaxTolerance attribute
    static PyObject * staticCallback_getMaxTolerance (PyObject *self, void *closure);
    /// getter for the MaxTolerance attribute
    Py::Float getMaxTolerance() const;
    /// setter callback for the MaxTolerance attribute
    static int staticCallback_setMaxTolerance (PyObject *self, PyObject *value, void *closure);
    /// setter for the MaxTolerance attribute
    void setMaxTolerance(Py::Float arg);
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(const char *attr) override;              // __getattr__ function
    int _setattr(const char *attr, PyObject *value) override;   // __setattr__ function

    /// getter for the object handled by this class
    ShapeFix_Root *getShapeFix_RootPtr() const;

    /** @name additional declarations and methods for the wrapper class */
    //@{

private:
    Handle(ShapeFix_Root) hRoot;

public:
    void setHandle(Handle(ShapeFix_Root) handle) {
        setTwinPointer(handle.get());
        hRoot = handle;
    }
    
    //@}
};

}  //namespace Part

#endif  // PART_SHAPEFIX_ROOTPY_H


