
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the XML file
// Every change you make here gets lost in the next full rebuild!
#ifndef PATH_COMMANDPY_H
#define PATH_COMMANDPY_H

#include <Base/PersistencePy.h>
#include <Mod/CAM/App/Command.h>
#include <string>


namespace Path
{

//===========================================================================
// CommandPy - Python wrapper
//===========================================================================

/** The python export class for Command
 */
class PathExport CommandPy : public Base::PersistencePy
{
protected:
    ~CommandPy() override;

public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyGetSetDef    GetterSetter[];
    PyTypeObject *GetType() override {return &Type;}

public:
    CommandPy(Command *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(PyTypeObject *, PyObject *, PyObject *);
    int PyInit(PyObject* args, PyObject*k) override;


    using PointerType = Command*;

    PyObject *_repr() override;        // the representation
    std::string representation() const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    /// callback for the toGCode() method
    static PyObject * staticCallback_toGCode (PyObject *self, PyObject *args);
    /// implementer for the toGCode() method
    PyObject*  toGCode(PyObject *args);
    /// callback for the setFromGCode() method
    static PyObject * staticCallback_setFromGCode (PyObject *self, PyObject *args);
    /// implementer for the setFromGCode() method
    PyObject*  setFromGCode(PyObject *args);
    /// callback for the transform() method
    static PyObject * staticCallback_transform (PyObject *self, PyObject *args);
    /// implementer for the transform() method
    PyObject*  transform(PyObject *args);
    //@}


    /** @name callbacks and implementers for the python object attributes */
    //@{
    ///getter callback for the Name attribute
    static PyObject * staticCallback_getName (PyObject *self, void *closure);
    /// getter for the Name attribute
    Py::String getName() const;
    /// setter callback for the Name attribute
    static int staticCallback_setName (PyObject *self, PyObject *value, void *closure);
    /// setter for the Name attribute
    void setName(Py::String arg);
    ///getter callback for the Parameters attribute
    static PyObject * staticCallback_getParameters (PyObject *self, void *closure);
    /// getter for the Parameters attribute
    Py::Dict getParameters() const;
    /// setter callback for the Parameters attribute
    static int staticCallback_setParameters (PyObject *self, PyObject *value, void *closure);
    /// setter for the Parameters attribute
    void setParameters(Py::Dict arg);
    ///getter callback for the Placement attribute
    static PyObject * staticCallback_getPlacement (PyObject *self, void *closure);
    /// getter for the Placement attribute
    Py::Object getPlacement() const;
    /// setter callback for the Placement attribute
    static int staticCallback_setPlacement (PyObject *self, PyObject *value, void *closure);
    /// setter for the Placement attribute
    void setPlacement(Py::Object arg);
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(const char *attr) override;              // __getattr__ function
    int _setattr(const char *attr, PyObject *value) override;   // __setattr__ function

    /// getter for the object handled by this class
    Command *getCommandPtr() const;

    /** @name additional declarations and methods for the wrapper class */
    //@{

            mutable Py::Dict parameters_copy_dict;
        
    //@}
};

}  //namespace Path

#endif  // PATH_COMMANDPY_H


