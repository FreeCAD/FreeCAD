
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the XML file
// Every change you make here gets lost in the next full rebuild!
#ifndef PATH_VORONOIEDGEPY_H
#define PATH_VORONOIEDGEPY_H

#include <Base/BaseClassPy.h>
#include <Mod/CAM/App/VoronoiEdge.h>
#include <string>


namespace Path
{

//===========================================================================
// VoronoiEdgePy - Python wrapper
//===========================================================================

/** The python export class for VoronoiEdge
 */
class PathExport VoronoiEdgePy : public Base::BaseClassPy
{
protected:
    ~VoronoiEdgePy() override;

public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyObject * richCompare(PyObject *v, PyObject *w, int op);
    static PyGetSetDef    GetterSetter[];
    PyTypeObject *GetType() override {return &Type;}

public:
    VoronoiEdgePy(VoronoiEdge *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(PyTypeObject *, PyObject *, PyObject *);
    int PyInit(PyObject* args, PyObject*k) override;


    using PointerType = VoronoiEdge*;

    PyObject *_repr() override;        // the representation
    std::string representation() const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    /// callback for the isFinite() method
    static PyObject * staticCallback_isFinite (PyObject *self, PyObject *args);
    /// implementer for the isFinite() method
    PyObject*  isFinite(PyObject *args);
    /// callback for the isInfinite() method
    static PyObject * staticCallback_isInfinite (PyObject *self, PyObject *args);
    /// implementer for the isInfinite() method
    PyObject*  isInfinite(PyObject *args);
    /// callback for the isLinear() method
    static PyObject * staticCallback_isLinear (PyObject *self, PyObject *args);
    /// implementer for the isLinear() method
    PyObject*  isLinear(PyObject *args);
    /// callback for the isCurved() method
    static PyObject * staticCallback_isCurved (PyObject *self, PyObject *args);
    /// implementer for the isCurved() method
    PyObject*  isCurved(PyObject *args);
    /// callback for the isPrimary() method
    static PyObject * staticCallback_isPrimary (PyObject *self, PyObject *args);
    /// implementer for the isPrimary() method
    PyObject*  isPrimary(PyObject *args);
    /// callback for the isSecondary() method
    static PyObject * staticCallback_isSecondary (PyObject *self, PyObject *args);
    /// implementer for the isSecondary() method
    PyObject*  isSecondary(PyObject *args);
    /// callback for the isBorderline() method
    static PyObject * staticCallback_isBorderline (PyObject *self, PyObject *args);
    /// implementer for the isBorderline() method
    PyObject*  isBorderline(PyObject *args);
    /// callback for the toShape() method
    static PyObject * staticCallback_toShape (PyObject *self, PyObject *args);
    /// implementer for the toShape() method
    PyObject*  toShape(PyObject *args);
    /// callback for the getDistances() method
    static PyObject * staticCallback_getDistances (PyObject *self, PyObject *args);
    /// implementer for the getDistances() method
    PyObject*  getDistances(PyObject *args);
    /// callback for the getSegmentAngle() method
    static PyObject * staticCallback_getSegmentAngle (PyObject *self, PyObject *args);
    /// implementer for the getSegmentAngle() method
    PyObject*  getSegmentAngle(PyObject *args);
    //@}


    /** @name callbacks and implementers for the python object attributes */
    //@{
    ///getter callback for the Index attribute
    static PyObject * staticCallback_getIndex (PyObject *self, void *closure);
    /// getter for the Index attribute
    Py::Long getIndex() const;
    /// setter callback for the Index attribute
    static int staticCallback_setIndex (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Index is read only!
    ///getter callback for the Color attribute
    static PyObject * staticCallback_getColor (PyObject *self, void *closure);
    /// getter for the Color attribute
    Py::Long getColor() const;
    /// setter callback for the Color attribute
    static int staticCallback_setColor (PyObject *self, PyObject *value, void *closure);
    /// setter for the Color attribute
    void setColor(Py::Long arg);
    ///getter callback for the Cell attribute
    static PyObject * staticCallback_getCell (PyObject *self, void *closure);
    /// getter for the Cell attribute
    Py::Object getCell() const;
    /// setter callback for the Cell attribute
    static int staticCallback_setCell (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Cell is read only!
    ///getter callback for the Vertices attribute
    static PyObject * staticCallback_getVertices (PyObject *self, void *closure);
    /// getter for the Vertices attribute
    Py::List getVertices() const;
    /// setter callback for the Vertices attribute
    static int staticCallback_setVertices (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Vertices is read only!
    ///getter callback for the Next attribute
    static PyObject * staticCallback_getNext (PyObject *self, void *closure);
    /// getter for the Next attribute
    Py::Object getNext() const;
    /// setter callback for the Next attribute
    static int staticCallback_setNext (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Next is read only!
    ///getter callback for the Prev attribute
    static PyObject * staticCallback_getPrev (PyObject *self, void *closure);
    /// getter for the Prev attribute
    Py::Object getPrev() const;
    /// setter callback for the Prev attribute
    static int staticCallback_setPrev (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Prev is read only!
    ///getter callback for the RotNext attribute
    static PyObject * staticCallback_getRotNext (PyObject *self, void *closure);
    /// getter for the RotNext attribute
    Py::Object getRotNext() const;
    /// setter callback for the RotNext attribute
    static int staticCallback_setRotNext (PyObject *self, PyObject *value, void *closure);
    // no setter method,  RotNext is read only!
    ///getter callback for the RotPrev attribute
    static PyObject * staticCallback_getRotPrev (PyObject *self, void *closure);
    /// getter for the RotPrev attribute
    Py::Object getRotPrev() const;
    /// setter callback for the RotPrev attribute
    static int staticCallback_setRotPrev (PyObject *self, PyObject *value, void *closure);
    // no setter method,  RotPrev is read only!
    ///getter callback for the Twin attribute
    static PyObject * staticCallback_getTwin (PyObject *self, void *closure);
    /// getter for the Twin attribute
    Py::Object getTwin() const;
    /// setter callback for the Twin attribute
    static int staticCallback_setTwin (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Twin is read only!
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(const char *attr) override;              // __getattr__ function
    int _setattr(const char *attr, PyObject *value) override;   // __setattr__ function

    /// getter for the object handled by this class
    VoronoiEdge *getVoronoiEdgePtr() const;

};

}  //namespace Path

#endif  // PATH_VORONOIEDGEPY_H


