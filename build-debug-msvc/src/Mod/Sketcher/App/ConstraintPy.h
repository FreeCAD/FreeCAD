
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the XML file
// Every change you make here gets lost in the next full rebuild!
#ifndef SKETCHER_CONSTRAINTPY_H
#define SKETCHER_CONSTRAINTPY_H

#include <Base/PersistencePy.h>
#include <Mod/Sketcher/App/Constraint.h>
#include <string>


namespace Sketcher
{

//===========================================================================
// ConstraintPy - Python wrapper
//===========================================================================

/** The python export class for Constraint
 */
class SketcherExport ConstraintPy : public Base::PersistencePy
{
protected:
    ~ConstraintPy() override;

public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyGetSetDef    GetterSetter[];
    PyTypeObject *GetType() override {return &Type;}

public:
    ConstraintPy(Constraint *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(PyTypeObject *, PyObject *, PyObject *);
    int PyInit(PyObject* args, PyObject*k) override;


    using PointerType = Constraint*;

    PyObject *_repr() override;        // the representation
    std::string representation() const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    //@}


    /** @name callbacks and implementers for the python object attributes */
    //@{
    ///getter callback for the Type attribute
    static PyObject * staticCallback_getType (PyObject *self, void *closure);
    /// getter for the Type attribute
    Py::String getType() const;
    /// setter callback for the Type attribute
    static int staticCallback_setType (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Type is read only!
    ///getter callback for the First attribute
    static PyObject * staticCallback_getFirst (PyObject *self, void *closure);
    /// getter for the First attribute
    Py::Long getFirst() const;
    /// setter callback for the First attribute
    static int staticCallback_setFirst (PyObject *self, PyObject *value, void *closure);
    /// setter for the First attribute
    void setFirst(Py::Long arg);
    ///getter callback for the FirstPos attribute
    static PyObject * staticCallback_getFirstPos (PyObject *self, void *closure);
    /// getter for the FirstPos attribute
    Py::Long getFirstPos() const;
    /// setter callback for the FirstPos attribute
    static int staticCallback_setFirstPos (PyObject *self, PyObject *value, void *closure);
    /// setter for the FirstPos attribute
    void setFirstPos(Py::Long arg);
    ///getter callback for the Second attribute
    static PyObject * staticCallback_getSecond (PyObject *self, void *closure);
    /// getter for the Second attribute
    Py::Long getSecond() const;
    /// setter callback for the Second attribute
    static int staticCallback_setSecond (PyObject *self, PyObject *value, void *closure);
    /// setter for the Second attribute
    void setSecond(Py::Long arg);
    ///getter callback for the SecondPos attribute
    static PyObject * staticCallback_getSecondPos (PyObject *self, void *closure);
    /// getter for the SecondPos attribute
    Py::Long getSecondPos() const;
    /// setter callback for the SecondPos attribute
    static int staticCallback_setSecondPos (PyObject *self, PyObject *value, void *closure);
    /// setter for the SecondPos attribute
    void setSecondPos(Py::Long arg);
    ///getter callback for the Third attribute
    static PyObject * staticCallback_getThird (PyObject *self, void *closure);
    /// getter for the Third attribute
    Py::Long getThird() const;
    /// setter callback for the Third attribute
    static int staticCallback_setThird (PyObject *self, PyObject *value, void *closure);
    /// setter for the Third attribute
    void setThird(Py::Long arg);
    ///getter callback for the ThirdPos attribute
    static PyObject * staticCallback_getThirdPos (PyObject *self, void *closure);
    /// getter for the ThirdPos attribute
    Py::Long getThirdPos() const;
    /// setter callback for the ThirdPos attribute
    static int staticCallback_setThirdPos (PyObject *self, PyObject *value, void *closure);
    /// setter for the ThirdPos attribute
    void setThirdPos(Py::Long arg);
    ///getter callback for the Value attribute
    static PyObject * staticCallback_getValue (PyObject *self, void *closure);
    /// getter for the Value attribute
    Py::Float getValue() const;
    /// setter callback for the Value attribute
    static int staticCallback_setValue (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Value is read only!
    ///getter callback for the Name attribute
    static PyObject * staticCallback_getName (PyObject *self, void *closure);
    /// getter for the Name attribute
    Py::String getName() const;
    /// setter callback for the Name attribute
    static int staticCallback_setName (PyObject *self, PyObject *value, void *closure);
    /// setter for the Name attribute
    void setName(Py::String arg);
    ///getter callback for the Driving attribute
    static PyObject * staticCallback_getDriving (PyObject *self, void *closure);
    /// getter for the Driving attribute
    Py::Boolean getDriving() const;
    /// setter callback for the Driving attribute
    static int staticCallback_setDriving (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Driving is read only!
    ///getter callback for the InVirtualSpace attribute
    static PyObject * staticCallback_getInVirtualSpace (PyObject *self, void *closure);
    /// getter for the InVirtualSpace attribute
    Py::Boolean getInVirtualSpace() const;
    /// setter callback for the InVirtualSpace attribute
    static int staticCallback_setInVirtualSpace (PyObject *self, PyObject *value, void *closure);
    // no setter method,  InVirtualSpace is read only!
    ///getter callback for the IsActive attribute
    static PyObject * staticCallback_getIsActive (PyObject *self, void *closure);
    /// getter for the IsActive attribute
    Py::Boolean getIsActive() const;
    /// setter callback for the IsActive attribute
    static int staticCallback_setIsActive (PyObject *self, PyObject *value, void *closure);
    // no setter method,  IsActive is read only!
    ///getter callback for the LabelDistance attribute
    static PyObject * staticCallback_getLabelDistance (PyObject *self, void *closure);
    /// getter for the LabelDistance attribute
    Py::Float getLabelDistance() const;
    /// setter callback for the LabelDistance attribute
    static int staticCallback_setLabelDistance (PyObject *self, PyObject *value, void *closure);
    // no setter method,  LabelDistance is read only!
    ///getter callback for the LabelPosition attribute
    static PyObject * staticCallback_getLabelPosition (PyObject *self, void *closure);
    /// getter for the LabelPosition attribute
    Py::Float getLabelPosition() const;
    /// setter callback for the LabelPosition attribute
    static int staticCallback_setLabelPosition (PyObject *self, PyObject *value, void *closure);
    // no setter method,  LabelPosition is read only!
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(const char *attr) override;              // __getattr__ function
    int _setattr(const char *attr, PyObject *value) override;   // __setattr__ function

    /// getter for the object handled by this class
    Constraint *getConstraintPtr() const;

};

}  //namespace Sketcher

#endif  // SKETCHER_CONSTRAINTPY_H


