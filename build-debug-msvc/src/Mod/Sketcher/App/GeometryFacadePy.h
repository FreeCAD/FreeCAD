
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the XML file
// Every change you make here gets lost in the next full rebuild!
#ifndef SKETCHER_GEOMETRYFACADEPY_H
#define SKETCHER_GEOMETRYFACADEPY_H

#include <Base/BaseClassPy.h>
#include <Mod/Sketcher/App/GeometryFacade.h>
#include <string>


namespace Sketcher
{

//===========================================================================
// GeometryFacadePy - Python wrapper
//===========================================================================

/** The python export class for GeometryFacade
 */
class SketcherExport GeometryFacadePy : public Base::BaseClassPy
{
protected:
    ~GeometryFacadePy() override;

public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyGetSetDef    GetterSetter[];
    PyTypeObject *GetType() override {return &Type;}

public:
    GeometryFacadePy(GeometryFacade *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(PyTypeObject *, PyObject *, PyObject *);
    int PyInit(PyObject* args, PyObject*k) override;


    using PointerType = GeometryFacade*;

    PyObject *_repr() override;        // the representation
    std::string representation() const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    /// callback for the testGeometryMode() method
    static PyObject * staticCallback_testGeometryMode (PyObject *self, PyObject *args);
    /// implementer for the testGeometryMode() method
    PyObject*  testGeometryMode(PyObject *args);
    /// callback for the setGeometryMode() method
    static PyObject * staticCallback_setGeometryMode (PyObject *self, PyObject *args);
    /// implementer for the setGeometryMode() method
    PyObject*  setGeometryMode(PyObject *args);
    /// callback for the mirror() method
    static PyObject * staticCallback_mirror (PyObject *self, PyObject *args);
    /// implementer for the mirror() method
    PyObject*  mirror(PyObject *args);
    /// callback for the rotate() method
    static PyObject * staticCallback_rotate (PyObject *self, PyObject *args);
    /// implementer for the rotate() method
    PyObject*  rotate(PyObject *args);
    /// callback for the scale() method
    static PyObject * staticCallback_scale (PyObject *self, PyObject *args);
    /// implementer for the scale() method
    PyObject*  scale(PyObject *args);
    /// callback for the transform() method
    static PyObject * staticCallback_transform (PyObject *self, PyObject *args);
    /// implementer for the transform() method
    PyObject*  transform(PyObject *args);
    /// callback for the translate() method
    static PyObject * staticCallback_translate (PyObject *self, PyObject *args);
    /// implementer for the translate() method
    PyObject*  translate(PyObject *args);
    /// callback for the hasExtensionOfType() method
    static PyObject * staticCallback_hasExtensionOfType (PyObject *self, PyObject *args);
    /// implementer for the hasExtensionOfType() method
    PyObject*  hasExtensionOfType(PyObject *args);
    /// callback for the hasExtensionOfName() method
    static PyObject * staticCallback_hasExtensionOfName (PyObject *self, PyObject *args);
    /// implementer for the hasExtensionOfName() method
    PyObject*  hasExtensionOfName(PyObject *args);
    /// callback for the getExtensionOfType() method
    static PyObject * staticCallback_getExtensionOfType (PyObject *self, PyObject *args);
    /// implementer for the getExtensionOfType() method
    PyObject*  getExtensionOfType(PyObject *args);
    /// callback for the getExtensionOfName() method
    static PyObject * staticCallback_getExtensionOfName (PyObject *self, PyObject *args);
    /// implementer for the getExtensionOfName() method
    PyObject*  getExtensionOfName(PyObject *args);
    /// callback for the setExtension() method
    static PyObject * staticCallback_setExtension (PyObject *self, PyObject *args);
    /// implementer for the setExtension() method
    PyObject*  setExtension(PyObject *args);
    /// callback for the deleteExtensionOfType() method
    static PyObject * staticCallback_deleteExtensionOfType (PyObject *self, PyObject *args);
    /// implementer for the deleteExtensionOfType() method
    PyObject*  deleteExtensionOfType(PyObject *args);
    /// callback for the deleteExtensionOfName() method
    static PyObject * staticCallback_deleteExtensionOfName (PyObject *self, PyObject *args);
    /// implementer for the deleteExtensionOfName() method
    PyObject*  deleteExtensionOfName(PyObject *args);
    /// callback for the getExtensions() method
    static PyObject * staticCallback_getExtensions (PyObject *self, PyObject *args);
    /// implementer for the getExtensions() method
    PyObject*  getExtensions(PyObject *args);
    //@}


    /** @name callbacks and implementers for the python object attributes */
    //@{
    ///getter callback for the Id attribute
    static PyObject * staticCallback_getId (PyObject *self, void *closure);
    /// getter for the Id attribute
    Py::Long getId() const;
    /// setter callback for the Id attribute
    static int staticCallback_setId (PyObject *self, PyObject *value, void *closure);
    /// setter for the Id attribute
    void setId(Py::Long arg);
    ///getter callback for the InternalType attribute
    static PyObject * staticCallback_getInternalType (PyObject *self, void *closure);
    /// getter for the InternalType attribute
    Py::String getInternalType() const;
    /// setter callback for the InternalType attribute
    static int staticCallback_setInternalType (PyObject *self, PyObject *value, void *closure);
    /// setter for the InternalType attribute
    void setInternalType(Py::String arg);
    ///getter callback for the Blocked attribute
    static PyObject * staticCallback_getBlocked (PyObject *self, void *closure);
    /// getter for the Blocked attribute
    Py::Boolean getBlocked() const;
    /// setter callback for the Blocked attribute
    static int staticCallback_setBlocked (PyObject *self, PyObject *value, void *closure);
    /// setter for the Blocked attribute
    void setBlocked(Py::Boolean arg);
    ///getter callback for the Construction attribute
    static PyObject * staticCallback_getConstruction (PyObject *self, void *closure);
    /// getter for the Construction attribute
    Py::Boolean getConstruction() const;
    /// setter callback for the Construction attribute
    static int staticCallback_setConstruction (PyObject *self, PyObject *value, void *closure);
    /// setter for the Construction attribute
    void setConstruction(Py::Boolean arg);
    ///getter callback for the GeometryLayerId attribute
    static PyObject * staticCallback_getGeometryLayerId (PyObject *self, void *closure);
    /// getter for the GeometryLayerId attribute
    Py::Long getGeometryLayerId() const;
    /// setter callback for the GeometryLayerId attribute
    static int staticCallback_setGeometryLayerId (PyObject *self, PyObject *value, void *closure);
    /// setter for the GeometryLayerId attribute
    void setGeometryLayerId(Py::Long arg);
    ///getter callback for the Tag attribute
    static PyObject * staticCallback_getTag (PyObject *self, void *closure);
    /// getter for the Tag attribute
    Py::String getTag() const;
    /// setter callback for the Tag attribute
    static int staticCallback_setTag (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Tag is read only!
    ///getter callback for the Geometry attribute
    static PyObject * staticCallback_getGeometry (PyObject *self, void *closure);
    /// getter for the Geometry attribute
    Py::Object getGeometry() const;
    /// setter callback for the Geometry attribute
    static int staticCallback_setGeometry (PyObject *self, PyObject *value, void *closure);
    /// setter for the Geometry attribute
    void setGeometry(Py::Object arg);
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(const char *attr) override;              // __getattr__ function
    int _setattr(const char *attr, PyObject *value) override;   // __setattr__ function

    /// getter for the object handled by this class
    GeometryFacade *getGeometryFacadePtr() const;

};

}  //namespace Sketcher

#endif  // SKETCHER_GEOMETRYFACADEPY_H


