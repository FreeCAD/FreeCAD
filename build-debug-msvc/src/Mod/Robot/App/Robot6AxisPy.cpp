
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the .XML file
// Every change you make here gets lost in the next full rebuild!
// This File is normally built as an include in Robot6AxisPyImp.cpp! It's not intended to be in a project!

#include <boost/filesystem/path.hpp>
#include <boost/filesystem/operations.hpp>
#include <boost/filesystem/exception.hpp>
#include <Base/PyObjectBase.h>
#include <Base/Console.h>
#include <Base/Exception.h>
#include <CXX/Objects.hxx>

#if defined(__clang__)
# pragma clang diagnostic push
# pragma clang diagnostic ignored "-Wdeprecated-declarations"
#endif

using Base::streq;
using namespace Robot;

/// Type structure of Robot6AxisPy
PyTypeObject Robot6AxisPy::Type = {
    PyVarObject_HEAD_INIT(&PyType_Type,0)
    "Robot.Robot6Axis",     /*tp_name*/
    sizeof(Robot6AxisPy),                       /*tp_basicsize*/
    0,                                                /*tp_itemsize*/
    /* methods */
    PyDestructor,                                     /*tp_dealloc*/
#if PY_VERSION_HEX >= 0x03080000
    0,                                                /*tp_vectorcall_offset*/
#else
    nullptr,                                          /*tp_print*/
#endif
    nullptr,                                          /*tp_getattr*/
    nullptr,                                          /*tp_setattr*/
    nullptr,                                          /*tp_compare*/
    __repr,                                           /*tp_repr*/
    nullptr,                                          /*tp_as_number*/
    nullptr,                                          /*tp_as_sequence*/
    nullptr,                                          /*tp_as_mapping*/
    nullptr,                                          /*tp_hash*/
    nullptr,                                          /*tp_call */
    nullptr,                                          /*tp_str  */
    __getattro,                                       /*tp_getattro*/
    __setattro,                                       /*tp_setattro*/
    /* --- Functions to access object as input/output buffer ---------*/
    nullptr,                                          /* tp_as_buffer */
    /* --- Flags to define presence of optional/expanded features */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT,        /*tp_flags */
    "Robot6Axis class",           /*tp_doc */
    nullptr,                                          /*tp_traverse */
    nullptr,                                          /*tp_clear */
    nullptr,                                          /*tp_richcompare */
    0,                                                /*tp_weaklistoffset */
    nullptr,                                          /*tp_iter */
    nullptr,                                          /*tp_iternext */
    Robot::Robot6AxisPy::Methods,                     /*tp_methods */
    nullptr,                                          /*tp_members */
    Robot::Robot6AxisPy::GetterSetter,                     /*tp_getset */
    &Base::PersistencePy::Type,                        /*tp_base */
    nullptr,                                          /*tp_dict */
    nullptr,                                          /*tp_descr_get */
    nullptr,                                          /*tp_descr_set */
    0,                                                /*tp_dictoffset */
    __PyInit,                                         /*tp_init */
    nullptr,                                          /*tp_alloc */
    Robot::Robot6AxisPy::PyMake,/*tp_new */
    nullptr,                                          /*tp_free   Low-level free-memory routine */
    nullptr,                                          /*tp_is_gc  For PyObject_IS_GC */
    nullptr,                                          /*tp_bases */
    nullptr,                                          /*tp_mro    method resolution order */
    nullptr,                                          /*tp_cache */
    nullptr,                                          /*tp_subclasses */
    nullptr,                                          /*tp_weaklist */
    nullptr,                                          /*tp_del */
    0,                                                /*tp_version_tag */
    nullptr                                           /*tp_finalize */
#if PY_VERSION_HEX >= 0x03090000
    ,nullptr                                          /*tp_vectorcall */
#if PY_VERSION_HEX >= 0x030c0000
    ,0                                                /*tp_watched */
#endif
#elif PY_VERSION_HEX >= 0x03080000
    ,nullptr                                          /*tp_vectorcall */
    /* bpo-37250: kept for backwards compatibility in CPython 3.8 only */
    ,nullptr                                          /*tp_print */
#endif
};

/// Methods structure of Robot6AxisPy
PyMethodDef Robot6AxisPy::Methods[] = {
    {"check",
        reinterpret_cast<PyCFunction>( staticCallback_check ),
        METH_VARARGS,
        "Checks the shape and report errors in the shape structure.\n"
        "This is a more detailed check as done in isValid()."
    },
    {nullptr, nullptr, 0, nullptr}		/* Sentinel */
};



/// Attribute structure of Robot6AxisPy
PyGetSetDef Robot6AxisPy::GetterSetter[] = {
    {"Axis1",
        (getter) staticCallback_getAxis1,
        (setter) staticCallback_setAxis1,
        "Pose of Axis 1 in degrees",
        nullptr
    },
    {"Axis2",
        (getter) staticCallback_getAxis2,
        (setter) staticCallback_setAxis2,
        "Pose of Axis 2 in degrees",
        nullptr
    },
    {"Axis3",
        (getter) staticCallback_getAxis3,
        (setter) staticCallback_setAxis3,
        "Pose of Axis 3 in degrees",
        nullptr
    },
    {"Axis4",
        (getter) staticCallback_getAxis4,
        (setter) staticCallback_setAxis4,
        "Pose of Axis 4 in degrees",
        nullptr
    },
    {"Axis5",
        (getter) staticCallback_getAxis5,
        (setter) staticCallback_setAxis5,
        "Pose of Axis 5 in degrees",
        nullptr
    },
    {"Axis6",
        (getter) staticCallback_getAxis6,
        (setter) staticCallback_setAxis6,
        "Pose of Axis 6 in degrees",
        nullptr
    },
    {"Tcp",
        (getter) staticCallback_getTcp,
        (setter) staticCallback_setTcp,
        "Tool center point frame. Where the tool of the robot is",
        nullptr
    },
    {"Base",
        (getter) staticCallback_getBase,
        (setter) staticCallback_setBase,
        "Actual Base system in respect to the robot world system",
        nullptr
    },
    {nullptr, nullptr, nullptr, nullptr, nullptr}		/* Sentinel */
};

// check() callback and implementer
// PyObject*  Robot6AxisPy::check(PyObject *args){};
// has to be implemented in Robot6AxisPyImp.cpp
PyObject * Robot6AxisPy::staticCallback_check (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'check' of 'Robot.Robot6Axis' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<Robot6AxisPy*>(self)->check(args);
        if (ret != nullptr)
            static_cast<Robot6AxisPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// Axis1() callback and implementer
// PyObject*  Robot6AxisPy::Axis1(PyObject *args){};
// has to be implemented in Robot6AxisPyImp.cpp
PyObject * Robot6AxisPy::staticCallback_getAxis1 (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<Robot6AxisPy*>(self)->getAxis1());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Axis1' of object 'Robot6Axis'");
        return nullptr;
    }
}

int Robot6AxisPy::staticCallback_setAxis1 (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<Robot6AxisPy*>(self)->setAxis1(Py::Float(PyNumber_Float(value),true));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'Axis1' of object 'Robot6Axis'");
        return -1;
    }
}

// Axis2() callback and implementer
// PyObject*  Robot6AxisPy::Axis2(PyObject *args){};
// has to be implemented in Robot6AxisPyImp.cpp
PyObject * Robot6AxisPy::staticCallback_getAxis2 (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<Robot6AxisPy*>(self)->getAxis2());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Axis2' of object 'Robot6Axis'");
        return nullptr;
    }
}

int Robot6AxisPy::staticCallback_setAxis2 (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<Robot6AxisPy*>(self)->setAxis2(Py::Float(PyNumber_Float(value),true));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'Axis2' of object 'Robot6Axis'");
        return -1;
    }
}

// Axis3() callback and implementer
// PyObject*  Robot6AxisPy::Axis3(PyObject *args){};
// has to be implemented in Robot6AxisPyImp.cpp
PyObject * Robot6AxisPy::staticCallback_getAxis3 (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<Robot6AxisPy*>(self)->getAxis3());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Axis3' of object 'Robot6Axis'");
        return nullptr;
    }
}

int Robot6AxisPy::staticCallback_setAxis3 (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<Robot6AxisPy*>(self)->setAxis3(Py::Float(PyNumber_Float(value),true));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'Axis3' of object 'Robot6Axis'");
        return -1;
    }
}

// Axis4() callback and implementer
// PyObject*  Robot6AxisPy::Axis4(PyObject *args){};
// has to be implemented in Robot6AxisPyImp.cpp
PyObject * Robot6AxisPy::staticCallback_getAxis4 (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<Robot6AxisPy*>(self)->getAxis4());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Axis4' of object 'Robot6Axis'");
        return nullptr;
    }
}

int Robot6AxisPy::staticCallback_setAxis4 (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<Robot6AxisPy*>(self)->setAxis4(Py::Float(PyNumber_Float(value),true));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'Axis4' of object 'Robot6Axis'");
        return -1;
    }
}

// Axis5() callback and implementer
// PyObject*  Robot6AxisPy::Axis5(PyObject *args){};
// has to be implemented in Robot6AxisPyImp.cpp
PyObject * Robot6AxisPy::staticCallback_getAxis5 (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<Robot6AxisPy*>(self)->getAxis5());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Axis5' of object 'Robot6Axis'");
        return nullptr;
    }
}

int Robot6AxisPy::staticCallback_setAxis5 (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<Robot6AxisPy*>(self)->setAxis5(Py::Float(PyNumber_Float(value),true));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'Axis5' of object 'Robot6Axis'");
        return -1;
    }
}

// Axis6() callback and implementer
// PyObject*  Robot6AxisPy::Axis6(PyObject *args){};
// has to be implemented in Robot6AxisPyImp.cpp
PyObject * Robot6AxisPy::staticCallback_getAxis6 (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<Robot6AxisPy*>(self)->getAxis6());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Axis6' of object 'Robot6Axis'");
        return nullptr;
    }
}

int Robot6AxisPy::staticCallback_setAxis6 (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<Robot6AxisPy*>(self)->setAxis6(Py::Float(PyNumber_Float(value),true));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'Axis6' of object 'Robot6Axis'");
        return -1;
    }
}

// Tcp() callback and implementer
// PyObject*  Robot6AxisPy::Tcp(PyObject *args){};
// has to be implemented in Robot6AxisPyImp.cpp
PyObject * Robot6AxisPy::staticCallback_getTcp (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<Robot6AxisPy*>(self)->getTcp());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Tcp' of object 'Robot6Axis'");
        return nullptr;
    }
}

int Robot6AxisPy::staticCallback_setTcp (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<Robot6AxisPy*>(self)->setTcp(Py::Object(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'Tcp' of object 'Robot6Axis'");
        return -1;
    }
}

// Base() callback and implementer
// PyObject*  Robot6AxisPy::Base(PyObject *args){};
// has to be implemented in Robot6AxisPyImp.cpp
PyObject * Robot6AxisPy::staticCallback_getBase (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<Robot6AxisPy*>(self)->getBase());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Base' of object 'Robot6Axis'");
        return nullptr;
    }
}

int Robot6AxisPy::staticCallback_setBase (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<Robot6AxisPy*>(self)->setBase(Py::Object(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'Base' of object 'Robot6Axis'");
        return -1;
    }
}




//--------------------------------------------------------------------------
// Constructor
//--------------------------------------------------------------------------
Robot6AxisPy::Robot6AxisPy(Robot6Axis *pcObject, PyTypeObject *T)
    : PersistencePy(static_cast<PersistencePy::PointerType>(pcObject), T)
{
}


//--------------------------------------------------------------------------
// destructor
//--------------------------------------------------------------------------
Robot6AxisPy::~Robot6AxisPy()                                // Everything handled in parent
{
    // delete the handled object when the PyObject dies
    Robot6AxisPy::PointerType ptr = static_cast<Robot6AxisPy::PointerType>(_pcTwinPointer);
    delete ptr;
}

//--------------------------------------------------------------------------
// Robot6AxisPy representation
//--------------------------------------------------------------------------
PyObject *Robot6AxisPy::_repr()
{
    return Py_BuildValue("s", representation().c_str());
}

//--------------------------------------------------------------------------
// Robot6AxisPy Attributes
//--------------------------------------------------------------------------
PyObject *Robot6AxisPy::_getattr(const char *attr)			// __getattr__ function: note only need to handle new state
{
    try {
        // getter method for special Attributes (e.g. dynamic ones)
        PyObject *r = getCustomAttributes(attr);
        if(r) return r;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError,"Unknown C++ exception");
        return nullptr;
    }
#endif

    PyMethodDef *ml = Methods;
    for (; ml->ml_name != nullptr; ml++) {
        if (attr[0] == ml->ml_name[0] &&
            strcmp(attr+1, ml->ml_name+1) == 0)
            return PyCFunction_New(ml, this);
    }

    PyErr_Clear();
    return PersistencePy::_getattr(attr);
}

int Robot6AxisPy::_setattr(const char *attr, PyObject *value) // __setattr__ function: note only need to handle new state
{
    try {
        // setter for special Attributes (e.g. dynamic ones)
        int r = setCustomAttributes(attr, value);
        // r = 1: handled
        // r = -1: error
        // r = 0: ignore
        if (r == 1)
            return 0;
        else if (r == -1)
            return -1;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return -1;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return -1;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return -1;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return -1;
    }
#endif

    return PersistencePy::_setattr(attr, value);
}

Robot6Axis *Robot6AxisPy::getRobot6AxisPtr() const
{
    return static_cast<Robot6Axis *>(_pcTwinPointer);
}

#if defined(__clang__)
# pragma clang diagnostic pop
#endif

#if 0
/* From here on come the methods you have to implement, but NOT in this module. Implement in Robot6AxisPyImp.cpp! This prototypes
 * are just for convenience when you add a new method.
 */

PyObject *Robot6AxisPy::PyMake(PyTypeObject* /*type*/, PyObject* /*args*/, PyObject* /*kwds*/)
{
    // create a new instance of Robot6AxisPy and the Twin object
    return new Robot6AxisPy(new Robot6Axis);
}

// constructor method
int Robot6AxisPy::PyInit(PyObject* /*args*/, PyObject* /*kwd*/)
{
    return 0;
}


// returns a string which represents the object e.g. when printed in python
std::string Robot6AxisPy::representation() const
{
    return {"<Robot6Axis object>"};
}

PyObject* Robot6AxisPy::check(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}



Py::Float Robot6AxisPy::getAxis1() const
{
    //return Py::Float();
    throw Py::AttributeError("Not yet implemented");
}

void  Robot6AxisPy::setAxis1(Py::Float arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Float Robot6AxisPy::getAxis2() const
{
    //return Py::Float();
    throw Py::AttributeError("Not yet implemented");
}

void  Robot6AxisPy::setAxis2(Py::Float arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Float Robot6AxisPy::getAxis3() const
{
    //return Py::Float();
    throw Py::AttributeError("Not yet implemented");
}

void  Robot6AxisPy::setAxis3(Py::Float arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Float Robot6AxisPy::getAxis4() const
{
    //return Py::Float();
    throw Py::AttributeError("Not yet implemented");
}

void  Robot6AxisPy::setAxis4(Py::Float arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Float Robot6AxisPy::getAxis5() const
{
    //return Py::Float();
    throw Py::AttributeError("Not yet implemented");
}

void  Robot6AxisPy::setAxis5(Py::Float arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Float Robot6AxisPy::getAxis6() const
{
    //return Py::Float();
    throw Py::AttributeError("Not yet implemented");
}

void  Robot6AxisPy::setAxis6(Py::Float arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Object Robot6AxisPy::getTcp() const
{
    //return Py::Object();
    throw Py::AttributeError("Not yet implemented");
}

void  Robot6AxisPy::setTcp(Py::Object arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Object Robot6AxisPy::getBase() const
{
    //return Py::Object();
    throw Py::AttributeError("Not yet implemented");
}

void  Robot6AxisPy::setBase(Py::Object arg)
{
    throw Py::AttributeError("Not yet implemented");
}

PyObject *Robot6AxisPy::getCustomAttributes(const char* /*attr*/) const
{
    return nullptr;
}

int Robot6AxisPy::setCustomAttributes(const char* /*attr*/, PyObject* /*obj*/)
{
    return 0;
}


#endif



