
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the XML file
// Every change you make here gets lost in the next full rebuild!
#ifndef ROBOT_WAYPOINTPY_H
#define ROBOT_WAYPOINTPY_H

#include <Base/PersistencePy.h>
#include <Mod/Robot/App/Waypoint.h>
#include <string>


namespace Robot
{

//===========================================================================
// WaypointPy - Python wrapper
//===========================================================================

/** The python export class for Waypoint
 */
class RobotExport WaypointPy : public Base::PersistencePy
{
protected:
    ~WaypointPy() override;

public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyGetSetDef    GetterSetter[];
    PyTypeObject *GetType() override {return &Type;}

public:
    WaypointPy(Waypoint *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(PyTypeObject *, PyObject *, PyObject *);
    int PyInit(PyObject* args, PyObject*k) override;


    using PointerType = Waypoint*;

    PyObject *_repr() override;        // the representation
    std::string representation() const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    //@}


    /** @name callbacks and implementers for the python object attributes */
    //@{
    ///getter callback for the Name attribute
    static PyObject * staticCallback_getName (PyObject *self, void *closure);
    /// getter for the Name attribute
    Py::String getName() const;
    /// setter callback for the Name attribute
    static int staticCallback_setName (PyObject *self, PyObject *value, void *closure);
    /// setter for the Name attribute
    void setName(Py::String arg);
    ///getter callback for the Type attribute
    static PyObject * staticCallback_getType (PyObject *self, void *closure);
    /// getter for the Type attribute
    Py::String getType() const;
    /// setter callback for the Type attribute
    static int staticCallback_setType (PyObject *self, PyObject *value, void *closure);
    /// setter for the Type attribute
    void setType(Py::String arg);
    ///getter callback for the Pos attribute
    static PyObject * staticCallback_getPos (PyObject *self, void *closure);
    /// getter for the Pos attribute
    Py::Object getPos() const;
    /// setter callback for the Pos attribute
    static int staticCallback_setPos (PyObject *self, PyObject *value, void *closure);
    /// setter for the Pos attribute
    void setPos(Py::Object arg);
    ///getter callback for the Cont attribute
    static PyObject * staticCallback_getCont (PyObject *self, void *closure);
    /// getter for the Cont attribute
    Py::Boolean getCont() const;
    /// setter callback for the Cont attribute
    static int staticCallback_setCont (PyObject *self, PyObject *value, void *closure);
    /// setter for the Cont attribute
    void setCont(Py::Boolean arg);
    ///getter callback for the Velocity attribute
    static PyObject * staticCallback_getVelocity (PyObject *self, void *closure);
    /// getter for the Velocity attribute
    Py::Float getVelocity() const;
    /// setter callback for the Velocity attribute
    static int staticCallback_setVelocity (PyObject *self, PyObject *value, void *closure);
    /// setter for the Velocity attribute
    void setVelocity(Py::Float arg);
    ///getter callback for the Tool attribute
    static PyObject * staticCallback_getTool (PyObject *self, void *closure);
    /// getter for the Tool attribute
    Py::Long getTool() const;
    /// setter callback for the Tool attribute
    static int staticCallback_setTool (PyObject *self, PyObject *value, void *closure);
    /// setter for the Tool attribute
    void setTool(Py::Long arg);
    ///getter callback for the Base attribute
    static PyObject * staticCallback_getBase (PyObject *self, void *closure);
    /// getter for the Base attribute
    Py::Long getBase() const;
    /// setter callback for the Base attribute
    static int staticCallback_setBase (PyObject *self, PyObject *value, void *closure);
    /// setter for the Base attribute
    void setBase(Py::Long arg);
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(const char *attr) override;              // __getattr__ function
    int _setattr(const char *attr, PyObject *value) override;   // __setattr__ function

    /// getter for the object handled by this class
    Waypoint *getWaypointPtr() const;

};

}  //namespace Robot

#endif  // ROBOT_WAYPOINTPY_H


