
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the .XML file
// Every change you make here gets lost in the next full rebuild!
// This File is normally built as an include in PrecisionPyImp.cpp! It's not intended to be in a project!

#include <boost/filesystem/path.hpp>
#include <boost/filesystem/operations.hpp>
#include <boost/filesystem/exception.hpp>
#include <Base/PyObjectBase.h>
#include <Base/Console.h>
#include <Base/Exception.h>
#include <CXX/Objects.hxx>

#if defined(__clang__)
# pragma clang diagnostic push
# pragma clang diagnostic ignored "-Wdeprecated-declarations"
#endif

using Base::streq;
using namespace Base;

/// Type structure of PrecisionPy
PyTypeObject PrecisionPy::Type = {
    PyVarObject_HEAD_INIT(&PyType_Type,0)
    "Base.Precision",     /*tp_name*/
    sizeof(PrecisionPy),                       /*tp_basicsize*/
    0,                                                /*tp_itemsize*/
    /* methods */
    PyDestructor,                                     /*tp_dealloc*/
#if PY_VERSION_HEX >= 0x03080000
    0,                                                /*tp_vectorcall_offset*/
#else
    nullptr,                                          /*tp_print*/
#endif
    nullptr,                                          /*tp_getattr*/
    nullptr,                                          /*tp_setattr*/
    nullptr,                                          /*tp_compare*/
    __repr,                                           /*tp_repr*/
    nullptr,                                          /*tp_as_number*/
    nullptr,                                          /*tp_as_sequence*/
    nullptr,                                          /*tp_as_mapping*/
    nullptr,                                          /*tp_hash*/
    nullptr,                                          /*tp_call */
    nullptr,                                          /*tp_str  */
    __getattro,                                       /*tp_getattro*/
    __setattro,                                       /*tp_setattro*/
    /* --- Functions to access object as input/output buffer ---------*/
    nullptr,                                          /* tp_as_buffer */
    /* --- Flags to define presence of optional/expanded features */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT,        /*tp_flags */
    "This is the Precision class",           /*tp_doc */
    nullptr,                                          /*tp_traverse */
    nullptr,                                          /*tp_clear */
    nullptr,                                          /*tp_richcompare */
    0,                                                /*tp_weaklistoffset */
    nullptr,                                          /*tp_iter */
    nullptr,                                          /*tp_iternext */
    Base::PrecisionPy::Methods,                     /*tp_methods */
    nullptr,                                          /*tp_members */
    Base::PrecisionPy::GetterSetter,                     /*tp_getset */
    &Base::PyObjectBase::Type,                        /*tp_base */
    nullptr,                                          /*tp_dict */
    nullptr,                                          /*tp_descr_get */
    nullptr,                                          /*tp_descr_set */
    0,                                                /*tp_dictoffset */
    __PyInit,                                         /*tp_init */
    nullptr,                                          /*tp_alloc */
    Base::PrecisionPy::PyMake,/*tp_new */
    nullptr,                                          /*tp_free   Low-level free-memory routine */
    nullptr,                                          /*tp_is_gc  For PyObject_IS_GC */
    nullptr,                                          /*tp_bases */
    nullptr,                                          /*tp_mro    method resolution order */
    nullptr,                                          /*tp_cache */
    nullptr,                                          /*tp_subclasses */
    nullptr,                                          /*tp_weaklist */
    nullptr,                                          /*tp_del */
    0,                                                /*tp_version_tag */
    nullptr                                           /*tp_finalize */
#if PY_VERSION_HEX >= 0x03090000
    ,nullptr                                          /*tp_vectorcall */
#if PY_VERSION_HEX >= 0x030c0000
    ,0                                                /*tp_watched */
#endif
#elif PY_VERSION_HEX >= 0x03080000
    ,nullptr                                          /*tp_vectorcall */
    /* bpo-37250: kept for backwards compatibility in CPython 3.8 only */
    ,nullptr                                          /*tp_print */
#endif
};

/// Methods structure of PrecisionPy
PyMethodDef PrecisionPy::Methods[] = {
    {"angular",
        reinterpret_cast<PyCFunction>(reinterpret_cast<void (*) ()>( staticCallback_angular )),
        METH_VARARGS|METH_STATIC,
        "Returns the recommended precision value when checking the equality of two angles (given in radians)"
    },
    {"confusion",
        reinterpret_cast<PyCFunction>(reinterpret_cast<void (*) ()>( staticCallback_confusion )),
        METH_VARARGS|METH_STATIC,
        "Returns the recommended precision value when checking coincidence of two points in real space"
    },
    {"squareConfusion",
        reinterpret_cast<PyCFunction>(reinterpret_cast<void (*) ()>( staticCallback_squareConfusion )),
        METH_VARARGS|METH_STATIC,
        "Returns square of confusion"
    },
    {"intersection",
        reinterpret_cast<PyCFunction>(reinterpret_cast<void (*) ()>( staticCallback_intersection )),
        METH_VARARGS|METH_STATIC,
        "Returns the precision value in real space, frequently used by intersection algorithms"
    },
    {"approximation",
        reinterpret_cast<PyCFunction>(reinterpret_cast<void (*) ()>( staticCallback_approximation )),
        METH_VARARGS|METH_STATIC,
        "Returns the precision value in real space, frequently used by approximation algorithms"
    },
    {"parametric",
        reinterpret_cast<PyCFunction>(reinterpret_cast<void (*) ()>( staticCallback_parametric )),
        METH_VARARGS|METH_STATIC,
        "Convert a real space precision to a parametric space precision"
    },
    {"isInfinite",
        reinterpret_cast<PyCFunction>(reinterpret_cast<void (*) ()>( staticCallback_isInfinite )),
        METH_VARARGS|METH_STATIC,
        "Returns True if R may be considered as an infinite number"
    },
    {"isPositiveInfinite",
        reinterpret_cast<PyCFunction>(reinterpret_cast<void (*) ()>( staticCallback_isPositiveInfinite )),
        METH_VARARGS|METH_STATIC,
        "Returns True if R may  be considered as a positive infinite number"
    },
    {"isNegativeInfinite",
        reinterpret_cast<PyCFunction>(reinterpret_cast<void (*) ()>( staticCallback_isNegativeInfinite )),
        METH_VARARGS|METH_STATIC,
        "Returns True if R may  be considered as a negative infinite number"
    },
    {"infinite",
        reinterpret_cast<PyCFunction>(reinterpret_cast<void (*) ()>( staticCallback_infinite )),
        METH_VARARGS|METH_STATIC,
        "Returns a  big number that  can  be  considered as infinite"
    },
    {nullptr, nullptr, 0, nullptr}		/* Sentinel */
};



/// Attribute structure of PrecisionPy
PyGetSetDef PrecisionPy::GetterSetter[] = {
    {nullptr, nullptr, nullptr, nullptr, nullptr}		/* Sentinel */
};

// angular() callback and implementer
// PyObject*  PrecisionPy::angular(PyObject *args){};
// has to be implemented in PrecisionPyImp.cpp
PyObject * PrecisionPy::staticCallback_angular (PyObject *self, PyObject *args)
{
    try { // catches all exceptions coming up from c++ and generate a python exception
        (void)self;
        PyObject* ret = PrecisionPy::angular(args);
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// confusion() callback and implementer
// PyObject*  PrecisionPy::confusion(PyObject *args){};
// has to be implemented in PrecisionPyImp.cpp
PyObject * PrecisionPy::staticCallback_confusion (PyObject *self, PyObject *args)
{
    try { // catches all exceptions coming up from c++ and generate a python exception
        (void)self;
        PyObject* ret = PrecisionPy::confusion(args);
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// squareConfusion() callback and implementer
// PyObject*  PrecisionPy::squareConfusion(PyObject *args){};
// has to be implemented in PrecisionPyImp.cpp
PyObject * PrecisionPy::staticCallback_squareConfusion (PyObject *self, PyObject *args)
{
    try { // catches all exceptions coming up from c++ and generate a python exception
        (void)self;
        PyObject* ret = PrecisionPy::squareConfusion(args);
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// intersection() callback and implementer
// PyObject*  PrecisionPy::intersection(PyObject *args){};
// has to be implemented in PrecisionPyImp.cpp
PyObject * PrecisionPy::staticCallback_intersection (PyObject *self, PyObject *args)
{
    try { // catches all exceptions coming up from c++ and generate a python exception
        (void)self;
        PyObject* ret = PrecisionPy::intersection(args);
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// approximation() callback and implementer
// PyObject*  PrecisionPy::approximation(PyObject *args){};
// has to be implemented in PrecisionPyImp.cpp
PyObject * PrecisionPy::staticCallback_approximation (PyObject *self, PyObject *args)
{
    try { // catches all exceptions coming up from c++ and generate a python exception
        (void)self;
        PyObject* ret = PrecisionPy::approximation(args);
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// parametric() callback and implementer
// PyObject*  PrecisionPy::parametric(PyObject *args){};
// has to be implemented in PrecisionPyImp.cpp
PyObject * PrecisionPy::staticCallback_parametric (PyObject *self, PyObject *args)
{
    try { // catches all exceptions coming up from c++ and generate a python exception
        (void)self;
        PyObject* ret = PrecisionPy::parametric(args);
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// isInfinite() callback and implementer
// PyObject*  PrecisionPy::isInfinite(PyObject *args){};
// has to be implemented in PrecisionPyImp.cpp
PyObject * PrecisionPy::staticCallback_isInfinite (PyObject *self, PyObject *args)
{
    try { // catches all exceptions coming up from c++ and generate a python exception
        (void)self;
        PyObject* ret = PrecisionPy::isInfinite(args);
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// isPositiveInfinite() callback and implementer
// PyObject*  PrecisionPy::isPositiveInfinite(PyObject *args){};
// has to be implemented in PrecisionPyImp.cpp
PyObject * PrecisionPy::staticCallback_isPositiveInfinite (PyObject *self, PyObject *args)
{
    try { // catches all exceptions coming up from c++ and generate a python exception
        (void)self;
        PyObject* ret = PrecisionPy::isPositiveInfinite(args);
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// isNegativeInfinite() callback and implementer
// PyObject*  PrecisionPy::isNegativeInfinite(PyObject *args){};
// has to be implemented in PrecisionPyImp.cpp
PyObject * PrecisionPy::staticCallback_isNegativeInfinite (PyObject *self, PyObject *args)
{
    try { // catches all exceptions coming up from c++ and generate a python exception
        (void)self;
        PyObject* ret = PrecisionPy::isNegativeInfinite(args);
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// infinite() callback and implementer
// PyObject*  PrecisionPy::infinite(PyObject *args){};
// has to be implemented in PrecisionPyImp.cpp
PyObject * PrecisionPy::staticCallback_infinite (PyObject *self, PyObject *args)
{
    try { // catches all exceptions coming up from c++ and generate a python exception
        (void)self;
        PyObject* ret = PrecisionPy::infinite(args);
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}




//--------------------------------------------------------------------------
// Constructor
//--------------------------------------------------------------------------
PrecisionPy::PrecisionPy(Precision *pcObject, PyTypeObject *T)
    : PyObjectBase(static_cast<PyObjectBase::PointerType>(pcObject), T)
{
}

PyObject *PrecisionPy::PyMake(PyTypeObject* /*type*/, PyObject* /*args*/, PyObject* /*kwds*/)
{
    // never create such objects with the constructor
    PyErr_SetString(PyExc_RuntimeError, "You cannot create directly an instance of 'PrecisionPy'.");

    return nullptr;
}

int PrecisionPy::PyInit(PyObject* /*args*/, PyObject* /*kwd*/)
{
    return 0;
}

//--------------------------------------------------------------------------
// destructor
//--------------------------------------------------------------------------
PrecisionPy::~PrecisionPy()                                // Everything handled in parent
{
}

//--------------------------------------------------------------------------
// PrecisionPy representation
//--------------------------------------------------------------------------
PyObject *PrecisionPy::_repr()
{
    return Py_BuildValue("s", representation().c_str());
}

//--------------------------------------------------------------------------
// PrecisionPy Attributes
//--------------------------------------------------------------------------
PyObject *PrecisionPy::_getattr(const char *attr)			// __getattr__ function: note only need to handle new state
{
    try {
        // getter method for special Attributes (e.g. dynamic ones)
        PyObject *r = getCustomAttributes(attr);
        if(r) return r;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError,"Unknown C++ exception");
        return nullptr;
    }
#endif

    PyMethodDef *ml = Methods;
    for (; ml->ml_name != nullptr; ml++) {
        if (attr[0] == ml->ml_name[0] &&
            strcmp(attr+1, ml->ml_name+1) == 0)
            return PyCFunction_New(ml, this);
    }

    PyErr_Clear();
    return PyObjectBase::_getattr(attr);
}

int PrecisionPy::_setattr(const char *attr, PyObject *value) // __setattr__ function: note only need to handle new state
{
    try {
        // setter for special Attributes (e.g. dynamic ones)
        int r = setCustomAttributes(attr, value);
        // r = 1: handled
        // r = -1: error
        // r = 0: ignore
        if (r == 1)
            return 0;
        else if (r == -1)
            return -1;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return -1;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return -1;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return -1;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return -1;
    }
#endif

    return PyObjectBase::_setattr(attr, value);
}

Precision *PrecisionPy::getPrecisionPtr() const
{
    return static_cast<Precision *>(_pcTwinPointer);
}

#if defined(__clang__)
# pragma clang diagnostic pop
#endif

#if 0
/* From here on come the methods you have to implement, but NOT in this module. Implement in PrecisionPyImp.cpp! This prototypes
 * are just for convenience when you add a new method.
 */



// returns a string which represents the object e.g. when printed in python
std::string PrecisionPy::representation() const
{
    return {"<Precision object>"};
}

PyObject* PrecisionPy::angular(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* PrecisionPy::confusion(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* PrecisionPy::squareConfusion(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* PrecisionPy::intersection(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* PrecisionPy::approximation(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* PrecisionPy::parametric(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* PrecisionPy::isInfinite(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* PrecisionPy::isPositiveInfinite(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* PrecisionPy::isNegativeInfinite(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* PrecisionPy::infinite(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}



PyObject *PrecisionPy::getCustomAttributes(const char* /*attr*/) const
{
    return nullptr;
}

int PrecisionPy::setCustomAttributes(const char* /*attr*/, PyObject* /*obj*/)
{
    return 0;
}


#endif



