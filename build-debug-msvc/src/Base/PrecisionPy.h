
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the XML file
// Every change you make here gets lost in the next full rebuild!
#ifndef BASE_PRECISIONPY_H
#define BASE_PRECISIONPY_H

#include <Base/PyObjectBase.h>
#include <Base/Precision.h>
#include <string>


namespace Base
{

//===========================================================================
// PrecisionPy - Python wrapper
//===========================================================================

/** The python export class for Precision
 */
class BaseExport PrecisionPy : public Base::PyObjectBase
{
protected:
    ~PrecisionPy() override;

public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyGetSetDef    GetterSetter[];
    PyTypeObject *GetType() override {return &Type;}

public:
    PrecisionPy(Precision *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(PyTypeObject *, PyObject *, PyObject *);
    int PyInit(PyObject* args, PyObject*k) override;


    using PointerType = Precision*;

    PyObject *_repr() override;        // the representation
    std::string representation() const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    /// callback for the angular() method
    static PyObject * staticCallback_angular (PyObject *self, PyObject *args);
    /// implementer for the angular() method
    static PyObject*  angular(PyObject *args);
    /// callback for the confusion() method
    static PyObject * staticCallback_confusion (PyObject *self, PyObject *args);
    /// implementer for the confusion() method
    static PyObject*  confusion(PyObject *args);
    /// callback for the squareConfusion() method
    static PyObject * staticCallback_squareConfusion (PyObject *self, PyObject *args);
    /// implementer for the squareConfusion() method
    static PyObject*  squareConfusion(PyObject *args);
    /// callback for the intersection() method
    static PyObject * staticCallback_intersection (PyObject *self, PyObject *args);
    /// implementer for the intersection() method
    static PyObject*  intersection(PyObject *args);
    /// callback for the approximation() method
    static PyObject * staticCallback_approximation (PyObject *self, PyObject *args);
    /// implementer for the approximation() method
    static PyObject*  approximation(PyObject *args);
    /// callback for the parametric() method
    static PyObject * staticCallback_parametric (PyObject *self, PyObject *args);
    /// implementer for the parametric() method
    static PyObject*  parametric(PyObject *args);
    /// callback for the isInfinite() method
    static PyObject * staticCallback_isInfinite (PyObject *self, PyObject *args);
    /// implementer for the isInfinite() method
    static PyObject*  isInfinite(PyObject *args);
    /// callback for the isPositiveInfinite() method
    static PyObject * staticCallback_isPositiveInfinite (PyObject *self, PyObject *args);
    /// implementer for the isPositiveInfinite() method
    static PyObject*  isPositiveInfinite(PyObject *args);
    /// callback for the isNegativeInfinite() method
    static PyObject * staticCallback_isNegativeInfinite (PyObject *self, PyObject *args);
    /// implementer for the isNegativeInfinite() method
    static PyObject*  isNegativeInfinite(PyObject *args);
    /// callback for the infinite() method
    static PyObject * staticCallback_infinite (PyObject *self, PyObject *args);
    /// implementer for the infinite() method
    static PyObject*  infinite(PyObject *args);
    //@}


    /** @name callbacks and implementers for the python object attributes */
    //@{
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(const char *attr) override;              // __getattr__ function
    int _setattr(const char *attr, PyObject *value) override;   // __setattr__ function

    /// getter for the object handled by this class
    Precision *getPrecisionPtr() const;

};

}  //namespace Base

#endif  // BASE_PRECISIONPY_H


