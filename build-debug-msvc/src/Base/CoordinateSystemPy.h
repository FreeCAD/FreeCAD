
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the XML file
// Every change you make here gets lost in the next full rebuild!
#ifndef BASE_COORDINATESYSTEMPY_H
#define BASE_COORDINATESYSTEMPY_H

#include <Base/PyObjectBase.h>
#include <Base/CoordinateSystem.h>
#include <string>


namespace Base
{

//===========================================================================
// CoordinateSystemPy - Python wrapper
//===========================================================================

/** The python export class for CoordinateSystem
 */
class BaseExport CoordinateSystemPy : public Base::PyObjectBase
{
protected:
    ~CoordinateSystemPy() override;

public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyGetSetDef    GetterSetter[];
    PyTypeObject *GetType() override {return &Type;}

public:
    CoordinateSystemPy(CoordinateSystem *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(PyTypeObject *, PyObject *, PyObject *);
    int PyInit(PyObject* args, PyObject*k) override;


    using PointerType = CoordinateSystem*;

    PyObject *_repr() override;        // the representation
    std::string representation() const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    /// callback for the setAxes() method
    static PyObject * staticCallback_setAxes (PyObject *self, PyObject *args);
    /// implementer for the setAxes() method
    PyObject*  setAxes(PyObject *args);
    /// callback for the displacement() method
    static PyObject * staticCallback_displacement (PyObject *self, PyObject *args);
    /// implementer for the displacement() method
    PyObject*  displacement(PyObject *args);
    /// callback for the transformTo() method
    static PyObject * staticCallback_transformTo (PyObject *self, PyObject *args);
    /// implementer for the transformTo() method
    PyObject*  transformTo(PyObject *args);
    /// callback for the transform() method
    static PyObject * staticCallback_transform (PyObject *self, PyObject *args);
    /// implementer for the transform() method
    PyObject*  transform(PyObject *args);
    /// callback for the setPlacement() method
    static PyObject * staticCallback_setPlacement (PyObject *self, PyObject *args);
    /// implementer for the setPlacement() method
    PyObject*  setPlacement(PyObject *args);
    //@}


    /** @name callbacks and implementers for the python object attributes */
    //@{
    ///getter callback for the Axis attribute
    static PyObject * staticCallback_getAxis (PyObject *self, void *closure);
    /// getter for the Axis attribute
    Py::Object getAxis() const;
    /// setter callback for the Axis attribute
    static int staticCallback_setAxis (PyObject *self, PyObject *value, void *closure);
    /// setter for the Axis attribute
    void setAxis(Py::Object arg);
    ///getter callback for the XDirection attribute
    static PyObject * staticCallback_getXDirection (PyObject *self, void *closure);
    /// getter for the XDirection attribute
    Py::Object getXDirection() const;
    /// setter callback for the XDirection attribute
    static int staticCallback_setXDirection (PyObject *self, PyObject *value, void *closure);
    /// setter for the XDirection attribute
    void setXDirection(Py::Object arg);
    ///getter callback for the YDirection attribute
    static PyObject * staticCallback_getYDirection (PyObject *self, void *closure);
    /// getter for the YDirection attribute
    Py::Object getYDirection() const;
    /// setter callback for the YDirection attribute
    static int staticCallback_setYDirection (PyObject *self, PyObject *value, void *closure);
    /// setter for the YDirection attribute
    void setYDirection(Py::Object arg);
    ///getter callback for the ZDirection attribute
    static PyObject * staticCallback_getZDirection (PyObject *self, void *closure);
    /// getter for the ZDirection attribute
    Py::Object getZDirection() const;
    /// setter callback for the ZDirection attribute
    static int staticCallback_setZDirection (PyObject *self, PyObject *value, void *closure);
    /// setter for the ZDirection attribute
    void setZDirection(Py::Object arg);
    ///getter callback for the Position attribute
    static PyObject * staticCallback_getPosition (PyObject *self, void *closure);
    /// getter for the Position attribute
    Py::Object getPosition() const;
    /// setter callback for the Position attribute
    static int staticCallback_setPosition (PyObject *self, PyObject *value, void *closure);
    /// setter for the Position attribute
    void setPosition(Py::Object arg);
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(const char *attr) override;              // __getattr__ function
    int _setattr(const char *attr, PyObject *value) override;   // __setattr__ function

    /// getter for the object handled by this class
    CoordinateSystem *getCoordinateSystemPtr() const;

};

}  //namespace Base

#endif  // BASE_COORDINATESYSTEMPY_H


