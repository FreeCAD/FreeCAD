
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the XML file
// Every change you make here gets lost in the next full rebuild!
#ifndef BASE_PLACEMENTPY_H
#define BASE_PLACEMENTPY_H

#include <Base/PyObjectBase.h>
#include <Base/Placement.h>
#include <string>


namespace Base
{

//===========================================================================
// PlacementPy - Python wrapper
//===========================================================================

/** The python export class for Placement
 */
class BaseExport PlacementPy : public Base::PyObjectBase
{
protected:
    ~PlacementPy() override;

public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyNumberMethods Number[];
    static PyObject * richCompare(PyObject *v, PyObject *w, int op);
    static PyGetSetDef    GetterSetter[];
    PyTypeObject *GetType() override {return &Type;}

public:
    PlacementPy(Placement *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(PyTypeObject *, PyObject *, PyObject *);
    int PyInit(PyObject* args, PyObject*k) override;


    using PointerType = Placement*;

    PyObject *_repr() override;        // the representation
    std::string representation() const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    /// callback for the copy() method
    static PyObject * staticCallback_copy (PyObject *self, PyObject *args);
    /// implementer for the copy() method
    PyObject*  copy(PyObject *args);
    /// callback for the move() method
    static PyObject * staticCallback_move (PyObject *self, PyObject *args);
    /// implementer for the move() method
    PyObject*  move(PyObject *args);
    /// callback for the translate() method
    static PyObject * staticCallback_translate (PyObject *self, PyObject *args);
    /// implementer for the translate() method
    PyObject*  translate(PyObject *args);
    /// callback for the rotate() method
    static PyObject * staticCallback_rotate (PyObject *self, PyObject *args, PyObject *kwd);
    /// implementer for the rotate() method
    PyObject*  rotate(PyObject *args, PyObject *kwd);
    /// callback for the multiply() method
    static PyObject * staticCallback_multiply (PyObject *self, PyObject *args);
    /// implementer for the multiply() method
    PyObject*  multiply(PyObject *args);
    /// callback for the multVec() method
    static PyObject * staticCallback_multVec (PyObject *self, PyObject *args);
    /// implementer for the multVec() method
    PyObject*  multVec(PyObject *args);
    /// callback for the toMatrix() method
    static PyObject * staticCallback_toMatrix (PyObject *self, PyObject *args);
    /// implementer for the toMatrix() method
    PyObject*  toMatrix(PyObject *args);
    /// callback for the inverse() method
    static PyObject * staticCallback_inverse (PyObject *self, PyObject *args);
    /// implementer for the inverse() method
    PyObject*  inverse(PyObject *args);
    /// callback for the pow() method
    static PyObject * staticCallback_pow (PyObject *self, PyObject *args);
    /// implementer for the pow() method
    PyObject*  pow(PyObject *args);
    /// callback for the sclerp() method
    static PyObject * staticCallback_sclerp (PyObject *self, PyObject *args);
    /// implementer for the sclerp() method
    PyObject*  sclerp(PyObject *args);
    /// callback for the slerp() method
    static PyObject * staticCallback_slerp (PyObject *self, PyObject *args);
    /// implementer for the slerp() method
    PyObject*  slerp(PyObject *args);
    /// callback for the isIdentity() method
    static PyObject * staticCallback_isIdentity (PyObject *self, PyObject *args);
    /// implementer for the isIdentity() method
    PyObject*  isIdentity(PyObject *args);
    /// callback for the isSame() method
    static PyObject * staticCallback_isSame (PyObject *self, PyObject *args);
    /// implementer for the isSame() method
    PyObject*  isSame(PyObject *args);
    //@}

    /** @name callbacks and implementers for the python object number protocol */
    //@{
    /// callback for the number_add_handler
    static PyObject * number_add_handler (PyObject *self, PyObject *other);
    /// callback for the number_subtract_handler
    static PyObject * number_subtract_handler (PyObject *self, PyObject *other);
    /// callback for the number_multiply_handler
    static PyObject * number_multiply_handler (PyObject *self, PyObject *other);
    /// callback for the number_divide_handler
    static PyObject * number_divide_handler (PyObject *self, PyObject *other);
    /// callback for the number_remainder_handler
    static PyObject * number_remainder_handler (PyObject *self, PyObject *other);
    /// callback for the number_divmod_handler
    static PyObject * number_divmod_handler (PyObject *self, PyObject *other);
    /// callback for the number_power_handler
    static PyObject * number_power_handler (PyObject *self, PyObject *other, PyObject *modulo);
    /// callback for the number_negative_handler
    static PyObject * number_negative_handler (PyObject *self);
    /// callback for the number_positive_handler
    static PyObject * number_positive_handler (PyObject *self);
    /// callback for the number_absolute_handler
    static PyObject * number_absolute_handler (PyObject *self);
    /// callback for the number_nonzero_handler
    static int number_nonzero_handler (PyObject *self);
    /// callback for the number_invert_handler
    static PyObject * number_invert_handler (PyObject *self);
    /// callback for the number_lshift_handler
    static PyObject * number_lshift_handler (PyObject *self, PyObject *other);
    /// callback for the number_rshift_handler
    static PyObject * number_rshift_handler (PyObject *self, PyObject *other);
    /// callback for the number_and_handler
    static PyObject * number_and_handler (PyObject *self, PyObject *other);
    /// callback for the number_xor_handler
    static PyObject * number_xor_handler (PyObject *self, PyObject *other);
    /// callback for the number_or_handler
    static PyObject * number_or_handler (PyObject *self, PyObject *other);
    /// callback for the number_int_handler
    static PyObject * number_int_handler (PyObject *self);
    /// callback for the number_float_handler
    static PyObject * number_float_handler (PyObject *self);
    //@}

    /** @name callbacks and implementers for the python object attributes */
    //@{
    ///getter callback for the Base attribute
    static PyObject * staticCallback_getBase (PyObject *self, void *closure);
    /// getter for the Base attribute
    Py::Object getBase() const;
    /// setter callback for the Base attribute
    static int staticCallback_setBase (PyObject *self, PyObject *value, void *closure);
    /// setter for the Base attribute
    void setBase(Py::Object arg);
    ///getter callback for the Rotation attribute
    static PyObject * staticCallback_getRotation (PyObject *self, void *closure);
    /// getter for the Rotation attribute
    Py::Object getRotation() const;
    /// setter callback for the Rotation attribute
    static int staticCallback_setRotation (PyObject *self, PyObject *value, void *closure);
    /// setter for the Rotation attribute
    void setRotation(Py::Object arg);
    ///getter callback for the Matrix attribute
    static PyObject * staticCallback_getMatrix (PyObject *self, void *closure);
    /// getter for the Matrix attribute
    Py::Object getMatrix() const;
    /// setter callback for the Matrix attribute
    static int staticCallback_setMatrix (PyObject *self, PyObject *value, void *closure);
    /// setter for the Matrix attribute
    void setMatrix(Py::Object arg);
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(const char *attr) override;              // __getattr__ function
    int _setattr(const char *attr, PyObject *value) override;   // __setattr__ function

    /// getter for the object handled by this class
    Placement *getPlacementPtr() const;

    /** @name additional declarations and methods for the wrapper class */
    //@{
public:
            PlacementPy(const Placement & pla, PyTypeObject *T = &Type)
            :PyObjectBase(new Placement(pla),T){}
            Placement value() const
            { return *(getPlacementPtr()); }
        
    //@}
};

}  //namespace Base

#endif  // BASE_PLACEMENTPY_H


