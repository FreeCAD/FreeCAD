
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the XML file
// Every change you make here gets lost in the next full rebuild!
#ifndef BASE_PERSISTENCEPY_H
#define BASE_PERSISTENCEPY_H

#include <Base/BaseClassPy.h>
#include <Base/Persistence.h>
#include <string>


namespace Base
{

//===========================================================================
// PersistencePy - Python wrapper
//===========================================================================

/** The python export class for Persistence
 */
class BaseExport PersistencePy : public Base::BaseClassPy
{
protected:
    ~PersistencePy() override;

public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyGetSetDef    GetterSetter[];
    PyTypeObject *GetType() override {return &Type;}

public:
    PersistencePy(Persistence *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(PyTypeObject *, PyObject *, PyObject *);
    int PyInit(PyObject* args, PyObject*k) override;


    using PointerType = Persistence*;

    PyObject *_repr() override;        // the representation
    std::string representation() const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    /// callback for the dumpContent() method
    static PyObject * staticCallback_dumpContent (PyObject *self, PyObject *args, PyObject *kwd);
    /// implementer for the dumpContent() method
    PyObject*  dumpContent(PyObject *args, PyObject *kwd);
    /// callback for the restoreContent() method
    static PyObject * staticCallback_restoreContent (PyObject *self, PyObject *args);
    /// implementer for the restoreContent() method
    PyObject*  restoreContent(PyObject *args);
    //@}


    /** @name callbacks and implementers for the python object attributes */
    //@{
    ///getter callback for the Content attribute
    static PyObject * staticCallback_getContent (PyObject *self, void *closure);
    /// getter for the Content attribute
    Py::String getContent() const;
    /// setter callback for the Content attribute
    static int staticCallback_setContent (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Content is read only!
    ///getter callback for the MemSize attribute
    static PyObject * staticCallback_getMemSize (PyObject *self, void *closure);
    /// getter for the MemSize attribute
    Py::Int getMemSize() const;
    /// setter callback for the MemSize attribute
    static int staticCallback_setMemSize (PyObject *self, PyObject *value, void *closure);
    // no setter method,  MemSize is read only!
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(const char *attr) override;              // __getattr__ function
    int _setattr(const char *attr, PyObject *value) override;   // __setattr__ function

    /// getter for the object handled by this class
    Persistence *getPersistencePtr() const;

};

}  //namespace Base

#endif  // BASE_PERSISTENCEPY_H


