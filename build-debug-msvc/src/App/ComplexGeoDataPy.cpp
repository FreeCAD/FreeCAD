
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the .XML file
// Every change you make here gets lost in the next full rebuild!
// This File is normally built as an include in ComplexGeoDataPyImp.cpp! It's not intended to be in a project!

#include <boost/filesystem/path.hpp>
#include <boost/filesystem/operations.hpp>
#include <boost/filesystem/exception.hpp>
#include <Base/PyObjectBase.h>
#include <Base/Console.h>
#include <Base/Exception.h>
#include <CXX/Objects.hxx>

#if defined(__clang__)
# pragma clang diagnostic push
# pragma clang diagnostic ignored "-Wdeprecated-declarations"
#endif

using Base::streq;
using namespace Data;

/// Type structure of ComplexGeoDataPy
PyTypeObject ComplexGeoDataPy::Type = {
    PyVarObject_HEAD_INIT(&PyType_Type,0)
    "Data.ComplexGeoData",     /*tp_name*/
    sizeof(ComplexGeoDataPy),                       /*tp_basicsize*/
    0,                                                /*tp_itemsize*/
    /* methods */
    PyDestructor,                                     /*tp_dealloc*/
#if PY_VERSION_HEX >= 0x03080000
    0,                                                /*tp_vectorcall_offset*/
#else
    nullptr,                                          /*tp_print*/
#endif
    nullptr,                                          /*tp_getattr*/
    nullptr,                                          /*tp_setattr*/
    nullptr,                                          /*tp_compare*/
    __repr,                                           /*tp_repr*/
    nullptr,                                          /*tp_as_number*/
    nullptr,                                          /*tp_as_sequence*/
    nullptr,                                          /*tp_as_mapping*/
    nullptr,                                          /*tp_hash*/
    nullptr,                                          /*tp_call */
    nullptr,                                          /*tp_str  */
    __getattro,                                       /*tp_getattro*/
    __setattro,                                       /*tp_setattro*/
    /* --- Functions to access object as input/output buffer ---------*/
    nullptr,                                          /* tp_as_buffer */
    /* --- Flags to define presence of optional/expanded features */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT,        /*tp_flags */
    "Father of all complex geometric data types",           /*tp_doc */
    nullptr,                                          /*tp_traverse */
    nullptr,                                          /*tp_clear */
    nullptr,                                          /*tp_richcompare */
    0,                                                /*tp_weaklistoffset */
    nullptr,                                          /*tp_iter */
    nullptr,                                          /*tp_iternext */
    Data::ComplexGeoDataPy::Methods,                     /*tp_methods */
    nullptr,                                          /*tp_members */
    Data::ComplexGeoDataPy::GetterSetter,                     /*tp_getset */
    &Base::PersistencePy::Type,                        /*tp_base */
    nullptr,                                          /*tp_dict */
    nullptr,                                          /*tp_descr_get */
    nullptr,                                          /*tp_descr_set */
    0,                                                /*tp_dictoffset */
    __PyInit,                                         /*tp_init */
    nullptr,                                          /*tp_alloc */
    Data::ComplexGeoDataPy::PyMake,/*tp_new */
    nullptr,                                          /*tp_free   Low-level free-memory routine */
    nullptr,                                          /*tp_is_gc  For PyObject_IS_GC */
    nullptr,                                          /*tp_bases */
    nullptr,                                          /*tp_mro    method resolution order */
    nullptr,                                          /*tp_cache */
    nullptr,                                          /*tp_subclasses */
    nullptr,                                          /*tp_weaklist */
    nullptr,                                          /*tp_del */
    0,                                                /*tp_version_tag */
    nullptr                                           /*tp_finalize */
#if PY_VERSION_HEX >= 0x03090000
    ,nullptr                                          /*tp_vectorcall */
#if PY_VERSION_HEX >= 0x030c0000
    ,0                                                /*tp_watched */
#endif
#elif PY_VERSION_HEX >= 0x03080000
    ,nullptr                                          /*tp_vectorcall */
    /* bpo-37250: kept for backwards compatibility in CPython 3.8 only */
    ,nullptr                                          /*tp_print */
#endif
};

/// Methods structure of ComplexGeoDataPy
PyMethodDef ComplexGeoDataPy::Methods[] = {
    {"getElementTypes",
        reinterpret_cast<PyCFunction>( staticCallback_getElementTypes ),
        METH_VARARGS,
        "Return a list of element types present in the complex geometric data"
    },
    {"countSubElements",
        reinterpret_cast<PyCFunction>( staticCallback_countSubElements ),
        METH_VARARGS,
        "Return the number of elements of a type"
    },
    {"getFacesFromSubElement",
        reinterpret_cast<PyCFunction>( staticCallback_getFacesFromSubElement ),
        METH_VARARGS,
        "Return vertexes and faces from a sub-element"
    },
    {"getLinesFromSubElement",
        reinterpret_cast<PyCFunction>( staticCallback_getLinesFromSubElement ),
        METH_VARARGS,
        "Return vertexes and lines from a sub-element"
    },
    {"getPoints",
        reinterpret_cast<PyCFunction>( staticCallback_getPoints ),
        METH_VARARGS,
        "Return a tuple of points and normals with a given accuracy"
    },
    {"getLines",
        reinterpret_cast<PyCFunction>( staticCallback_getLines ),
        METH_VARARGS,
        "Return a tuple of points and lines with a given accuracy"
    },
    {"getFaces",
        reinterpret_cast<PyCFunction>( staticCallback_getFaces ),
        METH_VARARGS,
        "Return a tuple of points and triangles with a given accuracy"
    },
    {"applyTranslation",
        reinterpret_cast<PyCFunction>( staticCallback_applyTranslation ),
        METH_VARARGS,
        "Apply an additional translation to the placement"
    },
    {"applyRotation",
        reinterpret_cast<PyCFunction>( staticCallback_applyRotation ),
        METH_VARARGS,
        "Apply an additional rotation to the placement"
    },
    {"transformGeometry",
        reinterpret_cast<PyCFunction>( staticCallback_transformGeometry ),
        METH_VARARGS,
        "Apply a transformation to the underlying geometry"
    },
    {"setElementName",
        reinterpret_cast<PyCFunction>(reinterpret_cast<void (*) ()>( staticCallback_setElementName )),
        METH_VARARGS|METH_KEYWORDS,
        "setElementName(element,name=None,postfix=None,overwrite=False,sid=None), Set an element name\n"
        "\n"
        "          element  : the original element name, e.g. Edge1, Vertex2\n"
        "          name     : the new name for the element, None to remove the mapping\n"
        "          postfix  : postfix of the name that will not be hashed\n"
        "          overwrite: if true, it will overwrite exiting name\n"
        "          sid      : to hash the name any way you want, provide your own string id(s) in this parameter\n"
        "\n"
        "          An element can have multiple mapped names. However, a name can only be mapped\n"
        "          to one element"
    },
    {"getElementName",
        reinterpret_cast<PyCFunction>( staticCallback_getElementName ),
        METH_VARARGS,
        "getElementName(name,direction=0) - Return a mapped element name or reverse"
    },
    {"getElementIndexedName",
        reinterpret_cast<PyCFunction>( staticCallback_getElementIndexedName ),
        METH_VARARGS,
        "getElementIndexedName(name) - Return the indexed element name"
    },
    {"getElementMappedName",
        reinterpret_cast<PyCFunction>( staticCallback_getElementMappedName ),
        METH_VARARGS,
        "getElementMappedName(name) - Return the mapped element name"
    },
    {nullptr, nullptr, 0, nullptr}		/* Sentinel */
};



/// Attribute structure of ComplexGeoDataPy
PyGetSetDef ComplexGeoDataPy::GetterSetter[] = {
    {"BoundBox",
        (getter) staticCallback_getBoundBox,
        (setter) staticCallback_setBoundBox,
        "Get the bounding box (BoundBox) of the complex geometric data.",
        nullptr
    },
    {"CenterOfGravity",
        (getter) staticCallback_getCenterOfGravity,
        (setter) staticCallback_setCenterOfGravity,
        "Get the center of gravity",
        nullptr
    },
    {"Placement",
        (getter) staticCallback_getPlacement,
        (setter) staticCallback_setPlacement,
        "Get the current transformation of the object as placement",
        nullptr
    },
    {"Tag",
        (getter) staticCallback_getTag,
        (setter) staticCallback_setTag,
        "Geometry Tag",
        nullptr
    },
    {"Hasher",
        (getter) staticCallback_getHasher,
        (setter) staticCallback_setHasher,
        "Get/Set the string hasher of this object",
        nullptr
    },
    {"ElementMapSize",
        (getter) staticCallback_getElementMapSize,
        (setter) staticCallback_setElementMapSize,
        "Get the current element map size",
        nullptr
    },
    {"ElementMap",
        (getter) staticCallback_getElementMap,
        (setter) staticCallback_setElementMap,
        "Get/Set a dict of element mapping",
        nullptr
    },
    {"ElementReverseMap",
        (getter) staticCallback_getElementReverseMap,
        (setter) staticCallback_setElementReverseMap,
        "Get a dict of element reverse mapping",
        nullptr
    },
    {"ElementMapVersion",
        (getter) staticCallback_getElementMapVersion,
        (setter) staticCallback_setElementMapVersion,
        "Element map version",
        nullptr
    },
    {nullptr, nullptr, nullptr, nullptr, nullptr}		/* Sentinel */
};

// getElementTypes() callback and implementer
// PyObject*  ComplexGeoDataPy::getElementTypes(PyObject *args){};
// has to be implemented in ComplexGeoDataPyImp.cpp
PyObject * ComplexGeoDataPy::staticCallback_getElementTypes (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'getElementTypes' of 'Data.ComplexGeoData' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }


    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ComplexGeoDataPy*>(self)->getElementTypes(args);
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// countSubElements() callback and implementer
// PyObject*  ComplexGeoDataPy::countSubElements(PyObject *args){};
// has to be implemented in ComplexGeoDataPyImp.cpp
PyObject * ComplexGeoDataPy::staticCallback_countSubElements (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'countSubElements' of 'Data.ComplexGeoData' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }


    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ComplexGeoDataPy*>(self)->countSubElements(args);
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// getFacesFromSubElement() callback and implementer
// PyObject*  ComplexGeoDataPy::getFacesFromSubElement(PyObject *args){};
// has to be implemented in ComplexGeoDataPyImp.cpp
PyObject * ComplexGeoDataPy::staticCallback_getFacesFromSubElement (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'getFacesFromSubElement' of 'Data.ComplexGeoData' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }


    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ComplexGeoDataPy*>(self)->getFacesFromSubElement(args);
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// getLinesFromSubElement() callback and implementer
// PyObject*  ComplexGeoDataPy::getLinesFromSubElement(PyObject *args){};
// has to be implemented in ComplexGeoDataPyImp.cpp
PyObject * ComplexGeoDataPy::staticCallback_getLinesFromSubElement (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'getLinesFromSubElement' of 'Data.ComplexGeoData' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }


    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ComplexGeoDataPy*>(self)->getLinesFromSubElement(args);
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// getPoints() callback and implementer
// PyObject*  ComplexGeoDataPy::getPoints(PyObject *args){};
// has to be implemented in ComplexGeoDataPyImp.cpp
PyObject * ComplexGeoDataPy::staticCallback_getPoints (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'getPoints' of 'Data.ComplexGeoData' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }


    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ComplexGeoDataPy*>(self)->getPoints(args);
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// getLines() callback and implementer
// PyObject*  ComplexGeoDataPy::getLines(PyObject *args){};
// has to be implemented in ComplexGeoDataPyImp.cpp
PyObject * ComplexGeoDataPy::staticCallback_getLines (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'getLines' of 'Data.ComplexGeoData' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }


    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ComplexGeoDataPy*>(self)->getLines(args);
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// getFaces() callback and implementer
// PyObject*  ComplexGeoDataPy::getFaces(PyObject *args){};
// has to be implemented in ComplexGeoDataPyImp.cpp
PyObject * ComplexGeoDataPy::staticCallback_getFaces (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'getFaces' of 'Data.ComplexGeoData' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }


    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ComplexGeoDataPy*>(self)->getFaces(args);
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// applyTranslation() callback and implementer
// PyObject*  ComplexGeoDataPy::applyTranslation(PyObject *args){};
// has to be implemented in ComplexGeoDataPyImp.cpp
PyObject * ComplexGeoDataPy::staticCallback_applyTranslation (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'applyTranslation' of 'Data.ComplexGeoData' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ComplexGeoDataPy*>(self)->applyTranslation(args);
        if (ret != nullptr)
            static_cast<ComplexGeoDataPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// applyRotation() callback and implementer
// PyObject*  ComplexGeoDataPy::applyRotation(PyObject *args){};
// has to be implemented in ComplexGeoDataPyImp.cpp
PyObject * ComplexGeoDataPy::staticCallback_applyRotation (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'applyRotation' of 'Data.ComplexGeoData' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ComplexGeoDataPy*>(self)->applyRotation(args);
        if (ret != nullptr)
            static_cast<ComplexGeoDataPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// transformGeometry() callback and implementer
// PyObject*  ComplexGeoDataPy::transformGeometry(PyObject *args){};
// has to be implemented in ComplexGeoDataPyImp.cpp
PyObject * ComplexGeoDataPy::staticCallback_transformGeometry (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'transformGeometry' of 'Data.ComplexGeoData' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ComplexGeoDataPy*>(self)->transformGeometry(args);
        if (ret != nullptr)
            static_cast<ComplexGeoDataPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// setElementName() callback and implementer
// PyObject*  ComplexGeoDataPy::setElementName(PyObject *args){};
// has to be implemented in ComplexGeoDataPyImp.cpp
PyObject * ComplexGeoDataPy::staticCallback_setElementName (PyObject *self, PyObject *args, PyObject * kwd)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'setElementName' of 'Data.ComplexGeoData' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ComplexGeoDataPy*>(self)->setElementName(args, kwd);
        if (ret != nullptr)
            static_cast<ComplexGeoDataPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// getElementName() callback and implementer
// PyObject*  ComplexGeoDataPy::getElementName(PyObject *args){};
// has to be implemented in ComplexGeoDataPyImp.cpp
PyObject * ComplexGeoDataPy::staticCallback_getElementName (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'getElementName' of 'Data.ComplexGeoData' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }


    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ComplexGeoDataPy*>(self)->getElementName(args);
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// getElementIndexedName() callback and implementer
// PyObject*  ComplexGeoDataPy::getElementIndexedName(PyObject *args){};
// has to be implemented in ComplexGeoDataPyImp.cpp
PyObject * ComplexGeoDataPy::staticCallback_getElementIndexedName (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'getElementIndexedName' of 'Data.ComplexGeoData' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }


    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ComplexGeoDataPy*>(self)->getElementIndexedName(args);
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// getElementMappedName() callback and implementer
// PyObject*  ComplexGeoDataPy::getElementMappedName(PyObject *args){};
// has to be implemented in ComplexGeoDataPyImp.cpp
PyObject * ComplexGeoDataPy::staticCallback_getElementMappedName (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'getElementMappedName' of 'Data.ComplexGeoData' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }


    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ComplexGeoDataPy*>(self)->getElementMappedName(args);
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// BoundBox() callback and implementer
// PyObject*  ComplexGeoDataPy::BoundBox(PyObject *args){};
// has to be implemented in ComplexGeoDataPyImp.cpp
PyObject * ComplexGeoDataPy::staticCallback_getBoundBox (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ComplexGeoDataPy*>(self)->getBoundBox());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'BoundBox' of object 'ComplexGeoData'");
        return nullptr;
    }
}

int ComplexGeoDataPy::staticCallback_setBoundBox (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'BoundBox' of object 'ComplexGeoData' is read-only");
    return -1;
}

// CenterOfGravity() callback and implementer
// PyObject*  ComplexGeoDataPy::CenterOfGravity(PyObject *args){};
// has to be implemented in ComplexGeoDataPyImp.cpp
PyObject * ComplexGeoDataPy::staticCallback_getCenterOfGravity (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ComplexGeoDataPy*>(self)->getCenterOfGravity());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'CenterOfGravity' of object 'ComplexGeoData'");
        return nullptr;
    }
}

int ComplexGeoDataPy::staticCallback_setCenterOfGravity (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'CenterOfGravity' of object 'ComplexGeoData' is read-only");
    return -1;
}

// Placement() callback and implementer
// PyObject*  ComplexGeoDataPy::Placement(PyObject *args){};
// has to be implemented in ComplexGeoDataPyImp.cpp
PyObject * ComplexGeoDataPy::staticCallback_getPlacement (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ComplexGeoDataPy*>(self)->getPlacement());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Placement' of object 'ComplexGeoData'");
        return nullptr;
    }
}

int ComplexGeoDataPy::staticCallback_setPlacement (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<ComplexGeoDataPy*>(self)->setPlacement(Py::Object(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'Placement' of object 'ComplexGeoData'");
        return -1;
    }
}

// Tag() callback and implementer
// PyObject*  ComplexGeoDataPy::Tag(PyObject *args){};
// has to be implemented in ComplexGeoDataPyImp.cpp
PyObject * ComplexGeoDataPy::staticCallback_getTag (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ComplexGeoDataPy*>(self)->getTag());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Tag' of object 'ComplexGeoData'");
        return nullptr;
    }
}

int ComplexGeoDataPy::staticCallback_setTag (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<ComplexGeoDataPy*>(self)->setTag(Py::Int(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'Tag' of object 'ComplexGeoData'");
        return -1;
    }
}

// Hasher() callback and implementer
// PyObject*  ComplexGeoDataPy::Hasher(PyObject *args){};
// has to be implemented in ComplexGeoDataPyImp.cpp
PyObject * ComplexGeoDataPy::staticCallback_getHasher (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ComplexGeoDataPy*>(self)->getHasher());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Hasher' of object 'ComplexGeoData'");
        return nullptr;
    }
}

int ComplexGeoDataPy::staticCallback_setHasher (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<ComplexGeoDataPy*>(self)->setHasher(Py::Object(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'Hasher' of object 'ComplexGeoData'");
        return -1;
    }
}

// ElementMapSize() callback and implementer
// PyObject*  ComplexGeoDataPy::ElementMapSize(PyObject *args){};
// has to be implemented in ComplexGeoDataPyImp.cpp
PyObject * ComplexGeoDataPy::staticCallback_getElementMapSize (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ComplexGeoDataPy*>(self)->getElementMapSize());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'ElementMapSize' of object 'ComplexGeoData'");
        return nullptr;
    }
}

int ComplexGeoDataPy::staticCallback_setElementMapSize (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'ElementMapSize' of object 'ComplexGeoData' is read-only");
    return -1;
}

// ElementMap() callback and implementer
// PyObject*  ComplexGeoDataPy::ElementMap(PyObject *args){};
// has to be implemented in ComplexGeoDataPyImp.cpp
PyObject * ComplexGeoDataPy::staticCallback_getElementMap (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ComplexGeoDataPy*>(self)->getElementMap());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'ElementMap' of object 'ComplexGeoData'");
        return nullptr;
    }
}

int ComplexGeoDataPy::staticCallback_setElementMap (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<ComplexGeoDataPy*>(self)->setElementMap(Py::Dict(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'ElementMap' of object 'ComplexGeoData'");
        return -1;
    }
}

// ElementReverseMap() callback and implementer
// PyObject*  ComplexGeoDataPy::ElementReverseMap(PyObject *args){};
// has to be implemented in ComplexGeoDataPyImp.cpp
PyObject * ComplexGeoDataPy::staticCallback_getElementReverseMap (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ComplexGeoDataPy*>(self)->getElementReverseMap());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'ElementReverseMap' of object 'ComplexGeoData'");
        return nullptr;
    }
}

int ComplexGeoDataPy::staticCallback_setElementReverseMap (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'ElementReverseMap' of object 'ComplexGeoData' is read-only");
    return -1;
}

// ElementMapVersion() callback and implementer
// PyObject*  ComplexGeoDataPy::ElementMapVersion(PyObject *args){};
// has to be implemented in ComplexGeoDataPyImp.cpp
PyObject * ComplexGeoDataPy::staticCallback_getElementMapVersion (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ComplexGeoDataPy*>(self)->getElementMapVersion());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'ElementMapVersion' of object 'ComplexGeoData'");
        return nullptr;
    }
}

int ComplexGeoDataPy::staticCallback_setElementMapVersion (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'ElementMapVersion' of object 'ComplexGeoData' is read-only");
    return -1;
}




//--------------------------------------------------------------------------
// Constructor
//--------------------------------------------------------------------------
ComplexGeoDataPy::ComplexGeoDataPy(ComplexGeoData *pcObject, PyTypeObject *T)
    : PersistencePy(static_cast<PersistencePy::PointerType>(pcObject), T)
{
    pcObject->ref();
}

PyObject *ComplexGeoDataPy::PyMake(PyTypeObject* /*type*/, PyObject* /*args*/, PyObject* /*kwds*/)
{
    // never create such objects with the constructor
    PyErr_SetString(PyExc_RuntimeError, "You cannot create directly an instance of 'ComplexGeoDataPy'.");

    return nullptr;
}

int ComplexGeoDataPy::PyInit(PyObject* /*args*/, PyObject* /*kwd*/)
{
    return 0;
}

//--------------------------------------------------------------------------
// destructor
//--------------------------------------------------------------------------
ComplexGeoDataPy::~ComplexGeoDataPy()                                // Everything handled in parent
{
    getComplexGeoDataPtr()->unref();
}

//--------------------------------------------------------------------------
// ComplexGeoDataPy representation
//--------------------------------------------------------------------------
PyObject *ComplexGeoDataPy::_repr()
{
    return Py_BuildValue("s", representation().c_str());
}

//--------------------------------------------------------------------------
// ComplexGeoDataPy Attributes
//--------------------------------------------------------------------------
PyObject *ComplexGeoDataPy::_getattr(const char *attr)			// __getattr__ function: note only need to handle new state
{
    try {
        // getter method for special Attributes (e.g. dynamic ones)
        PyObject *r = getCustomAttributes(attr);
        if(r) return r;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError,"Unknown C++ exception");
        return nullptr;
    }
#endif

    PyMethodDef *ml = Methods;
    for (; ml->ml_name != nullptr; ml++) {
        if (attr[0] == ml->ml_name[0] &&
            strcmp(attr+1, ml->ml_name+1) == 0)
            return PyCFunction_New(ml, this);
    }

    PyErr_Clear();
    return PersistencePy::_getattr(attr);
}

int ComplexGeoDataPy::_setattr(const char *attr, PyObject *value) // __setattr__ function: note only need to handle new state
{
    try {
        // setter for special Attributes (e.g. dynamic ones)
        int r = setCustomAttributes(attr, value);
        // r = 1: handled
        // r = -1: error
        // r = 0: ignore
        if (r == 1)
            return 0;
        else if (r == -1)
            return -1;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return -1;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return -1;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return -1;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return -1;
    }
#endif

    return PersistencePy::_setattr(attr, value);
}

ComplexGeoData *ComplexGeoDataPy::getComplexGeoDataPtr() const
{
    return static_cast<ComplexGeoData *>(_pcTwinPointer);
}

#if defined(__clang__)
# pragma clang diagnostic pop
#endif

#if 0
/* From here on come the methods you have to implement, but NOT in this module. Implement in ComplexGeoDataPyImp.cpp! This prototypes
 * are just for convenience when you add a new method.
 */



// returns a string which represents the object e.g. when printed in python
std::string ComplexGeoDataPy::representation() const
{
    return {"<ComplexGeoData object>"};
}

PyObject* ComplexGeoDataPy::getElementTypes(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ComplexGeoDataPy::countSubElements(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ComplexGeoDataPy::getFacesFromSubElement(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ComplexGeoDataPy::getLinesFromSubElement(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ComplexGeoDataPy::getPoints(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ComplexGeoDataPy::getLines(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ComplexGeoDataPy::getFaces(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ComplexGeoDataPy::applyTranslation(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ComplexGeoDataPy::applyRotation(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ComplexGeoDataPy::transformGeometry(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ComplexGeoDataPy::setElementName(PyObject *args, PyObject *kwds)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ComplexGeoDataPy::getElementName(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ComplexGeoDataPy::getElementIndexedName(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ComplexGeoDataPy::getElementMappedName(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}



Py::Object ComplexGeoDataPy::getBoundBox() const
{
    //return Py::Object();
    throw Py::AttributeError("Not yet implemented");
}

Py::Object ComplexGeoDataPy::getCenterOfGravity() const
{
    //return Py::Object();
    throw Py::AttributeError("Not yet implemented");
}

Py::Object ComplexGeoDataPy::getPlacement() const
{
    //return Py::Object();
    throw Py::AttributeError("Not yet implemented");
}

void  ComplexGeoDataPy::setPlacement(Py::Object arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Int ComplexGeoDataPy::getTag() const
{
    //return Py::Int();
    throw Py::AttributeError("Not yet implemented");
}

void  ComplexGeoDataPy::setTag(Py::Int arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Object ComplexGeoDataPy::getHasher() const
{
    //return Py::Object();
    throw Py::AttributeError("Not yet implemented");
}

void  ComplexGeoDataPy::setHasher(Py::Object arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Int ComplexGeoDataPy::getElementMapSize() const
{
    //return Py::Int();
    throw Py::AttributeError("Not yet implemented");
}

Py::Dict ComplexGeoDataPy::getElementMap() const
{
    //return Py::Dict();
    throw Py::AttributeError("Not yet implemented");
}

void  ComplexGeoDataPy::setElementMap(Py::Dict arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Dict ComplexGeoDataPy::getElementReverseMap() const
{
    //return Py::Dict();
    throw Py::AttributeError("Not yet implemented");
}

Py::String ComplexGeoDataPy::getElementMapVersion() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

PyObject *ComplexGeoDataPy::getCustomAttributes(const char* /*attr*/) const
{
    return nullptr;
}

int ComplexGeoDataPy::setCustomAttributes(const char* /*attr*/, PyObject* /*obj*/)
{
    return 0;
}


#endif



