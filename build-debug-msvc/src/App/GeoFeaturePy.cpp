
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the .XML file
// Every change you make here gets lost in the next full rebuild!
// This File is normally built as an include in GeoFeaturePyImp.cpp! It's not intended to be in a project!

#include <boost/filesystem/path.hpp>
#include <boost/filesystem/operations.hpp>
#include <boost/filesystem/exception.hpp>
#include <Base/PyObjectBase.h>
#include <Base/Console.h>
#include <Base/Exception.h>
#include <CXX/Objects.hxx>

#if defined(__clang__)
# pragma clang diagnostic push
# pragma clang diagnostic ignored "-Wdeprecated-declarations"
#endif

using Base::streq;
using namespace App;

/// Type structure of GeoFeaturePy
PyTypeObject GeoFeaturePy::Type = {
    PyVarObject_HEAD_INIT(&PyType_Type,0)
    "App.GeoFeature",     /*tp_name*/
    sizeof(GeoFeaturePy),                       /*tp_basicsize*/
    0,                                                /*tp_itemsize*/
    /* methods */
    PyDestructor,                                     /*tp_dealloc*/
#if PY_VERSION_HEX >= 0x03080000
    0,                                                /*tp_vectorcall_offset*/
#else
    nullptr,                                          /*tp_print*/
#endif
    nullptr,                                          /*tp_getattr*/
    nullptr,                                          /*tp_setattr*/
    nullptr,                                          /*tp_compare*/
    __repr,                                           /*tp_repr*/
    nullptr,                                          /*tp_as_number*/
    nullptr,                                          /*tp_as_sequence*/
    nullptr,                                          /*tp_as_mapping*/
    nullptr,                                          /*tp_hash*/
    nullptr,                                          /*tp_call */
    nullptr,                                          /*tp_str  */
    __getattro,                                       /*tp_getattro*/
    __setattro,                                       /*tp_setattro*/
    /* --- Functions to access object as input/output buffer ---------*/
    nullptr,                                          /* tp_as_buffer */
    /* --- Flags to define presence of optional/expanded features */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT,        /*tp_flags */
    "App.GeoFeature class.\n"
    "\n"
    "Base class of all geometric document objects.\n"
    "This class does the whole placement and position handling.\n"
    "With the method `getPropertyOfGeometry` is possible to obtain\n"
    "the main geometric property in general form, without reference\n"
    "to any particular property name.",           /*tp_doc */
    nullptr,                                          /*tp_traverse */
    nullptr,                                          /*tp_clear */
    nullptr,                                          /*tp_richcompare */
    0,                                                /*tp_weaklistoffset */
    nullptr,                                          /*tp_iter */
    nullptr,                                          /*tp_iternext */
    App::GeoFeaturePy::Methods,                     /*tp_methods */
    nullptr,                                          /*tp_members */
    App::GeoFeaturePy::GetterSetter,                     /*tp_getset */
    &App::DocumentObjectPy::Type,                        /*tp_base */
    nullptr,                                          /*tp_dict */
    nullptr,                                          /*tp_descr_get */
    nullptr,                                          /*tp_descr_set */
    0,                                                /*tp_dictoffset */
    __PyInit,                                         /*tp_init */
    nullptr,                                          /*tp_alloc */
    App::GeoFeaturePy::PyMake,/*tp_new */
    nullptr,                                          /*tp_free   Low-level free-memory routine */
    nullptr,                                          /*tp_is_gc  For PyObject_IS_GC */
    nullptr,                                          /*tp_bases */
    nullptr,                                          /*tp_mro    method resolution order */
    nullptr,                                          /*tp_cache */
    nullptr,                                          /*tp_subclasses */
    nullptr,                                          /*tp_weaklist */
    nullptr,                                          /*tp_del */
    0,                                                /*tp_version_tag */
    nullptr                                           /*tp_finalize */
#if PY_VERSION_HEX >= 0x03090000
    ,nullptr                                          /*tp_vectorcall */
#if PY_VERSION_HEX >= 0x030c0000
    ,0                                                /*tp_watched */
#endif
#elif PY_VERSION_HEX >= 0x03080000
    ,nullptr                                          /*tp_vectorcall */
    /* bpo-37250: kept for backwards compatibility in CPython 3.8 only */
    ,nullptr                                          /*tp_print */
#endif
};

/// Methods structure of GeoFeaturePy
PyMethodDef GeoFeaturePy::Methods[] = {
    {"getPaths",
        reinterpret_cast<PyCFunction>( staticCallback_getPaths ),
        METH_VARARGS,
        "getPaths()\n"
        "\n"
        "Returns all possible paths to the root of the document.\n"
        "Note: Not implemented."
    },
    {"getGlobalPlacement",
        reinterpret_cast<PyCFunction>( staticCallback_getGlobalPlacement ),
        METH_VARARGS,
        "getGlobalPlacement() -> Base.Placement\n"
        "Deprecated: This function does not handle Links correctly. Use getGlobalPlacementOf instead.\n"
        "\n"
        "Returns the placement of the object in the global coordinate space, respecting all stacked\n"
        "relationships.\n"
        "Note: This function is not available during recompute, as there the placements of parents\n"
        "can change after the execution of this object, rendering the result wrong."
    },
    {"getGlobalPlacementOf",
        reinterpret_cast<PyCFunction>(reinterpret_cast<void (*) ()>( staticCallback_getGlobalPlacementOf )),
        METH_VARARGS|METH_STATIC,
        "getGlobalPlacementOf(targetObj, rootObj, subname) -> Base.Placement\n"
        "Selection example: obj = \"part1\" sub = \"linkToPart2.LinkToBody.Pad.face1\"\n"
        "\n"
        "Global placement of Pad in this context :\n"
        "getGlobalPlacementOf(pad, part1, \"linkToPart2.LinkToBody.Pad.face1\")\n"
        "\n"
        "Global placement of linkToPart2 in this context :\n"
        "getGlobalPlacementOf(linkToPart2, part1, \"linkToPart2.LinkToBody.Pad.face1\")\n"
        "\n"
        "Returns the placement of the object in the global coordinate space, respecting all stacked\n"
        "relationships."
    },
    {"getPropertyNameOfGeometry",
        reinterpret_cast<PyCFunction>( staticCallback_getPropertyNameOfGeometry ),
        METH_VARARGS,
        "getPropertyNameOfGeometry() -> str or None\n"
        "\n"
        "Returns the property name of the actual geometry.\n"
        "For example for a Part feature it returns the value 'Shape', for a mesh feature the value\n"
        "'Mesh' and so on.\n"
        "If an object has no such property then None is returned."
    },
    {"getPropertyOfGeometry",
        reinterpret_cast<PyCFunction>( staticCallback_getPropertyOfGeometry ),
        METH_VARARGS,
        "getPropertyOfGeometry() -> object or None\n"
        "\n"
        "Returns the property of the actual geometry.\n"
        "For example for a Part feature it returns its Shape property, for a Mesh feature its\n"
        "Mesh property and so on.\n"
        "If an object has no such property then None is returned.\n"
        "Unlike to getPropertyNameOfGeometry this function returns the geometry, not its name."
    },
    {nullptr, nullptr, 0, nullptr}		/* Sentinel */
};



/// Attribute structure of GeoFeaturePy
PyGetSetDef GeoFeaturePy::GetterSetter[] = {
    {"ElementMapVersion",
        (getter) staticCallback_getElementMapVersion,
        (setter) staticCallback_setElementMapVersion,
        "Element map version",
        nullptr
    },
    {nullptr, nullptr, nullptr, nullptr, nullptr}		/* Sentinel */
};

// getPaths() callback and implementer
// PyObject*  GeoFeaturePy::getPaths(PyObject *args){};
// has to be implemented in GeoFeaturePyImp.cpp
PyObject * GeoFeaturePy::staticCallback_getPaths (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'getPaths' of 'App.GeoFeature' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<GeoFeaturePy*>(self)->getPaths(args);
        if (ret != nullptr)
            static_cast<GeoFeaturePy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// getGlobalPlacement() callback and implementer
// PyObject*  GeoFeaturePy::getGlobalPlacement(PyObject *args){};
// has to be implemented in GeoFeaturePyImp.cpp
PyObject * GeoFeaturePy::staticCallback_getGlobalPlacement (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'getGlobalPlacement' of 'App.GeoFeature' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<GeoFeaturePy*>(self)->getGlobalPlacement(args);
        if (ret != nullptr)
            static_cast<GeoFeaturePy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// getGlobalPlacementOf() callback and implementer
// PyObject*  GeoFeaturePy::getGlobalPlacementOf(PyObject *args){};
// has to be implemented in GeoFeaturePyImp.cpp
PyObject * GeoFeaturePy::staticCallback_getGlobalPlacementOf (PyObject *self, PyObject *args)
{
    try { // catches all exceptions coming up from c++ and generate a python exception
        (void)self;
        PyObject* ret = GeoFeaturePy::getGlobalPlacementOf(args);
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// getPropertyNameOfGeometry() callback and implementer
// PyObject*  GeoFeaturePy::getPropertyNameOfGeometry(PyObject *args){};
// has to be implemented in GeoFeaturePyImp.cpp
PyObject * GeoFeaturePy::staticCallback_getPropertyNameOfGeometry (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'getPropertyNameOfGeometry' of 'App.GeoFeature' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<GeoFeaturePy*>(self)->getPropertyNameOfGeometry(args);
        if (ret != nullptr)
            static_cast<GeoFeaturePy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// getPropertyOfGeometry() callback and implementer
// PyObject*  GeoFeaturePy::getPropertyOfGeometry(PyObject *args){};
// has to be implemented in GeoFeaturePyImp.cpp
PyObject * GeoFeaturePy::staticCallback_getPropertyOfGeometry (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'getPropertyOfGeometry' of 'App.GeoFeature' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<GeoFeaturePy*>(self)->getPropertyOfGeometry(args);
        if (ret != nullptr)
            static_cast<GeoFeaturePy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// ElementMapVersion() callback and implementer
// PyObject*  GeoFeaturePy::ElementMapVersion(PyObject *args){};
// has to be implemented in GeoFeaturePyImp.cpp
PyObject * GeoFeaturePy::staticCallback_getElementMapVersion (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<GeoFeaturePy*>(self)->getElementMapVersion());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'ElementMapVersion' of object 'GeoFeature'");
        return nullptr;
    }
}

int GeoFeaturePy::staticCallback_setElementMapVersion (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'ElementMapVersion' of object 'GeoFeature' is read-only");
    return -1;
}




//--------------------------------------------------------------------------
// Constructor
//--------------------------------------------------------------------------
GeoFeaturePy::GeoFeaturePy(GeoFeature *pcObject, PyTypeObject *T)
    : DocumentObjectPy(static_cast<DocumentObjectPy::PointerType>(pcObject), T)
{
}

PyObject *GeoFeaturePy::PyMake(PyTypeObject* /*type*/, PyObject* /*args*/, PyObject* /*kwds*/)
{
    // never create such objects with the constructor
    PyErr_SetString(PyExc_RuntimeError, "You cannot create directly an instance of 'GeoFeaturePy'.");

    return nullptr;
}

int GeoFeaturePy::PyInit(PyObject* /*args*/, PyObject* /*kwd*/)
{
    return 0;
}

//--------------------------------------------------------------------------
// destructor
//--------------------------------------------------------------------------
GeoFeaturePy::~GeoFeaturePy()                                // Everything handled in parent
{
}

//--------------------------------------------------------------------------
// GeoFeaturePy representation
//--------------------------------------------------------------------------
PyObject *GeoFeaturePy::_repr()
{
    return Py_BuildValue("s", representation().c_str());
}

//--------------------------------------------------------------------------
// GeoFeaturePy Attributes
//--------------------------------------------------------------------------
PyObject *GeoFeaturePy::_getattr(const char *attr)			// __getattr__ function: note only need to handle new state
{
    try {
        // getter method for special Attributes (e.g. dynamic ones)
        PyObject *r = getCustomAttributes(attr);
        if(r) return r;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return nullptr;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError,"Unknown C++ exception");
        return nullptr;
    }
#endif

    PyMethodDef *ml = Methods;
    for (; ml->ml_name != nullptr; ml++) {
        if (attr[0] == ml->ml_name[0] &&
            strcmp(attr+1, ml->ml_name+1) == 0)
            return PyCFunction_New(ml, this);
    }

    PyErr_Clear();
    return DocumentObjectPy::_getattr(attr);
}

int GeoFeaturePy::_setattr(const char *attr, PyObject *value) // __setattr__ function: note only need to handle new state
{
    try {
        // setter for special Attributes (e.g. dynamic ones)
        int r = setCustomAttributes(attr, value);
        // r = 1: handled
        // r = -1: error
        // r = 0: ignore
        if (r == 1)
            return 0;
        else if (r == -1)
            return -1;
    } // Please sync the following catch implementation with PY_CATCH
    catch(Base::Exception &e)
    {
        auto pye = e.getPyExceptionType();
        if(!pye)
            pye = Base::PyExc_FC_GeneralError;
        PyErr_SetObject(pye, e.getPyObject());
        return -1;
    }
    catch(const std::exception &e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return -1;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return -1;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return -1;
    }
#endif

    return DocumentObjectPy::_setattr(attr, value);
}

GeoFeature *GeoFeaturePy::getGeoFeaturePtr() const
{
    return static_cast<GeoFeature *>(_pcTwinPointer);
}

#if defined(__clang__)
# pragma clang diagnostic pop
#endif

#if 0
/* From here on come the methods you have to implement, but NOT in this module. Implement in GeoFeaturePyImp.cpp! This prototypes
 * are just for convenience when you add a new method.
 */



// returns a string which represents the object e.g. when printed in python
std::string GeoFeaturePy::representation() const
{
    return {"<GeoFeature object>"};
}

PyObject* GeoFeaturePy::getPaths(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* GeoFeaturePy::getGlobalPlacement(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* GeoFeaturePy::getGlobalPlacementOf(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* GeoFeaturePy::getPropertyNameOfGeometry(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* GeoFeaturePy::getPropertyOfGeometry(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}



Py::String GeoFeaturePy::getElementMapVersion() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

PyObject *GeoFeaturePy::getCustomAttributes(const char* /*attr*/) const
{
    return nullptr;
}

int GeoFeaturePy::setCustomAttributes(const char* /*attr*/, PyObject* /*obj*/)
{
    return 0;
}


#endif



