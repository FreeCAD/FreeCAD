
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the XML file
// Every change you make here gets lost in the next full rebuild!
#ifndef APP_STRINGIDPY_H
#define APP_STRINGIDPY_H

#include <Base/BaseClassPy.h>
#include <App/StringHasher.h>
#include <string>


namespace App
{

//===========================================================================
// StringIDPy - Python wrapper
//===========================================================================

/** The python export class for StringID
 */
class AppExport StringIDPy : public Base::BaseClassPy
{
protected:
    ~StringIDPy() override;

public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyGetSetDef    GetterSetter[];
    PyTypeObject *GetType() override {return &Type;}

public:
    StringIDPy(StringID *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(PyTypeObject *, PyObject *, PyObject *);
    int PyInit(PyObject* args, PyObject*k) override;


    using PointerType = StringID*;

    PyObject *_repr() override;        // the representation
    std::string representation() const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    /// callback for the isSame() method
    static PyObject * staticCallback_isSame (PyObject *self, PyObject *args);
    /// implementer for the isSame() method
    PyObject*  isSame(PyObject *args);
    //@}


    /** @name callbacks and implementers for the python object attributes */
    //@{
    ///getter callback for the Value attribute
    static PyObject * staticCallback_getValue (PyObject *self, void *closure);
    /// getter for the Value attribute
    Py::Int getValue() const;
    /// setter callback for the Value attribute
    static int staticCallback_setValue (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Value is read only!
    ///getter callback for the Related attribute
    static PyObject * staticCallback_getRelated (PyObject *self, void *closure);
    /// getter for the Related attribute
    Py::List getRelated() const;
    /// setter callback for the Related attribute
    static int staticCallback_setRelated (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Related is read only!
    ///getter callback for the Data attribute
    static PyObject * staticCallback_getData (PyObject *self, void *closure);
    /// getter for the Data attribute
    Py::String getData() const;
    /// setter callback for the Data attribute
    static int staticCallback_setData (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Data is read only!
    ///getter callback for the IsBinary attribute
    static PyObject * staticCallback_getIsBinary (PyObject *self, void *closure);
    /// getter for the IsBinary attribute
    Py::Boolean getIsBinary() const;
    /// setter callback for the IsBinary attribute
    static int staticCallback_setIsBinary (PyObject *self, PyObject *value, void *closure);
    // no setter method,  IsBinary is read only!
    ///getter callback for the IsHashed attribute
    static PyObject * staticCallback_getIsHashed (PyObject *self, void *closure);
    /// getter for the IsHashed attribute
    Py::Boolean getIsHashed() const;
    /// setter callback for the IsHashed attribute
    static int staticCallback_setIsHashed (PyObject *self, PyObject *value, void *closure);
    // no setter method,  IsHashed is read only!
    ///getter callback for the Index attribute
    static PyObject * staticCallback_getIndex (PyObject *self, void *closure);
    /// getter for the Index attribute
    Py::Int getIndex() const;
    /// setter callback for the Index attribute
    static int staticCallback_setIndex (PyObject *self, PyObject *value, void *closure);
    /// setter for the Index attribute
    void setIndex(Py::Int arg);
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(const char *attr) override;              // __getattr__ function
    int _setattr(const char *attr, PyObject *value) override;   // __setattr__ function

    /// getter for the object handled by this class
    StringID *getStringIDPtr() const;

    /** @name additional declarations and methods for the wrapper class */
    //@{
private:
    friend class StringID;
    int _index = 0;
		
    //@}
};

}  //namespace App

#endif  // APP_STRINGIDPY_H


