
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the XML file
// Every change you make here gets lost in the next full rebuild!
#ifndef APP_STRINGHASHERPY_H
#define APP_STRINGHASHERPY_H

#include <Base/BaseClassPy.h>
#include <App/StringHasher.h>
#include <string>


namespace App
{

//===========================================================================
// StringHasherPy - Python wrapper
//===========================================================================

/** The python export class for StringHasher
 */
class AppExport StringHasherPy : public Base::BaseClassPy
{
protected:
    ~StringHasherPy() override;

public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyGetSetDef    GetterSetter[];
    PyTypeObject *GetType() override {return &Type;}

public:
    StringHasherPy(StringHasher *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(PyTypeObject *, PyObject *, PyObject *);
    int PyInit(PyObject* args, PyObject*k) override;


    using PointerType = StringHasher*;

    PyObject *_repr() override;        // the representation
    std::string representation() const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    /// callback for the getID() method
    static PyObject * staticCallback_getID (PyObject *self, PyObject *args);
    /// implementer for the getID() method
    PyObject*  getID(PyObject *args);
    /// callback for the isSame() method
    static PyObject * staticCallback_isSame (PyObject *self, PyObject *args);
    /// implementer for the isSame() method
    PyObject*  isSame(PyObject *args);
    //@}


    /** @name callbacks and implementers for the python object attributes */
    //@{
    ///getter callback for the Count attribute
    static PyObject * staticCallback_getCount (PyObject *self, void *closure);
    /// getter for the Count attribute
    Py::Int getCount() const;
    /// setter callback for the Count attribute
    static int staticCallback_setCount (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Count is read only!
    ///getter callback for the Size attribute
    static PyObject * staticCallback_getSize (PyObject *self, void *closure);
    /// getter for the Size attribute
    Py::Int getSize() const;
    /// setter callback for the Size attribute
    static int staticCallback_setSize (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Size is read only!
    ///getter callback for the SaveAll attribute
    static PyObject * staticCallback_getSaveAll (PyObject *self, void *closure);
    /// getter for the SaveAll attribute
    Py::Boolean getSaveAll() const;
    /// setter callback for the SaveAll attribute
    static int staticCallback_setSaveAll (PyObject *self, PyObject *value, void *closure);
    /// setter for the SaveAll attribute
    void setSaveAll(Py::Boolean arg);
    ///getter callback for the Threshold attribute
    static PyObject * staticCallback_getThreshold (PyObject *self, void *closure);
    /// getter for the Threshold attribute
    Py::Int getThreshold() const;
    /// setter callback for the Threshold attribute
    static int staticCallback_setThreshold (PyObject *self, PyObject *value, void *closure);
    /// setter for the Threshold attribute
    void setThreshold(Py::Int arg);
    ///getter callback for the Table attribute
    static PyObject * staticCallback_getTable (PyObject *self, void *closure);
    /// getter for the Table attribute
    Py::Dict getTable() const;
    /// setter callback for the Table attribute
    static int staticCallback_setTable (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Table is read only!
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(const char *attr) override;              // __getattr__ function
    int _setattr(const char *attr, PyObject *value) override;   // __setattr__ function

    /// getter for the object handled by this class
    StringHasher *getStringHasherPtr() const;

};

}  //namespace App

#endif  // APP_STRINGHASHERPY_H


