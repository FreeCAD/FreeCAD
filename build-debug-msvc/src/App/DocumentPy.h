
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the XML file
// Every change you make here gets lost in the next full rebuild!
#ifndef APP_DOCUMENTPY_H
#define APP_DOCUMENTPY_H

#include <App/PropertyContainerPy.h>
#include <App/Document.h>
#include <string>


namespace App
{

//===========================================================================
// DocumentPy - Python wrapper
//===========================================================================

/** The python export class for Document
 */
class AppExport DocumentPy : public App::PropertyContainerPy
{
protected:
    ~DocumentPy() override;

public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyGetSetDef    GetterSetter[];
    PyTypeObject *GetType() override {return &Type;}

public:
    DocumentPy(Document *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(PyTypeObject *, PyObject *, PyObject *);
    int PyInit(PyObject* args, PyObject*k) override;


    using PointerType = Document*;

    PyObject *_repr() override;        // the representation
    std::string representation() const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    /// callback for the save() method
    static PyObject * staticCallback_save (PyObject *self, PyObject *args);
    /// implementer for the save() method
    PyObject*  save(PyObject *args);
    /// callback for the saveAs() method
    static PyObject * staticCallback_saveAs (PyObject *self, PyObject *args);
    /// implementer for the saveAs() method
    PyObject*  saveAs(PyObject *args);
    /// callback for the saveCopy() method
    static PyObject * staticCallback_saveCopy (PyObject *self, PyObject *args);
    /// implementer for the saveCopy() method
    PyObject*  saveCopy(PyObject *args);
    /// callback for the load() method
    static PyObject * staticCallback_load (PyObject *self, PyObject *args);
    /// implementer for the load() method
    PyObject*  load(PyObject *args);
    /// callback for the restore() method
    static PyObject * staticCallback_restore (PyObject *self, PyObject *args);
    /// implementer for the restore() method
    PyObject*  restore(PyObject *args);
    /// callback for the isSaved() method
    static PyObject * staticCallback_isSaved (PyObject *self, PyObject *args);
    /// implementer for the isSaved() method
    PyObject*  isSaved(PyObject *args);
    /// callback for the getProgramVersion() method
    static PyObject * staticCallback_getProgramVersion (PyObject *self, PyObject *args);
    /// implementer for the getProgramVersion() method
    PyObject*  getProgramVersion(PyObject *args);
    /// callback for the getFileName() method
    static PyObject * staticCallback_getFileName (PyObject *self, PyObject *args);
    /// implementer for the getFileName() method
    PyObject*  getFileName(PyObject *args);
    /// callback for the getUniqueObjectName() method
    static PyObject * staticCallback_getUniqueObjectName (PyObject *self, PyObject *args);
    /// implementer for the getUniqueObjectName() method
    PyObject*  getUniqueObjectName(PyObject *args);
    /// callback for the mergeProject() method
    static PyObject * staticCallback_mergeProject (PyObject *self, PyObject *args);
    /// implementer for the mergeProject() method
    PyObject*  mergeProject(PyObject *args);
    /// callback for the exportGraphviz() method
    static PyObject * staticCallback_exportGraphviz (PyObject *self, PyObject *args);
    /// implementer for the exportGraphviz() method
    PyObject*  exportGraphviz(PyObject *args);
    /// callback for the openTransaction() method
    static PyObject * staticCallback_openTransaction (PyObject *self, PyObject *args);
    /// implementer for the openTransaction() method
    PyObject*  openTransaction(PyObject *args);
    /// callback for the abortTransaction() method
    static PyObject * staticCallback_abortTransaction (PyObject *self, PyObject *args);
    /// implementer for the abortTransaction() method
    PyObject*  abortTransaction(PyObject *args);
    /// callback for the commitTransaction() method
    static PyObject * staticCallback_commitTransaction (PyObject *self, PyObject *args);
    /// implementer for the commitTransaction() method
    PyObject*  commitTransaction(PyObject *args);
    /// callback for the addObject() method
    static PyObject * staticCallback_addObject (PyObject *self, PyObject *args, PyObject *kwd);
    /// implementer for the addObject() method
    PyObject*  addObject(PyObject *args, PyObject *kwd);
    /// callback for the addProperty() method
    static PyObject * staticCallback_addProperty (PyObject *self, PyObject *args, PyObject *kwd);
    /// implementer for the addProperty() method
    PyObject*  addProperty(PyObject *args, PyObject *kwd);
    /// callback for the removeProperty() method
    static PyObject * staticCallback_removeProperty (PyObject *self, PyObject *args);
    /// implementer for the removeProperty() method
    PyObject*  removeProperty(PyObject *args);
    /// callback for the removeObject() method
    static PyObject * staticCallback_removeObject (PyObject *self, PyObject *args);
    /// implementer for the removeObject() method
    PyObject*  removeObject(PyObject *args);
    /// callback for the copyObject() method
    static PyObject * staticCallback_copyObject (PyObject *self, PyObject *args);
    /// implementer for the copyObject() method
    PyObject*  copyObject(PyObject *args);
    /// callback for the moveObject() method
    static PyObject * staticCallback_moveObject (PyObject *self, PyObject *args);
    /// implementer for the moveObject() method
    PyObject*  moveObject(PyObject *args);
    /// callback for the importLinks() method
    static PyObject * staticCallback_importLinks (PyObject *self, PyObject *args);
    /// implementer for the importLinks() method
    PyObject*  importLinks(PyObject *args);
    /// callback for the undo() method
    static PyObject * staticCallback_undo (PyObject *self, PyObject *args);
    /// implementer for the undo() method
    PyObject*  undo(PyObject *args);
    /// callback for the redo() method
    static PyObject * staticCallback_redo (PyObject *self, PyObject *args);
    /// implementer for the redo() method
    PyObject*  redo(PyObject *args);
    /// callback for the clearUndos() method
    static PyObject * staticCallback_clearUndos (PyObject *self, PyObject *args);
    /// implementer for the clearUndos() method
    PyObject*  clearUndos(PyObject *args);
    /// callback for the clearDocument() method
    static PyObject * staticCallback_clearDocument (PyObject *self, PyObject *args);
    /// implementer for the clearDocument() method
    PyObject*  clearDocument(PyObject *args);
    /// callback for the setClosable() method
    static PyObject * staticCallback_setClosable (PyObject *self, PyObject *args);
    /// implementer for the setClosable() method
    PyObject*  setClosable(PyObject *args);
    /// callback for the isClosable() method
    static PyObject * staticCallback_isClosable (PyObject *self, PyObject *args);
    /// implementer for the isClosable() method
    PyObject*  isClosable(PyObject *args);
    /// callback for the recompute() method
    static PyObject * staticCallback_recompute (PyObject *self, PyObject *args);
    /// implementer for the recompute() method
    PyObject*  recompute(PyObject *args);
    /// callback for the mustExecute() method
    static PyObject * staticCallback_mustExecute (PyObject *self, PyObject *args);
    /// implementer for the mustExecute() method
    PyObject*  mustExecute(PyObject *args);
    /// callback for the purgeTouched() method
    static PyObject * staticCallback_purgeTouched (PyObject *self, PyObject *args);
    /// implementer for the purgeTouched() method
    PyObject*  purgeTouched(PyObject *args);
    /// callback for the isTouched() method
    static PyObject * staticCallback_isTouched (PyObject *self, PyObject *args);
    /// implementer for the isTouched() method
    PyObject*  isTouched(PyObject *args);
    /// callback for the getObject() method
    static PyObject * staticCallback_getObject (PyObject *self, PyObject *args);
    /// implementer for the getObject() method
    PyObject*  getObject(PyObject *args);
    /// callback for the getObjectsByLabel() method
    static PyObject * staticCallback_getObjectsByLabel (PyObject *self, PyObject *args);
    /// implementer for the getObjectsByLabel() method
    PyObject*  getObjectsByLabel(PyObject *args);
    /// callback for the findObjects() method
    static PyObject * staticCallback_findObjects (PyObject *self, PyObject *args, PyObject *kwd);
    /// implementer for the findObjects() method
    PyObject*  findObjects(PyObject *args, PyObject *kwd);
    /// callback for the getLinksTo() method
    static PyObject * staticCallback_getLinksTo (PyObject *self, PyObject *args);
    /// implementer for the getLinksTo() method
    PyObject*  getLinksTo(PyObject *args);
    /// callback for the supportedTypes() method
    static PyObject * staticCallback_supportedTypes (PyObject *self, PyObject *args);
    /// implementer for the supportedTypes() method
    PyObject*  supportedTypes(PyObject *args);
    /// callback for the getTempFileName() method
    static PyObject * staticCallback_getTempFileName (PyObject *self, PyObject *args);
    /// implementer for the getTempFileName() method
    PyObject*  getTempFileName(PyObject *args);
    /// callback for the getDependentDocuments() method
    static PyObject * staticCallback_getDependentDocuments (PyObject *self, PyObject *args);
    /// implementer for the getDependentDocuments() method
    PyObject*  getDependentDocuments(PyObject *args);
    //@}


    /** @name callbacks and implementers for the python object attributes */
    //@{
    ///getter callback for the DependencyGraph attribute
    static PyObject * staticCallback_getDependencyGraph (PyObject *self, void *closure);
    /// getter for the DependencyGraph attribute
    Py::String getDependencyGraph() const;
    /// setter callback for the DependencyGraph attribute
    static int staticCallback_setDependencyGraph (PyObject *self, PyObject *value, void *closure);
    // no setter method,  DependencyGraph is read only!
    ///getter callback for the ActiveObject attribute
    static PyObject * staticCallback_getActiveObject (PyObject *self, void *closure);
    /// getter for the ActiveObject attribute
    Py::Object getActiveObject() const;
    /// setter callback for the ActiveObject attribute
    static int staticCallback_setActiveObject (PyObject *self, PyObject *value, void *closure);
    // no setter method,  ActiveObject is read only!
    ///getter callback for the Objects attribute
    static PyObject * staticCallback_getObjects (PyObject *self, void *closure);
    /// getter for the Objects attribute
    Py::List getObjects() const;
    /// setter callback for the Objects attribute
    static int staticCallback_setObjects (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Objects is read only!
    ///getter callback for the TopologicalSortedObjects attribute
    static PyObject * staticCallback_getTopologicalSortedObjects (PyObject *self, void *closure);
    /// getter for the TopologicalSortedObjects attribute
    Py::List getTopologicalSortedObjects() const;
    /// setter callback for the TopologicalSortedObjects attribute
    static int staticCallback_setTopologicalSortedObjects (PyObject *self, PyObject *value, void *closure);
    // no setter method,  TopologicalSortedObjects is read only!
    ///getter callback for the RootObjects attribute
    static PyObject * staticCallback_getRootObjects (PyObject *self, void *closure);
    /// getter for the RootObjects attribute
    Py::List getRootObjects() const;
    /// setter callback for the RootObjects attribute
    static int staticCallback_setRootObjects (PyObject *self, PyObject *value, void *closure);
    // no setter method,  RootObjects is read only!
    ///getter callback for the RootObjectsIgnoreLinks attribute
    static PyObject * staticCallback_getRootObjectsIgnoreLinks (PyObject *self, void *closure);
    /// getter for the RootObjectsIgnoreLinks attribute
    Py::List getRootObjectsIgnoreLinks() const;
    /// setter callback for the RootObjectsIgnoreLinks attribute
    static int staticCallback_setRootObjectsIgnoreLinks (PyObject *self, PyObject *value, void *closure);
    // no setter method,  RootObjectsIgnoreLinks is read only!
    ///getter callback for the UndoMode attribute
    static PyObject * staticCallback_getUndoMode (PyObject *self, void *closure);
    /// getter for the UndoMode attribute
    Py::Int getUndoMode() const;
    /// setter callback for the UndoMode attribute
    static int staticCallback_setUndoMode (PyObject *self, PyObject *value, void *closure);
    /// setter for the UndoMode attribute
    void setUndoMode(Py::Int arg);
    ///getter callback for the UndoRedoMemSize attribute
    static PyObject * staticCallback_getUndoRedoMemSize (PyObject *self, void *closure);
    /// getter for the UndoRedoMemSize attribute
    Py::Int getUndoRedoMemSize() const;
    /// setter callback for the UndoRedoMemSize attribute
    static int staticCallback_setUndoRedoMemSize (PyObject *self, PyObject *value, void *closure);
    // no setter method,  UndoRedoMemSize is read only!
    ///getter callback for the UndoCount attribute
    static PyObject * staticCallback_getUndoCount (PyObject *self, void *closure);
    /// getter for the UndoCount attribute
    Py::Int getUndoCount() const;
    /// setter callback for the UndoCount attribute
    static int staticCallback_setUndoCount (PyObject *self, PyObject *value, void *closure);
    // no setter method,  UndoCount is read only!
    ///getter callback for the RedoCount attribute
    static PyObject * staticCallback_getRedoCount (PyObject *self, void *closure);
    /// getter for the RedoCount attribute
    Py::Int getRedoCount() const;
    /// setter callback for the RedoCount attribute
    static int staticCallback_setRedoCount (PyObject *self, PyObject *value, void *closure);
    // no setter method,  RedoCount is read only!
    ///getter callback for the UndoNames attribute
    static PyObject * staticCallback_getUndoNames (PyObject *self, void *closure);
    /// getter for the UndoNames attribute
    Py::List getUndoNames() const;
    /// setter callback for the UndoNames attribute
    static int staticCallback_setUndoNames (PyObject *self, PyObject *value, void *closure);
    // no setter method,  UndoNames is read only!
    ///getter callback for the RedoNames attribute
    static PyObject * staticCallback_getRedoNames (PyObject *self, void *closure);
    /// getter for the RedoNames attribute
    Py::List getRedoNames() const;
    /// setter callback for the RedoNames attribute
    static int staticCallback_setRedoNames (PyObject *self, PyObject *value, void *closure);
    // no setter method,  RedoNames is read only!
    ///getter callback for the Name attribute
    static PyObject * staticCallback_getName (PyObject *self, void *closure);
    /// getter for the Name attribute
    Py::String getName() const;
    /// setter callback for the Name attribute
    static int staticCallback_setName (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Name is read only!
    ///getter callback for the RecomputesFrozen attribute
    static PyObject * staticCallback_getRecomputesFrozen (PyObject *self, void *closure);
    /// getter for the RecomputesFrozen attribute
    Py::Boolean getRecomputesFrozen() const;
    /// setter callback for the RecomputesFrozen attribute
    static int staticCallback_setRecomputesFrozen (PyObject *self, PyObject *value, void *closure);
    /// setter for the RecomputesFrozen attribute
    void setRecomputesFrozen(Py::Boolean arg);
    ///getter callback for the HasPendingTransaction attribute
    static PyObject * staticCallback_getHasPendingTransaction (PyObject *self, void *closure);
    /// getter for the HasPendingTransaction attribute
    Py::Boolean getHasPendingTransaction() const;
    /// setter callback for the HasPendingTransaction attribute
    static int staticCallback_setHasPendingTransaction (PyObject *self, PyObject *value, void *closure);
    // no setter method,  HasPendingTransaction is read only!
    ///getter callback for the InList attribute
    static PyObject * staticCallback_getInList (PyObject *self, void *closure);
    /// getter for the InList attribute
    Py::List getInList() const;
    /// setter callback for the InList attribute
    static int staticCallback_setInList (PyObject *self, PyObject *value, void *closure);
    // no setter method,  InList is read only!
    ///getter callback for the OutList attribute
    static PyObject * staticCallback_getOutList (PyObject *self, void *closure);
    /// getter for the OutList attribute
    Py::List getOutList() const;
    /// setter callback for the OutList attribute
    static int staticCallback_setOutList (PyObject *self, PyObject *value, void *closure);
    // no setter method,  OutList is read only!
    ///getter callback for the Restoring attribute
    static PyObject * staticCallback_getRestoring (PyObject *self, void *closure);
    /// getter for the Restoring attribute
    Py::Boolean getRestoring() const;
    /// setter callback for the Restoring attribute
    static int staticCallback_setRestoring (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Restoring is read only!
    ///getter callback for the Partial attribute
    static PyObject * staticCallback_getPartial (PyObject *self, void *closure);
    /// getter for the Partial attribute
    Py::Boolean getPartial() const;
    /// setter callback for the Partial attribute
    static int staticCallback_setPartial (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Partial is read only!
    ///getter callback for the Importing attribute
    static PyObject * staticCallback_getImporting (PyObject *self, void *closure);
    /// getter for the Importing attribute
    Py::Boolean getImporting() const;
    /// setter callback for the Importing attribute
    static int staticCallback_setImporting (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Importing is read only!
    ///getter callback for the Recomputing attribute
    static PyObject * staticCallback_getRecomputing (PyObject *self, void *closure);
    /// getter for the Recomputing attribute
    Py::Boolean getRecomputing() const;
    /// setter callback for the Recomputing attribute
    static int staticCallback_setRecomputing (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Recomputing is read only!
    ///getter callback for the Transacting attribute
    static PyObject * staticCallback_getTransacting (PyObject *self, void *closure);
    /// getter for the Transacting attribute
    Py::Boolean getTransacting() const;
    /// setter callback for the Transacting attribute
    static int staticCallback_setTransacting (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Transacting is read only!
    ///getter callback for the OldLabel attribute
    static PyObject * staticCallback_getOldLabel (PyObject *self, void *closure);
    /// getter for the OldLabel attribute
    Py::String getOldLabel() const;
    /// setter callback for the OldLabel attribute
    static int staticCallback_setOldLabel (PyObject *self, PyObject *value, void *closure);
    // no setter method,  OldLabel is read only!
    ///getter callback for the Temporary attribute
    static PyObject * staticCallback_getTemporary (PyObject *self, void *closure);
    /// getter for the Temporary attribute
    Py::Boolean getTemporary() const;
    /// setter callback for the Temporary attribute
    static int staticCallback_setTemporary (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Temporary is read only!
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(const char *attr) override;              // __getattr__ function
    int _setattr(const char *attr, PyObject *value) override;   // __setattr__ function

    /// getter for the object handled by this class
    Document *getDocumentPtr() const;

};

}  //namespace App

#endif  // APP_DOCUMENTPY_H


