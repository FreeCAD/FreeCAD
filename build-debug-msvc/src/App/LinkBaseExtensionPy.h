
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the XML file
// Every change you make here gets lost in the next full rebuild!
#ifndef APP_LINKBASEEXTENSIONPY_H
#define APP_LINKBASEEXTENSIONPY_H

#include <App/DocumentObjectExtensionPy.h>
#include <App/Link.h>
#include <string>


namespace App
{

//===========================================================================
// LinkBaseExtensionPy - Python wrapper
//===========================================================================

/** The python export class for LinkBaseExtension
 */
class AppExport LinkBaseExtensionPy : public App::DocumentObjectExtensionPy
{
protected:
    ~LinkBaseExtensionPy() override;

public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyGetSetDef    GetterSetter[];
    PyTypeObject *GetType() override {return &Type;}

public:
    LinkBaseExtensionPy(LinkBaseExtension *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(PyTypeObject *, PyObject *, PyObject *);
    int PyInit(PyObject* args, PyObject*k) override;


    using PointerType = LinkBaseExtension*;

    PyObject *_repr() override;        // the representation
    std::string representation() const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    /// callback for the configLinkProperty() method
    static PyObject * staticCallback_configLinkProperty (PyObject *self, PyObject *args, PyObject *kwd);
    /// implementer for the configLinkProperty() method
    PyObject*  configLinkProperty(PyObject *args, PyObject *kwd);
    /// callback for the getLinkExtProperty() method
    static PyObject * staticCallback_getLinkExtProperty (PyObject *self, PyObject *args);
    /// implementer for the getLinkExtProperty() method
    PyObject*  getLinkExtProperty(PyObject *args);
    /// callback for the getLinkExtPropertyName() method
    static PyObject * staticCallback_getLinkExtPropertyName (PyObject *self, PyObject *args);
    /// implementer for the getLinkExtPropertyName() method
    PyObject*  getLinkExtPropertyName(PyObject *args);
    /// callback for the getLinkPropertyInfo() method
    static PyObject * staticCallback_getLinkPropertyInfo (PyObject *self, PyObject *args);
    /// implementer for the getLinkPropertyInfo() method
    PyObject*  getLinkPropertyInfo(PyObject *args);
    /// callback for the setLink() method
    static PyObject * staticCallback_setLink (PyObject *self, PyObject *args);
    /// implementer for the setLink() method
    PyObject*  setLink(PyObject *args);
    /// callback for the cacheChildLabel() method
    static PyObject * staticCallback_cacheChildLabel (PyObject *self, PyObject *args);
    /// implementer for the cacheChildLabel() method
    PyObject*  cacheChildLabel(PyObject *args);
    /// callback for the flattenSubname() method
    static PyObject * staticCallback_flattenSubname (PyObject *self, PyObject *args);
    /// implementer for the flattenSubname() method
    PyObject*  flattenSubname(PyObject *args);
    /// callback for the expandSubname() method
    static PyObject * staticCallback_expandSubname (PyObject *self, PyObject *args);
    /// implementer for the expandSubname() method
    PyObject*  expandSubname(PyObject *args);
    //@}


    /** @name callbacks and implementers for the python object attributes */
    //@{
    ///getter callback for the LinkedChildren attribute
    static PyObject * staticCallback_getLinkedChildren (PyObject *self, void *closure);
    /// getter for the LinkedChildren attribute
    Py::List getLinkedChildren() const;
    /// setter callback for the LinkedChildren attribute
    static int staticCallback_setLinkedChildren (PyObject *self, PyObject *value, void *closure);
    // no setter method,  LinkedChildren is read only!
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(const char *attr) override;              // __getattr__ function
    int _setattr(const char *attr, PyObject *value) override;   // __setattr__ function

    /// getter for the object handled by this class
    LinkBaseExtension *getLinkBaseExtensionPtr() const;

};

}  //namespace App

#endif  // APP_LINKBASEEXTENSIONPY_H


