
// This file is generated by src/Tools/generateTemaplates/templateClassPyExport.py out of the XML file
// Every change you make here get lost at the next full rebuild!
#ifndef APP_DOCUMENTPY_H
#define APP_DOCUMENTPY_H

#include <App/PropertyContainerPy.h>
#include <App/Document.h>
#include <string>

namespace App
{

//===========================================================================
// DocumentPy - Python wrapper
//===========================================================================

/** The python export class for Document
 */
class AppExport DocumentPy : public App::PropertyContainerPy
{
public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyGetSetDef    GetterSetter[];
    virtual PyTypeObject *GetType(void) {return &Type;};

public:
    DocumentPy(Document *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(struct _typeobject *, PyObject *, PyObject *);
    virtual int PyInit(PyObject* args, PyObject*k);
    ~DocumentPy();

    typedef Document* PointerType ;

    virtual PyObject *_repr(void);        // the representation
    std::string representation(void) const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    /// callback for the save() method
    static PyObject * staticCallback_save (PyObject *self, PyObject *args);
    /// implementer for the save() method
    PyObject*  save(PyObject *args);
    /// callback for the saveAs() method
    static PyObject * staticCallback_saveAs (PyObject *self, PyObject *args);
    /// implementer for the saveAs() method
    PyObject*  saveAs(PyObject *args);
    /// callback for the saveCopy() method
    static PyObject * staticCallback_saveCopy (PyObject *self, PyObject *args);
    /// implementer for the saveCopy() method
    PyObject*  saveCopy(PyObject *args);
    /// callback for the load() method
    static PyObject * staticCallback_load (PyObject *self, PyObject *args);
    /// implementer for the load() method
    PyObject*  load(PyObject *args);
    /// callback for the restore() method
    static PyObject * staticCallback_restore (PyObject *self, PyObject *args);
    /// implementer for the restore() method
    PyObject*  restore(PyObject *args);
    /// callback for the mergeProject() method
    static PyObject * staticCallback_mergeProject (PyObject *self, PyObject *args);
    /// implementer for the mergeProject() method
    PyObject*  mergeProject(PyObject *args);
    /// callback for the exportGraphviz() method
    static PyObject * staticCallback_exportGraphviz (PyObject *self, PyObject *args);
    /// implementer for the exportGraphviz() method
    PyObject*  exportGraphviz(PyObject *args);
    /// callback for the openTransaction() method
    static PyObject * staticCallback_openTransaction (PyObject *self, PyObject *args);
    /// implementer for the openTransaction() method
    PyObject*  openTransaction(PyObject *args);
    /// callback for the abortTransaction() method
    static PyObject * staticCallback_abortTransaction (PyObject *self, PyObject *args);
    /// implementer for the abortTransaction() method
    PyObject*  abortTransaction(PyObject *args);
    /// callback for the commitTransaction() method
    static PyObject * staticCallback_commitTransaction (PyObject *self, PyObject *args);
    /// implementer for the commitTransaction() method
    PyObject*  commitTransaction(PyObject *args);
    /// callback for the addObject() method
    static PyObject * staticCallback_addObject (PyObject *self, PyObject *args);
    /// implementer for the addObject() method
    PyObject*  addObject(PyObject *args);
    /// callback for the removeObject() method
    static PyObject * staticCallback_removeObject (PyObject *self, PyObject *args);
    /// implementer for the removeObject() method
    PyObject*  removeObject(PyObject *args);
    /// callback for the copyObject() method
    static PyObject * staticCallback_copyObject (PyObject *self, PyObject *args);
    /// implementer for the copyObject() method
    PyObject*  copyObject(PyObject *args);
    /// callback for the moveObject() method
    static PyObject * staticCallback_moveObject (PyObject *self, PyObject *args);
    /// implementer for the moveObject() method
    PyObject*  moveObject(PyObject *args);
    /// callback for the undo() method
    static PyObject * staticCallback_undo (PyObject *self, PyObject *args);
    /// implementer for the undo() method
    PyObject*  undo(PyObject *args);
    /// callback for the redo() method
    static PyObject * staticCallback_redo (PyObject *self, PyObject *args);
    /// implementer for the redo() method
    PyObject*  redo(PyObject *args);
    /// callback for the clearUndos() method
    static PyObject * staticCallback_clearUndos (PyObject *self, PyObject *args);
    /// implementer for the clearUndos() method
    PyObject*  clearUndos(PyObject *args);
    /// callback for the recompute() method
    static PyObject * staticCallback_recompute (PyObject *self, PyObject *args);
    /// implementer for the recompute() method
    PyObject*  recompute(PyObject *args);
    /// callback for the getObject() method
    static PyObject * staticCallback_getObject (PyObject *self, PyObject *args);
    /// implementer for the getObject() method
    PyObject*  getObject(PyObject *args);
    /// callback for the getObjectsByLabel() method
    static PyObject * staticCallback_getObjectsByLabel (PyObject *self, PyObject *args);
    /// implementer for the getObjectsByLabel() method
    PyObject*  getObjectsByLabel(PyObject *args);
    /// callback for the findObjects() method
    static PyObject * staticCallback_findObjects (PyObject *self, PyObject *args);
    /// implementer for the findObjects() method
    PyObject*  findObjects(PyObject *args);
    /// callback for the supportedTypes() method
    static PyObject * staticCallback_supportedTypes (PyObject *self, PyObject *args);
    /// implementer for the supportedTypes() method
    PyObject*  supportedTypes(PyObject *args);
    /// callback for the getTempFileName() method
    static PyObject * staticCallback_getTempFileName (PyObject *self, PyObject *args);
    /// implementer for the getTempFileName() method
    PyObject*  getTempFileName(PyObject *args);
    //@}


    /** @name callbacks and implementers for the python object attributes */
    //@{
    ///getter callback for the DependencyGraph attribute
    static PyObject * staticCallback_getDependencyGraph (PyObject *self, void *closure);
    /// getter for the DependencyGraph attribute
    Py::String getDependencyGraph(void) const;
    /// setter callback for the DependencyGraph attribute
    static int staticCallback_setDependencyGraph (PyObject *self, PyObject *value, void *closure);
    // no setter method,  DependencyGraph is read only!
    ///getter callback for the ActiveObject attribute
    static PyObject * staticCallback_getActiveObject (PyObject *self, void *closure);
    /// getter for the ActiveObject attribute
    Py::Object getActiveObject(void) const;
    /// setter callback for the ActiveObject attribute
    static int staticCallback_setActiveObject (PyObject *self, PyObject *value, void *closure);
    // no setter method,  ActiveObject is read only!
    ///getter callback for the Objects attribute
    static PyObject * staticCallback_getObjects (PyObject *self, void *closure);
    /// getter for the Objects attribute
    Py::List getObjects(void) const;
    /// setter callback for the Objects attribute
    static int staticCallback_setObjects (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Objects is read only!
    ///getter callback for the UndoMode attribute
    static PyObject * staticCallback_getUndoMode (PyObject *self, void *closure);
    /// getter for the UndoMode attribute
    Py::Int getUndoMode(void) const;
    /// setter callback for the UndoMode attribute
    static int staticCallback_setUndoMode (PyObject *self, PyObject *value, void *closure);
    /// setter for the UndoMode attribute
    void setUndoMode(Py::Int arg);
    ///getter callback for the UndoRedoMemSize attribute
    static PyObject * staticCallback_getUndoRedoMemSize (PyObject *self, void *closure);
    /// getter for the UndoRedoMemSize attribute
    Py::Int getUndoRedoMemSize(void) const;
    /// setter callback for the UndoRedoMemSize attribute
    static int staticCallback_setUndoRedoMemSize (PyObject *self, PyObject *value, void *closure);
    // no setter method,  UndoRedoMemSize is read only!
    ///getter callback for the UndoCount attribute
    static PyObject * staticCallback_getUndoCount (PyObject *self, void *closure);
    /// getter for the UndoCount attribute
    Py::Int getUndoCount(void) const;
    /// setter callback for the UndoCount attribute
    static int staticCallback_setUndoCount (PyObject *self, PyObject *value, void *closure);
    // no setter method,  UndoCount is read only!
    ///getter callback for the RedoCount attribute
    static PyObject * staticCallback_getRedoCount (PyObject *self, void *closure);
    /// getter for the RedoCount attribute
    Py::Int getRedoCount(void) const;
    /// setter callback for the RedoCount attribute
    static int staticCallback_setRedoCount (PyObject *self, PyObject *value, void *closure);
    // no setter method,  RedoCount is read only!
    ///getter callback for the UndoNames attribute
    static PyObject * staticCallback_getUndoNames (PyObject *self, void *closure);
    /// getter for the UndoNames attribute
    Py::List getUndoNames(void) const;
    /// setter callback for the UndoNames attribute
    static int staticCallback_setUndoNames (PyObject *self, PyObject *value, void *closure);
    // no setter method,  UndoNames is read only!
    ///getter callback for the RedoNames attribute
    static PyObject * staticCallback_getRedoNames (PyObject *self, void *closure);
    /// getter for the RedoNames attribute
    Py::List getRedoNames(void) const;
    /// setter callback for the RedoNames attribute
    static int staticCallback_setRedoNames (PyObject *self, PyObject *value, void *closure);
    // no setter method,  RedoNames is read only!
    ///getter callback for the Name attribute
    static PyObject * staticCallback_getName (PyObject *self, void *closure);
    /// getter for the Name attribute
    Py::String getName(void) const;
    /// setter callback for the Name attribute
    static int staticCallback_setName (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Name is read only!
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(char *attr);              // __getattr__ function
    int _setattr(char *attr, PyObject *value);        // __setattr__ function

    /// getter for the object handled by this class
    Document *getDocumentPtr(void) const;

    /** @name additional declarations and methods for the wrapper class */
    //@{

    //@}
};

}  //namespace App

#endif  // APP_DOCUMENTPY_H


