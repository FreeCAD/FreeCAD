
// This file is generated by src/Tools/generateTemaplates/templateClassPyExport.py out of the XML file
// Every change you make here get lost at the next full rebuild!
#ifndef GUI_SELECTIONOBJECTPY_H
#define GUI_SELECTIONOBJECTPY_H

#include <Base/BaseClassPy.h>
#include <Gui/SelectionObject.h>
#include <string>

namespace Gui
{

//===========================================================================
// SelectionObjectPy - Python wrapper
//===========================================================================

/** The python export class for SelectionObject
 */
class GuiExport SelectionObjectPy : public Base::BaseClassPy
{
public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyGetSetDef    GetterSetter[];
    virtual PyTypeObject *GetType(void) {return &Type;};

public:
    SelectionObjectPy(SelectionObject *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(struct _typeobject *, PyObject *, PyObject *);
    virtual int PyInit(PyObject* args, PyObject*k);
    ~SelectionObjectPy();

    typedef SelectionObject* PointerType ;

    virtual PyObject *_repr(void);        // the representation
    std::string representation(void) const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    /// callback for the remove() method
    static PyObject * staticCallback_remove (PyObject *self, PyObject *args);
    /// implementer for the remove() method
    PyObject*  remove(PyObject *args);
    /// callback for the isObjectTypeOf() method
    static PyObject * staticCallback_isObjectTypeOf (PyObject *self, PyObject *args);
    /// implementer for the isObjectTypeOf() method
    PyObject*  isObjectTypeOf(PyObject *args);
    //@}


    /** @name callbacks and implementers for the python object attributes */
    //@{
    ///getter callback for the ObjectName attribute
    static PyObject * staticCallback_getObjectName (PyObject *self, void *closure);
    /// getter for the ObjectName attribute
    Py::String getObjectName(void) const;
    /// setter callback for the ObjectName attribute
    static int staticCallback_setObjectName (PyObject *self, PyObject *value, void *closure);
    // no setter method,  ObjectName is read only!
    ///getter callback for the SubElementNames attribute
    static PyObject * staticCallback_getSubElementNames (PyObject *self, void *closure);
    /// getter for the SubElementNames attribute
    Py::Tuple getSubElementNames(void) const;
    /// setter callback for the SubElementNames attribute
    static int staticCallback_setSubElementNames (PyObject *self, PyObject *value, void *closure);
    // no setter method,  SubElementNames is read only!
    ///getter callback for the FullName attribute
    static PyObject * staticCallback_getFullName (PyObject *self, void *closure);
    /// getter for the FullName attribute
    Py::String getFullName(void) const;
    /// setter callback for the FullName attribute
    static int staticCallback_setFullName (PyObject *self, PyObject *value, void *closure);
    // no setter method,  FullName is read only!
    ///getter callback for the TypeName attribute
    static PyObject * staticCallback_getTypeName (PyObject *self, void *closure);
    /// getter for the TypeName attribute
    Py::String getTypeName(void) const;
    /// setter callback for the TypeName attribute
    static int staticCallback_setTypeName (PyObject *self, PyObject *value, void *closure);
    // no setter method,  TypeName is read only!
    ///getter callback for the DocumentName attribute
    static PyObject * staticCallback_getDocumentName (PyObject *self, void *closure);
    /// getter for the DocumentName attribute
    Py::String getDocumentName(void) const;
    /// setter callback for the DocumentName attribute
    static int staticCallback_setDocumentName (PyObject *self, PyObject *value, void *closure);
    // no setter method,  DocumentName is read only!
    ///getter callback for the Document attribute
    static PyObject * staticCallback_getDocument (PyObject *self, void *closure);
    /// getter for the Document attribute
    Py::Object getDocument(void) const;
    /// setter callback for the Document attribute
    static int staticCallback_setDocument (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Document is read only!
    ///getter callback for the Object attribute
    static PyObject * staticCallback_getObject (PyObject *self, void *closure);
    /// getter for the Object attribute
    Py::Object getObject(void) const;
    /// setter callback for the Object attribute
    static int staticCallback_setObject (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Object is read only!
    ///getter callback for the SubObjects attribute
    static PyObject * staticCallback_getSubObjects (PyObject *self, void *closure);
    /// getter for the SubObjects attribute
    Py::Tuple getSubObjects(void) const;
    /// setter callback for the SubObjects attribute
    static int staticCallback_setSubObjects (PyObject *self, PyObject *value, void *closure);
    // no setter method,  SubObjects is read only!
    ///getter callback for the PickedPoints attribute
    static PyObject * staticCallback_getPickedPoints (PyObject *self, void *closure);
    /// getter for the PickedPoints attribute
    Py::Tuple getPickedPoints(void) const;
    /// setter callback for the PickedPoints attribute
    static int staticCallback_setPickedPoints (PyObject *self, PyObject *value, void *closure);
    // no setter method,  PickedPoints is read only!
    ///getter callback for the HasSubObjects attribute
    static PyObject * staticCallback_getHasSubObjects (PyObject *self, void *closure);
    /// getter for the HasSubObjects attribute
    Py::Boolean getHasSubObjects(void) const;
    /// setter callback for the HasSubObjects attribute
    static int staticCallback_setHasSubObjects (PyObject *self, PyObject *value, void *closure);
    // no setter method,  HasSubObjects is read only!
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(char *attr);              // __getattr__ function
    int _setattr(char *attr, PyObject *value);        // __setattr__ function

    /// getter for the object handled by this class
    SelectionObject *getSelectionObjectPtr(void) const;

    /** @name additional declarations and methods for the wrapper class */
    //@{

    //@}
};

}  //namespace Gui

#endif  // GUI_SELECTIONOBJECTPY_H


