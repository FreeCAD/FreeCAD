const char FreeCADGuiInit[] ="# FreeCAD gui init module\n"
"# (c) 2003 Juergen Riegel\n"
"#\n"
"# Gathering all the information to start FreeCAD\n"
"# This is the second one of three init scripts, the third one\n"
"# runs when the gui is up\n"
"\n"
"#***************************************************************************\n"
"#*   (c) Juergen Riegel (juergen.riegel@web.de) 2002                       *\n"
"#*                                                                         *\n"
"#*   This file is part of the FreeCAD CAx development system.              *\n"
"#*                                                                         *\n"
"#*   This program is free software; you can redistribute it and/or modify  *\n"
"#*   it under the terms of the GNU Lesser General Public License (LGPL)    *\n"
"#*   as published by the Free Software Foundation; either version 2 of     *\n"
"#*   the License, or (at your option) any later version.                   *\n"
"#*   for detail see the LICENCE text file.                                 *\n"
"#*                                                                         *\n"
"#*   FreeCAD is distributed in the hope that it will be useful,            *\n"
"#*   but WITHOUT ANY WARRANTY; without even the implied warranty of        *\n"
"#*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *\n"
"#*   GNU Lesser General Public License for more details.                   *\n"
"#*                                                                         *\n"
"#*   You should have received a copy of the GNU Library General Public     *\n"
"#*   License along with FreeCAD; if not, write to the Free Software        *\n"
"#*   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  *\n"
"#*   USA                                                                   *\n"
"#*                                                                         *\n"
"#*   Juergen Riegel 2002                                                   *\n"
"#***************************************************************************/\n"
"\n"
"\n"
"# imports the one and only\n"
"import FreeCAD, FreeCADGui\n"
"\n"
"# shortcuts\n"
"Gui = FreeCADGui\n"
"\n"
"# Important definitions\n"
"class Workbench:\n"
"	\"\"\"The workbench base class.\"\"\"\n"
"	MenuText = \"\"\n"
"	ToolTip = \"\"\n"
"\n"
"	def Initialize(self):\n"
"		\"\"\"Initializes this workbench.\"\"\"\n"
"		App.PrintWarning(str(self) + \": Workbench.Initialize() not implemented in subclass!\")\n"
"	def ContextMenu(self, recipient):\n"
"		pass\n"
"	def appendToolbar(self,name,cmds):\n"
"		self.__Workbench__.appendToolbar(name, cmds)\n"
"	def removeToolbar(self,name):\n"
"		self.__Workbench__.removeToolbar(name)\n"
"	def appendCommandbar(self,name,cmds):\n"
"		self.__Workbench__.appendCommandbar(name, cmds)\n"
"	def removeCommandbar(self,name):\n"
"		self.__Workbench__.removeCommandbar(name)\n"
"	def appendMenu(self,name,cmds):\n"
"		self.__Workbench__.appendMenu(name, cmds)\n"
"	def removeMenu(self,name):\n"
"		self.__Workbench__.removeMenu(name)\n"
"	def listMenus(self):\n"
"		return self.__Workbench__.listMenus()\n"
"	def appendContextMenu(self,name,cmds):\n"
"		self.__Workbench__.appendContextMenu(name, cmds)\n"
"	def removeContextMenu(self,name):\n"
"		self.__Workbench__.removeContextMenu(name)\n"
"	def name(self):\n"
"		return self.__Workbench__.name()\n"
"	def GetClassName(self):\n"
"		\"\"\"Return the name of the associated C++ class.\"\"\"\n"
"		# as default use this to simplify writing workbenches in Python\n"
"		return \"Gui::PythonWorkbench\"\n"
"\n"
"\n"
"class StandardWorkbench ( Workbench ):\n"
"	\"\"\"A workbench defines the tool bars, command bars, menus,\n"
"context menu and dockable windows of the main window.\n"
"	\"\"\"\n"
"	def Initialize(self):\n"
"		\"\"\"Initialize this workbench.\"\"\"\n"
"		# load the module\n"
"		Log (\'Init: Loading FreeCAD GUI\\n\')\n"
"	def GetClassName(self):\n"
"		\"\"\"Return the name of the associated C++ class.\"\"\"\n"
"		return \"Gui::StdWorkbench\"\n"
"\n"
"class NoneWorkbench ( Workbench ):\n"
"	\"\"\"An empty workbench.\"\"\"\n"
"	MenuText = \"<none>\"\n"
"	ToolTip = \"The default empty workbench\"\n"
"	def Initialize(self):\n"
"		\"\"\"Initialize this workbench.\"\"\"\n"
"		# load the module\n"
"		Log (\'Init: Loading FreeCAD GUI\\n\')\n"
"	def GetClassName(self):\n"
"		\"\"\"Return the name of the associated C++ class.\"\"\"\n"
"		return \"Gui::NoneWorkbench\"\n"
"\n"
"def InitApplications():\n"
"	import sys,os,traceback,cStringIO\n"
"	# Searching modules dirs +++++++++++++++++++++++++++++++++++++++++++++++++++\n"
"	# (additional module paths are already cached)\n"
"	ModDirs = FreeCAD.__path__\n"
"	#print ModDirs\n"
"	Log(\'Init:   Searching modules...\\n\')\n"
"	for Dir in ModDirs:\n"
"		if ((Dir != \'\') & (Dir != \'CVS\') & (Dir != \'__init__.py\')):\n"
"			InstallFile = os.path.join(Dir,\"InitGui.py\")\n"
"			if (os.path.exists(InstallFile)):\n"
"				try:\n"
"					#execfile(InstallFile)\n"
"					exec open(InstallFile).read()\n"
"				except Exception, inst:\n"
"					Log(\'Init:      Initializing \' + Dir + \'... failed\\n\')\n"
"					Log(\'-\'*100+\'\\n\')\n"
"					output=cStringIO.StringIO()\n"
"					traceback.print_exc(file=output)\n"
"					Log(output.getvalue())\n"
"					Log(\'-\'*100+\'\\n\')\n"
"					Err(\'During initialization the error \' + str(inst).decode(\'ascii\',\'replace\') + \' occurred in \' + InstallFile + \'\\n\')\n"
"				else:\n"
"					Log(\'Init:      Initializing \' + Dir + \'... done\\n\')\n"
"			else:\n"
"				Log(\'Init:      Initializing \' + Dir + \'(InitGui.py not found)... ignore\\n\')\n"
"\n"
"\n"
"Log (\'Init: Running FreeCADGuiInit.py start script...\\n\')\n"
"\n"
"# init the gui\n"
"\n"
"# signal that the gui is up\n"
"App.GuiUp = 1\n"
"App.Gui = FreeCADGui\n"
"FreeCADGui.Workbench = Workbench\n"
"\n"
"Gui.addWorkbench(NoneWorkbench())\n"
"\n"
"# init modules\n"
"InitApplications()\n"
"\n"
"# set standard workbench (needed as fallback)\n"
"Gui.activateWorkbench(\"NoneWorkbench\")\n"
"\n"
"# Register .py, .FCScript and .FCMacro\n"
"FreeCAD.addImportType(\"Inventor V2.1 (*.iv)\",\"FreeCADGui\")\n"
"FreeCAD.addImportType(\"VRML V2.0 (*.wrl *.vrml *.wrz *.wrl.gz)\",\"FreeCADGui\")\n"
"FreeCAD.addImportType(\"Python (*.py *.FCMacro *.FCScript)\",\"FreeCADGui\")\n"
"FreeCAD.addExportType(\"Inventor V2.1 (*.iv)\",\"FreeCADGui\")\n"
"FreeCAD.addExportType(\"VRML V2.0 (*.wrl *.vrml *.wrz *.wrl.gz)\",\"FreeCADGui\")\n"
"#FreeCAD.addExportType(\"IDTF (for 3D PDF) (*.idtf)\",\"FreeCADGui\")\n"
"#FreeCAD.addExportType(\"3D View (*.svg)\",\"FreeCADGui\")\n"
"FreeCAD.addExportType(\"Portable Document Format (*.pdf)\",\"FreeCADGui\")\n"
"\n"
"del(InitApplications)\n"
"del(NoneWorkbench)\n"
"del(StandardWorkbench)\n"
"\n"
"\n"
"Log (\'Init: Running FreeCADGuiInit.py start script... done\\n\')\n"
;


