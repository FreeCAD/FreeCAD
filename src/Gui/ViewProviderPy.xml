<?xml version="1.0" encoding="UTF-8"?>
<GenerateModel xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="generateMetaModel_Module.xsd">
    <PythonExport
        Father="ExtensionContainerPy"
        Name="ViewProviderPy"
        Twin="ViewProvider"
        TwinPointer="ViewProvider"
        Include="Gui/ViewProvider.h"
        Namespace="Gui"
        FatherInclude="App/ExtensionContainerPy.h"
        FatherNamespace="App">
        <Documentation>
            <Author Licence="LGPL" Name="Werner Mayer" EMail="wmayer@users.sourceforge.net" />
            <UserDocu>This is the ViewProvider base class</UserDocu>
        </Documentation>
        <Methode Name="addProperty">
            <Documentation>
                <UserDocu>addProperty(type, name, group, doc, attr=0, ro=False, hd=False) -> ViewProvider\n
Add a generic property.\n
type : str\n    Property type.
name : str\n    Property name. Optional.
group : str\n    Property group. Optional.
attr : int\n    Property attributes.
ro : bool\n    Read only property.
hd : bool\n    Hidden property.</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="removeProperty">
            <Documentation>
                <UserDocu>removeProperty(name) -> bool\n
Remove a generic property.
Only user-defined properties can be removed, not built-in ones.\n
name : str\n    Property name.</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="supportedProperties">
            <Documentation>
                <UserDocu>supportedProperties() -> list\n
A list of supported property types.</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="show">
            <Documentation>
                <UserDocu>show() -> None\n
Show the object.</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="hide">
            <Documentation>
                <UserDocu>show() -> None\n
Hide the object.</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="isVisible">
            <Documentation>
                <UserDocu>isVisible() -> bool\n
Check if the object is visible.</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="canDragObject">
            <Documentation>
                <UserDocu>canDragObject(obj) -> bool\n
Check whether the child object can be removed by dragging.
If 'obj' is not given, check without filter by any particular object.\n
obj : App.DocumentObject\n    Object to be dragged. Optional.</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="dragObject">
            <Documentation>
                <UserDocu>dragObject(obj) -> None\n
Remove a child object by dropping.\n
obj : App.DocumentObject\n    Object to be dragged.</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="canDropObject" Keyword="true">
            <Documentation>
                <UserDocu>canDropObject(obj, owner, subname, elem) -> bool\n
Check whether the child object can be added by dropping.
If 'obj' is not given, check without filter by any particular object.\n
obj : App.DocumentObject\n    Object to be dropped. Optional.
owner : App.DocumentObject\n    Parent object of the dropping object. Optional.
subname : str\n    Subname reference to the dropping object. Optional.
elem : sequence of str\n    Non-objects subelements selected when the object is
    being dropped. Optional.</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="dropObject" Keyword="true">
            <Documentation>
                <UserDocu>dropObject(obj, owner, subname, elem) -> str\n
Add a child object by dropping.\n
obj : App.DocumentObject\n    Object to be dropped.
owner : App.DocumentObject\n    Parent object of the dropping object. Optional.
subname : str\n    Subname reference to the dropping object. Optional.
elem : sequence of str\n    Non-objects subelements selected when the object is
    being dropped. Optional.</UserDocu>
</Documentation>
        </Methode>
        <Methode Name="canDragAndDropObject">
            <Documentation>
                <UserDocu>canDragAndDropObject(obj) -> bool\n
Check whether the child object can be removed from
other parent and added here by drag and drop.\n
obj : App.DocumentObject\n    Object to be dragged and dropped.</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="replaceObject">
            <Documentation>
                <UserDocu>replaceObject(oldObj, newObj) -> int\n
Replace a child object.
Returns 1 if succeeded, 0 if not found, -1 if not supported.\n
oldObj : App.DocumentObject\n    Old object.
newObj : App.DocumentObject\n    New object.</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="doubleClicked">
            <Documentation>
                <UserDocu>doubleClicked() -> bool\n
Trigger double clicking the corresponding tree item of this view object.</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="addDisplayMode">
            <Documentation>
                <UserDocu>addDisplayMode(obj, mode) -> None\n
Add a new display mode to the view provider.\n
obj : coin.SoNode\n    Display mode.
mode : str\n    Name of the display mode.</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="listDisplayModes">
            <Documentation>
                <UserDocu>listDisplayModes() -> list\n
Show a list of all display modes.</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="toString">
            <Documentation>
                <UserDocu>toString() -> str\n
Return a string representation of the Inventor node.</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="setTransformation">
            <Documentation>
                <UserDocu>setTransformation(trans) -> None\n
Set a transformation on the Inventor node.\n
trans : Base.Placement, Base.Matrix</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="claimChildren" Const="true">
            <Documentation>
                <UserDocu>claimChildren() -> list\n
Returns list of objects that are to be grouped in tree under this object.</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="partialRender">
            <Documentation>
                <UserDocu>partialRender(sub=None, clear=False) -> int\n
Render only part of the object.\n
sub: None, str, sequence of str\n    Refer to the subelement. If it is None then reset the partial rendering.
clear: bool\n    True to add, or False to remove the subelement(s) for rendering.</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="getElementColors">
            <Documentation>
                <UserDocu>getElementColors(elementName) -> dict\n
Get a dictionary of the form {elementName : (r,g,b,a)}.
If no element name is given a dictionary with all the elements is returned.\n
elementName : str\n    Name of the element. Optional.</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="setElementColors">
            <Documentation>
                <UserDocu>setElementColors(colors) -> None\n
Set element colors.\n
colors: dict\n    Color dictionary of the form {elementName:(r,g,b,a)}.</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="getElementPicked" Const="true">
            <Documentation>
                <UserDocu>getElementPicked(pickPoint) -> str\n
Return the picked subelement.\n
pickPoint : coin.SoPickedPoint</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="getDetailPath" Const="true">
            <Documentation>
                <UserDocu>getDetailPath(subelement, path, append=True) -> coin.SoDetail or None\n
Return Coin detail and path of an subelement.\n
subname: str\n    Dot separated string reference to the sub element.
pPath: coin.SoPath\n    Output coin path leading to the returned element detail.
append: bool\n    If True, path will be first appended with the root node and the mode
    switch node of this view provider.</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="signalChangeIcon" Const="true">
            <Documentation>
                <UserDocu>signalChangeIcon() -> None\n
Trigger icon changed signal.</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="getBoundingBox">
            <Documentation>
                <UserDocu>getBoundingBox(subName, transform=True, view) -> Base.BoundBox\n
Obtain the bounding box of this view object.\n
subName : str\n    Name referring a sub-object. Optional.
transform: bool\n    Whether to apply the transformation matrix of this view provider.
view: View3DInventorPy\n    Default to active view. Optional.</UserDocu>
            </Documentation>
        </Methode>
        <Attribute Name="Annotation" ReadOnly="false">
            <Documentation>
                <UserDocu>A pivy Separator to add a custom scenegraph to this ViewProvider.</UserDocu>
            </Documentation>
            <Parameter Name="Annotation" Type="Object" />
        </Attribute>
    <Attribute Name="Icon" ReadOnly="true">
      <Documentation>
        <UserDocu>The icon of this ViewProvider.</UserDocu>
      </Documentation>
      <Parameter Name="Icon" Type="Object" />
    </Attribute>
    <Attribute Name="RootNode" ReadOnly="false">
      <Documentation>
        <UserDocu>A pivy Separator with the root of this ViewProvider.</UserDocu>
      </Documentation>
      <Parameter Name="RootNode" Type="Object" />
    </Attribute>
    <Attribute Name="SwitchNode" ReadOnly="false">
      <Documentation>
        <UserDocu>A pivy SoSwitch for the display mode switch of this ViewProvider.</UserDocu>
      </Documentation>
      <Parameter Name="SwitchNode" Type="Object" />
    </Attribute>
    <Attribute Name="DefaultMode" ReadOnly="false">
      <Documentation>
        <UserDocu>Get/Set the default display mode in turns of coin node index.</UserDocu>
      </Documentation>
      <Parameter Name="DefaultNode" Type="Int" />
    </Attribute>
    <Attribute Name="IV" ReadOnly="true">
      <Documentation>
        <UserDocu>Represents the whole ViewProvider as an Inventor string.</UserDocu>
      </Documentation>
      <Parameter Name="IV" Type="String" />
    </Attribute>
    <Attribute Name="CanRemoveChildrenFromRoot" ReadOnly="true">
      <Documentation>
        <UserDocu>Tells the tree view whether to remove the children item from root or not.</UserDocu>
      </Documentation>
      <Parameter Name="CanRemoveChildrenFromRoot" Type="Boolean" />
    </Attribute>
    <Attribute Name="LinkVisibility">
      <Documentation>
          <UserDocu>Get/set visibilities of all links to this view object.</UserDocu>
      </Documentation>
      <Parameter Name="LinkVisibility" Type="Boolean" />
    </Attribute>
    <Attribute Name="DropPrefix" ReadOnly="true" >
      <Documentation>
          <UserDocu>Subname referecing the sub-object for holding dropped object.</UserDocu>
      </Documentation>
      <Parameter Name="DropPrefix" Type="String" />
    </Attribute>
  </PythonExport>
</GenerateModel>
