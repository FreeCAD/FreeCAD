<?xml version="1.0" encoding="UTF-8"?>
<GenerateModel xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="generateMetaModel_Module.xsd">
    <PythonExport
        Father="ExtensionContainerPy"
        Name="ViewProviderPy"
        Twin="ViewProvider"
        TwinPointer="ViewProvider"
        Include="Gui/ViewProvider.h"
        Namespace="Gui"
        FatherInclude="App/ExtensionContainerPy.h"
        FatherNamespace="App">
        <Documentation>
            <Author Licence="LGPL" Name="Werner Mayer" EMail="wmayer@users.sourceforge.net" />
            <UserDocu>This is the ViewProvider base class</UserDocu>
        </Documentation>
        <Methode Name="addProperty">
            <Documentation>
                <UserDocu>Add a generic property.
addProperty(string, string)
--
The first argument specifies the type, the second the name of the property.
                </UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="removeProperty">
            <Documentation>
                <UserDocu>Remove a generic property.
removeProperty(string)
--
Note, you can only remove user-defined properties, not built-in ones.
                </UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="supportedProperties">
            <Documentation>
                <UserDocu>A list of supported property types
</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="show">
            <Documentation>
                <UserDocu>Show the object
</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="hide">
            <Documentation>
                <UserDocu>Hide the object
</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="isVisible">
            <Documentation>
                <UserDocu>Check if the object is visible
</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="canDragObject">
            <Documentation>
                <UserDocu>check whether the child object can be removed by dragging
canDragObject(obj=None)
</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="dragObject">
            <Documentation>
                <UserDocu>remove a child object by dropping
dragObject(obj)
</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="canDropObject">
            <Documentation>
                <UserDocu>check whether the child object can be added by dropping
canDropObject(obj=None,owner=None,subname=None)
</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="dropObject">
            <Documentation>
                <UserDocu>add a child object by dropping
dropObject(obj,owner=None,subname=None)</UserDocu>
</Documentation>
        </Methode>
        <Methode Name="canDragAndDropObject">
            <Documentation>
                <UserDocu>Check whether the child object can be removed from other parent and added here by drag and drop
canDragAndDropObject(obj)
</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="replaceObject">
            <Documentation>
                <UserDocu>replace a child object
replaceObject(oldObj, newObj) -> Int
--
Returns 1 if succeeded, 0 if not found, -1 if not supported
</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="doubleClicked">
            <Documentation>
                <UserDocu>Trigger double clicking the corresponding tree item of this view object
</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="addDisplayMode">
            <Documentation>
                <UserDocu>Add a new display mode to the view provider
</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="listDisplayModes">
            <Documentation>
                <UserDocu>Show a list of all display modes
</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="toString">
            <Documentation>
                <UserDocu>Return a string representation of the Inventor node
</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="setTransformation">
            <Documentation>
                <UserDocu>Set a transformation on the Inventor node
</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="claimChildren" Const="true">
            <Documentation>
                <UserDocu>Returns list of objects that are to be grouped in tree under this object.
</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="partialRender">
            <Documentation>
                <UserDocu>render only part of the object
partialRender(sub=None,clear=False)
--
sub: string or list of string refer to the subelement. If it is None then reset the partial rendering.
clear: true to add, or false to remove the subelement(s) for rendering.
</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="getElementColors">
            <Documentation>
                <UserDocu>
getElementColors(elementName=None) -> dict(elementName:color)
                </UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="setElementColors">
            <Documentation>
                <UserDocu>
setElementColors(colors): set element colors
--
colors: color dictionary of type elementName:(r,g,b,a)
                </UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="getElementPicked" Const="true">
            <Documentation>
                <UserDocu>return the picked subelement
getElementPicked(pickPoint)
</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="getDetailPath" Const="true">
            <Documentation>
                <UserDocu>return Coin detail and path of an subelement
getDetailPath(subname,path,append=True)
--
subelement: dot separated string reference to the sub element
pPath: output coin path leading to the returned element detail
append: If true, path will be first appended with the root node and the mode
switch node of this view provider.
</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="signalChangeIcon" Const="true">
            <Documentation>
                <UserDocu>Trigger icon changed signal</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="getBoundingBox">
            <Documentation>
                <UserDocu>obtain the bounding box of this view object
getBoundingBox(subname=None, transform=True, view=None)
--
subname: the optional subname referring a sub-object
transform: whether to apply the transformation matrix of this view provider
view: the MDIView, default to active view
</UserDocu>
            </Documentation>
        </Methode>
        <Attribute Name="Annotation" ReadOnly="false">
            <Documentation>
                <UserDocu>A pivy Separator to add a custom scenegraph to this ViewProvider</UserDocu>
            </Documentation>
            <Parameter Name="Annotation" Type="Object" />
        </Attribute>
    <Attribute Name="Icon" ReadOnly="true">
      <Documentation>
        <UserDocu>The icon of this ViewProvider</UserDocu>
      </Documentation>
      <Parameter Name="Icon" Type="Object" />
    </Attribute>
    <Attribute Name="RootNode" ReadOnly="false">
      <Documentation>
        <UserDocu>A pivy Separator with the root of this ViewProvider</UserDocu>
      </Documentation>
      <Parameter Name="RootNode" Type="Object" />
    </Attribute>
    <Attribute Name="SwitchNode" ReadOnly="false">
      <Documentation>
        <UserDocu>A pivy SoSwitch for the display mode switch of this ViewProvider</UserDocu>
      </Documentation>
      <Parameter Name="SwitchNode" Type="Object" />
    </Attribute>
    <Attribute Name="DefaultMode" ReadOnly="false">
      <Documentation>
        <UserDocu>Get/Set the default display mode in turns of coin node index</UserDocu>
      </Documentation>
      <Parameter Name="DefaultNode" Type="Int" />
    </Attribute>
    <Attribute Name="IV" ReadOnly="true">
      <Documentation>
        <UserDocu>Represents the whole ViewProvider as an Inventor string.</UserDocu>
      </Documentation>
      <Parameter Name="IV" Type="String" />
    </Attribute>
    <Attribute Name="CanRemoveChildrenFromRoot" ReadOnly="true">
      <Documentation>
        <UserDocu>Tells the tree view whether to remove the children item from root or not</UserDocu>
      </Documentation>
      <Parameter Name="CanRemoveChildrenFromRoot" Type="Boolean" />
    </Attribute>
    <Attribute Name="LinkVisibility">
      <Documentation>
          <UserDocu>Get/set visibilities of all links to this view object</UserDocu>
      </Documentation>
      <Parameter Name="LinkVisibility" Type="Boolean" />
    </Attribute>
    <Attribute Name="DropPrefix" ReadOnly="true" >
      <Documentation>
          <UserDocu>Subname referecing the sub-object for holding dropped object</UserDocu>
      </Documentation>
      <Parameter Name="DropPrefix" Type="String" />
    </Attribute>
  </PythonExport>
</GenerateModel>
