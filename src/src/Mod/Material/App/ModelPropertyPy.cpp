
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the .XML file
// Every change you make here gets lost in the next full rebuild!
// This File is normally built as an include in ModelPropertyPyImp.cpp! It's not intended to be in a project!

#include <Base/PyObjectBase.h>
#include <Base/Console.h>
#include <Base/Exception.h>
#include <CXX/Objects.hxx>

#if defined(__clang__)
# pragma clang diagnostic push
# pragma clang diagnostic ignored "-Wdeprecated-declarations"
#endif

using Base::streq;
using namespace Materials;

#if defined(__GNUC__)
#pragma GCC diagnostic push
// Ignore -Wmissing-field-initializers (GCC only):
// - C++20 guarantees omitted fields are zero-initialized.
// - Python C API changes fields across versions.
// - Clang does not warn; GCC does unnecessarily.
// See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=96868
#pragma GCC diagnostic ignored "-Wmissing-field-initializers"
#endif // __GNUC__
/// Type structure of ModelPropertyPy
PyTypeObject ModelPropertyPy::Type = {
    .ob_base = PyVarObject_HEAD_INIT(&PyType_Type,0)
    .tp_name = "Materials.ModelProperty",
    .tp_basicsize = sizeof(ModelPropertyPy),
    .tp_itemsize = 0,
    /* methods */
    .tp_dealloc = PyDestructor,
    .tp_repr = __repr,
    .tp_getattro = __getattro,
    .tp_setattro = __setattro,
    /* --- Flags to define presence of optional/expanded features */
    .tp_flags = Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT,
    .tp_doc = "Material property descriptions.",
    .tp_methods = Materials::ModelPropertyPy::Methods,
    .tp_getset = Materials::ModelPropertyPy::GetterSetter,
    .tp_base = &Base::BaseClassPy::Type,
    .tp_init = __PyInit,
    .tp_new = Materials::ModelPropertyPy::PyMake
};
#if defined(__GNUC__)
#pragma GCC diagnostic pop
#endif // __GNUC__

/// Methods structure of ModelPropertyPy
PyMethodDef ModelPropertyPy::Methods[] = {
    {"addColumn",
        reinterpret_cast<PyCFunction>( staticCallback_addColumn ),
        METH_VARARGS,
        "Add a model property column."
    },
    {nullptr, nullptr, 0, nullptr}		/* Sentinel */
};



/// Attribute structure of ModelPropertyPy
PyGetSetDef ModelPropertyPy::GetterSetter[] = {
    {"Name",
        (getter) staticCallback_getName,
        (setter) staticCallback_setName,
        "Property name.",
        nullptr
    },
    {"DisplayName",
        (getter) staticCallback_getDisplayName,
        (setter) staticCallback_setDisplayName,
        "Property display friendly name.",
        nullptr
    },
    {"Type",
        (getter) staticCallback_getType,
        (setter) staticCallback_setType,
        "Property type.",
        nullptr
    },
    {"Units",
        (getter) staticCallback_getUnits,
        (setter) staticCallback_setUnits,
        "Property units category.",
        nullptr
    },
    {"URL",
        (getter) staticCallback_getURL,
        (setter) staticCallback_setURL,
        "URL to a detailed description of the property.",
        nullptr
    },
    {"Description",
        (getter) staticCallback_getDescription,
        (setter) staticCallback_setDescription,
        "Property description.",
        nullptr
    },
    {"Columns",
        (getter) staticCallback_getColumns,
        (setter) staticCallback_setColumns,
        "List of array columns.",
        nullptr
    },
    {"Inheritance",
        (getter) staticCallback_getInheritance,
        (setter) staticCallback_setInheritance,
        "UUID of the model in which the property is defined.",
        nullptr
    },
    {"Inherited",
        (getter) staticCallback_getInherited,
        (setter) staticCallback_setInherited,
        "True if the property is inherited.",
        nullptr
    },
    {nullptr, nullptr, nullptr, nullptr, nullptr}		/* Sentinel */
};

// addColumn() callback and implementer
// PyObject*  ModelPropertyPy::addColumn(PyObject *args){};
// has to be implemented in ModelPropertyPyImp.cpp
PyObject * ModelPropertyPy::staticCallback_addColumn (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'addColumn' of 'Materials.ModelProperty' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ModelPropertyPy*>(self)->addColumn(args);
        if (ret != nullptr)
            static_cast<ModelPropertyPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return nullptr;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// Name() callback and implementer
// PyObject*  ModelPropertyPy::Name(PyObject *args){};
// has to be implemented in ModelPropertyPyImp.cpp
PyObject * ModelPropertyPy::staticCallback_getName (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ModelPropertyPy*>(self)->getName());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Name' of object 'ModelProperty'");
        return nullptr;
    }
}

int ModelPropertyPy::staticCallback_setName (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<ModelPropertyPy*>(self)->setName(Py::String(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'Name' of object 'ModelProperty'");
        return -1;
    }
}

// DisplayName() callback and implementer
// PyObject*  ModelPropertyPy::DisplayName(PyObject *args){};
// has to be implemented in ModelPropertyPyImp.cpp
PyObject * ModelPropertyPy::staticCallback_getDisplayName (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ModelPropertyPy*>(self)->getDisplayName());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'DisplayName' of object 'ModelProperty'");
        return nullptr;
    }
}

int ModelPropertyPy::staticCallback_setDisplayName (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<ModelPropertyPy*>(self)->setDisplayName(Py::String(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'DisplayName' of object 'ModelProperty'");
        return -1;
    }
}

// Type() callback and implementer
// PyObject*  ModelPropertyPy::Type(PyObject *args){};
// has to be implemented in ModelPropertyPyImp.cpp
PyObject * ModelPropertyPy::staticCallback_getType (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ModelPropertyPy*>(self)->getType());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Type' of object 'ModelProperty'");
        return nullptr;
    }
}

int ModelPropertyPy::staticCallback_setType (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<ModelPropertyPy*>(self)->setType(Py::String(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'Type' of object 'ModelProperty'");
        return -1;
    }
}

// Units() callback and implementer
// PyObject*  ModelPropertyPy::Units(PyObject *args){};
// has to be implemented in ModelPropertyPyImp.cpp
PyObject * ModelPropertyPy::staticCallback_getUnits (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ModelPropertyPy*>(self)->getUnits());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Units' of object 'ModelProperty'");
        return nullptr;
    }
}

int ModelPropertyPy::staticCallback_setUnits (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<ModelPropertyPy*>(self)->setUnits(Py::String(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'Units' of object 'ModelProperty'");
        return -1;
    }
}

// URL() callback and implementer
// PyObject*  ModelPropertyPy::URL(PyObject *args){};
// has to be implemented in ModelPropertyPyImp.cpp
PyObject * ModelPropertyPy::staticCallback_getURL (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ModelPropertyPy*>(self)->getURL());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'URL' of object 'ModelProperty'");
        return nullptr;
    }
}

int ModelPropertyPy::staticCallback_setURL (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<ModelPropertyPy*>(self)->setURL(Py::String(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'URL' of object 'ModelProperty'");
        return -1;
    }
}

// Description() callback and implementer
// PyObject*  ModelPropertyPy::Description(PyObject *args){};
// has to be implemented in ModelPropertyPyImp.cpp
PyObject * ModelPropertyPy::staticCallback_getDescription (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ModelPropertyPy*>(self)->getDescription());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Description' of object 'ModelProperty'");
        return nullptr;
    }
}

int ModelPropertyPy::staticCallback_setDescription (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<ModelPropertyPy*>(self)->setDescription(Py::String(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'Description' of object 'ModelProperty'");
        return -1;
    }
}

// Columns() callback and implementer
// PyObject*  ModelPropertyPy::Columns(PyObject *args){};
// has to be implemented in ModelPropertyPyImp.cpp
PyObject * ModelPropertyPy::staticCallback_getColumns (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ModelPropertyPy*>(self)->getColumns());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Columns' of object 'ModelProperty'");
        return nullptr;
    }
}

int ModelPropertyPy::staticCallback_setColumns (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'Columns' of object 'ModelProperty' is read-only");
    return -1;
}

// Inheritance() callback and implementer
// PyObject*  ModelPropertyPy::Inheritance(PyObject *args){};
// has to be implemented in ModelPropertyPyImp.cpp
PyObject * ModelPropertyPy::staticCallback_getInheritance (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ModelPropertyPy*>(self)->getInheritance());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Inheritance' of object 'ModelProperty'");
        return nullptr;
    }
}

int ModelPropertyPy::staticCallback_setInheritance (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'Inheritance' of object 'ModelProperty' is read-only");
    return -1;
}

// Inherited() callback and implementer
// PyObject*  ModelPropertyPy::Inherited(PyObject *args){};
// has to be implemented in ModelPropertyPyImp.cpp
PyObject * ModelPropertyPy::staticCallback_getInherited (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ModelPropertyPy*>(self)->getInherited());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Inherited' of object 'ModelProperty'");
        return nullptr;
    }
}

int ModelPropertyPy::staticCallback_setInherited (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'Inherited' of object 'ModelProperty' is read-only");
    return -1;
}




//--------------------------------------------------------------------------
// Constructor
//--------------------------------------------------------------------------
ModelPropertyPy::ModelPropertyPy(ModelProperty *pcObject, PyTypeObject *T)
    : BaseClassPy(static_cast<BaseClassPy::PointerType>(pcObject), T)
{
}


//--------------------------------------------------------------------------
// destructor
//--------------------------------------------------------------------------
ModelPropertyPy::~ModelPropertyPy()                                // Everything handled in parent
{
    // delete the handled object when the PyObject dies
    ModelPropertyPy::PointerType ptr = static_cast<ModelPropertyPy::PointerType>(_pcTwinPointer);
    delete ptr;
}

//--------------------------------------------------------------------------
// ModelPropertyPy representation
//--------------------------------------------------------------------------
PyObject *ModelPropertyPy::_repr()
{
    return Py_BuildValue("s", representation().c_str());
}

//--------------------------------------------------------------------------
// ModelPropertyPy Attributes
//--------------------------------------------------------------------------
PyObject *ModelPropertyPy::_getattr(const char *attr)			// __getattr__ function: note only need to handle new state
{
    try {
        // getter method for special Attributes (e.g. dynamic ones)
        PyObject *r = getCustomAttributes(attr);
        if(r) return r;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return nullptr;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError,"Unknown C++ exception");
        return nullptr;
    }
#endif

    PyMethodDef *ml = Methods;
    for (; ml->ml_name != nullptr; ml++) {
        if (attr[0] == ml->ml_name[0] &&
            strcmp(attr+1, ml->ml_name+1) == 0)
            return PyCFunction_New(ml, this);
    }

    PyErr_Clear();
    return BaseClassPy::_getattr(attr);
}

int ModelPropertyPy::_setattr(const char *attr, PyObject *value) // __setattr__ function: note only need to handle new state
{
    try {
        // setter for special Attributes (e.g. dynamic ones)
        int r = setCustomAttributes(attr, value);
        // r = 1: handled
        // r = -1: error
        // r = 0: ignore
        if (r == 1)
            return 0;
        else if (r == -1)
            return -1;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return -1;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return -1;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return -1;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return -1;
    }
#endif

    return BaseClassPy::_setattr(attr, value);
}

ModelProperty *ModelPropertyPy::getModelPropertyPtr() const
{
    return static_cast<ModelProperty *>(_pcTwinPointer);
}

#if defined(__clang__)
# pragma clang diagnostic pop
#endif

#if 0
/* From here on come the methods you have to implement, but NOT in this module. Implement in ModelPropertyPyImp.cpp! This prototypes
 * are just for convenience when you add a new method.
 */

PyObject *ModelPropertyPy::PyMake(PyTypeObject* /*type*/, PyObject* /*args*/, PyObject* /*kwds*/)
{
    // create a new instance of ModelPropertyPy and the Twin object
    return new ModelPropertyPy(new ModelProperty);
}

// constructor method
int ModelPropertyPy::PyInit(PyObject* /*args*/, PyObject* /*kwd*/)
{
    return 0;
}


// returns a string which represents the object e.g. when printed in python
std::string ModelPropertyPy::representation() const
{
    return {"<ModelProperty object>"};
}

PyObject* ModelPropertyPy::addColumn(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}



Py::String ModelPropertyPy::getName() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

void  ModelPropertyPy::setName(Py::String arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::String ModelPropertyPy::getDisplayName() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

void  ModelPropertyPy::setDisplayName(Py::String arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::String ModelPropertyPy::getType() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

void  ModelPropertyPy::setType(Py::String arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::String ModelPropertyPy::getUnits() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

void  ModelPropertyPy::setUnits(Py::String arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::String ModelPropertyPy::getURL() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

void  ModelPropertyPy::setURL(Py::String arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::String ModelPropertyPy::getDescription() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

void  ModelPropertyPy::setDescription(Py::String arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::List ModelPropertyPy::getColumns() const
{
    //return Py::List();
    throw Py::AttributeError("Not yet implemented");
}

Py::String ModelPropertyPy::getInheritance() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::Boolean ModelPropertyPy::getInherited() const
{
    //return Py::Boolean();
    throw Py::AttributeError("Not yet implemented");
}

PyObject *ModelPropertyPy::getCustomAttributes(const char* /*attr*/) const
{
    return nullptr;
}

int ModelPropertyPy::setCustomAttributes(const char* /*attr*/, PyObject* /*obj*/)
{
    return 0;
}


#endif



