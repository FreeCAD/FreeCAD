
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the XML file
// Every change you make here gets lost in the next full rebuild!
#ifndef MATERIALS_ARRAY2DPY_H
#define MATERIALS_ARRAY2DPY_H

#include <CXX/Objects.hxx>
#include <Base/BaseClassPy.h>
#include <Mod/Material/App/MaterialValue.h>
#include <string>


namespace Materials
{

//===========================================================================
// Array2DPy - Python wrapper
//===========================================================================

/** The python export class for Array2D
 */
class MaterialsExport Array2DPy : public Base::BaseClassPy
{
protected:
    ~Array2DPy() override;

public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyGetSetDef    GetterSetter[];
    PyTypeObject *GetType() const override {return &Type;}

public:
    Array2DPy(Array2D *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(PyTypeObject *, PyObject *, PyObject *);
    int PyInit(PyObject* args, PyObject*k) override;


    using PointerType = Array2D*;

    PyObject *_repr() override;        // the representation
    std::string representation() const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    /// callback for the getRow() method
    static PyObject * staticCallback_getRow (PyObject *self, PyObject *args);
    /// implementer for the getRow() method
    PyObject*  getRow(PyObject *args) const;
    /// callback for the getValue() method
    static PyObject * staticCallback_getValue (PyObject *self, PyObject *args);
    /// implementer for the getValue() method
    PyObject*  getValue(PyObject *args) const;
    /// callback for the setValue() method
    static PyObject * staticCallback_setValue (PyObject *self, PyObject *args);
    /// implementer for the setValue() method
    PyObject*  setValue(PyObject *args);
    //@}


    /** @name callbacks and implementers for the python object attributes */
    //@{
    ///getter callback for the Array attribute
    static PyObject * staticCallback_getArray (PyObject *self, void *closure);
    /// getter for the Array attribute
    Py::List getArray() const;
    /// setter callback for the Array attribute
    static int staticCallback_setArray (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Array is read only!
    ///getter callback for the Dimensions attribute
    static PyObject * staticCallback_getDimensions (PyObject *self, void *closure);
    /// getter for the Dimensions attribute
    Py::Long getDimensions() const;
    /// setter callback for the Dimensions attribute
    static int staticCallback_setDimensions (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Dimensions is read only!
    ///getter callback for the Rows attribute
    static PyObject * staticCallback_getRows (PyObject *self, void *closure);
    /// getter for the Rows attribute
    Py::Long getRows() const;
    /// setter callback for the Rows attribute
    static int staticCallback_setRows (PyObject *self, PyObject *value, void *closure);
    /// setter for the Rows attribute
    void setRows(Py::Long arg);
    ///getter callback for the Columns attribute
    static PyObject * staticCallback_getColumns (PyObject *self, void *closure);
    /// getter for the Columns attribute
    Py::Long getColumns() const;
    /// setter callback for the Columns attribute
    static int staticCallback_setColumns (PyObject *self, PyObject *value, void *closure);
    /// setter for the Columns attribute
    void setColumns(Py::Long arg);
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(const char *attr) override;              // __getattr__ function
    int _setattr(const char *attr, PyObject *value) override;   // __setattr__ function

    /// getter for the object handled by this class
    Array2D *getArray2DPtr() const;

};

}  //namespace Materials

#endif  // MATERIALS_ARRAY2DPY_H


