
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the XML file
// Every change you make here gets lost in the next full rebuild!
#ifndef MATERIALS_MATERIALFILTEROPTIONSPY_H
#define MATERIALS_MATERIALFILTEROPTIONSPY_H

#include <CXX/Objects.hxx>
#include <Base/BaseClassPy.h>
#include <Mod/Material/App/MaterialFilter.h>
#include <string>


namespace Materials
{

//===========================================================================
// MaterialFilterOptionsPy - Python wrapper
//===========================================================================

/** The python export class for MaterialFilterOptions
 */
class MaterialsExport MaterialFilterOptionsPy : public Base::BaseClassPy
{
protected:
    ~MaterialFilterOptionsPy() override;

public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyGetSetDef    GetterSetter[];
    PyTypeObject *GetType() const override {return &Type;}

public:
    MaterialFilterOptionsPy(MaterialFilterOptions *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(PyTypeObject *, PyObject *, PyObject *);
    int PyInit(PyObject* args, PyObject*k) override;


    using PointerType = MaterialFilterOptions*;

    PyObject *_repr() override;        // the representation
    std::string representation() const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    //@}


    /** @name callbacks and implementers for the python object attributes */
    //@{
    ///getter callback for the IncludeFavorites attribute
    static PyObject * staticCallback_getIncludeFavorites (PyObject *self, void *closure);
    /// getter for the IncludeFavorites attribute
    Py::Boolean getIncludeFavorites() const;
    /// setter callback for the IncludeFavorites attribute
    static int staticCallback_setIncludeFavorites (PyObject *self, PyObject *value, void *closure);
    /// setter for the IncludeFavorites attribute
    void setIncludeFavorites(Py::Boolean arg);
    ///getter callback for the IncludeRecent attribute
    static PyObject * staticCallback_getIncludeRecent (PyObject *self, void *closure);
    /// getter for the IncludeRecent attribute
    Py::Boolean getIncludeRecent() const;
    /// setter callback for the IncludeRecent attribute
    static int staticCallback_setIncludeRecent (PyObject *self, PyObject *value, void *closure);
    /// setter for the IncludeRecent attribute
    void setIncludeRecent(Py::Boolean arg);
    ///getter callback for the IncludeEmptyFolders attribute
    static PyObject * staticCallback_getIncludeEmptyFolders (PyObject *self, void *closure);
    /// getter for the IncludeEmptyFolders attribute
    Py::Boolean getIncludeEmptyFolders() const;
    /// setter callback for the IncludeEmptyFolders attribute
    static int staticCallback_setIncludeEmptyFolders (PyObject *self, PyObject *value, void *closure);
    /// setter for the IncludeEmptyFolders attribute
    void setIncludeEmptyFolders(Py::Boolean arg);
    ///getter callback for the IncludeEmptyLibraries attribute
    static PyObject * staticCallback_getIncludeEmptyLibraries (PyObject *self, void *closure);
    /// getter for the IncludeEmptyLibraries attribute
    Py::Boolean getIncludeEmptyLibraries() const;
    /// setter callback for the IncludeEmptyLibraries attribute
    static int staticCallback_setIncludeEmptyLibraries (PyObject *self, PyObject *value, void *closure);
    /// setter for the IncludeEmptyLibraries attribute
    void setIncludeEmptyLibraries(Py::Boolean arg);
    ///getter callback for the IncludeLegacy attribute
    static PyObject * staticCallback_getIncludeLegacy (PyObject *self, void *closure);
    /// getter for the IncludeLegacy attribute
    Py::Boolean getIncludeLegacy() const;
    /// setter callback for the IncludeLegacy attribute
    static int staticCallback_setIncludeLegacy (PyObject *self, PyObject *value, void *closure);
    /// setter for the IncludeLegacy attribute
    void setIncludeLegacy(Py::Boolean arg);
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(const char *attr) override;              // __getattr__ function
    int _setattr(const char *attr, PyObject *value) override;   // __setattr__ function

    /// getter for the object handled by this class
    MaterialFilterOptions *getMaterialFilterOptionsPtr() const;

};

}  //namespace Materials

#endif  // MATERIALS_MATERIALFILTEROPTIONSPY_H


