
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the .XML file
// Every change you make here gets lost in the next full rebuild!
// This File is normally built as an include in ModelPyImp.cpp! It's not intended to be in a project!

#include <Base/PyObjectBase.h>
#include <Base/Console.h>
#include <Base/Exception.h>
#include <CXX/Objects.hxx>

#if defined(__clang__)
# pragma clang diagnostic push
# pragma clang diagnostic ignored "-Wdeprecated-declarations"
#endif

using Base::streq;
using namespace Materials;

#if defined(__GNUC__)
#pragma GCC diagnostic push
// Ignore -Wmissing-field-initializers (GCC only):
// - C++20 guarantees omitted fields are zero-initialized.
// - Python C API changes fields across versions.
// - Clang does not warn; GCC does unnecessarily.
// See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=96868
#pragma GCC diagnostic ignored "-Wmissing-field-initializers"
#endif // __GNUC__
/// Type structure of ModelPy
PyTypeObject ModelPy::Type = {
    .ob_base = PyVarObject_HEAD_INIT(&PyType_Type,0)
    .tp_name = "Materials.Model",
    .tp_basicsize = sizeof(ModelPy),
    .tp_itemsize = 0,
    /* methods */
    .tp_dealloc = PyDestructor,
    .tp_repr = __repr,
    .tp_getattro = __getattro,
    .tp_setattro = __setattro,
    /* --- Flags to define presence of optional/expanded features */
    .tp_flags = Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT,
    .tp_doc = "Material model descriptions.",
    .tp_methods = Materials::ModelPy::Methods,
    .tp_getset = Materials::ModelPy::GetterSetter,
    .tp_base = &Base::BaseClassPy::Type,
    .tp_init = __PyInit,
    .tp_new = Materials::ModelPy::PyMake
};
#if defined(__GNUC__)
#pragma GCC diagnostic pop
#endif // __GNUC__

/// Methods structure of ModelPy
PyMethodDef ModelPy::Methods[] = {
    {"addInheritance",
        reinterpret_cast<PyCFunction>( staticCallback_addInheritance ),
        METH_VARARGS,
        "Add an inherited model."
    },
    {"addProperty",
        reinterpret_cast<PyCFunction>( staticCallback_addProperty ),
        METH_VARARGS,
        "Add a model property."
    },
    {nullptr, nullptr, 0, nullptr}		/* Sentinel */
};



/// Attribute structure of ModelPy
PyGetSetDef ModelPy::GetterSetter[] = {
    {"LibraryName",
        (getter) staticCallback_getLibraryName,
        (setter) staticCallback_setLibraryName,
        "Model library name.",
        nullptr
    },
    {"LibraryRoot",
        (getter) staticCallback_getLibraryRoot,
        (setter) staticCallback_setLibraryRoot,
        "Model library path.",
        nullptr
    },
    {"LibraryIcon",
        (getter) staticCallback_getLibraryIcon,
        (setter) staticCallback_setLibraryIcon,
        "Model icon.",
        nullptr
    },
    {"Name",
        (getter) staticCallback_getName,
        (setter) staticCallback_setName,
        "Model name.",
        nullptr
    },
    {"Type",
        (getter) staticCallback_getType,
        (setter) staticCallback_setType,
        "Model type.",
        nullptr
    },
    {"Directory",
        (getter) staticCallback_getDirectory,
        (setter) staticCallback_setDirectory,
        "Model directory.",
        nullptr
    },
    {"UUID",
        (getter) staticCallback_getUUID,
        (setter) staticCallback_setUUID,
        "Unique model identifier.",
        nullptr
    },
    {"Description",
        (getter) staticCallback_getDescription,
        (setter) staticCallback_setDescription,
        "Description of the model.",
        nullptr
    },
    {"URL",
        (getter) staticCallback_getURL,
        (setter) staticCallback_setURL,
        "URL to a detailed description of the model.",
        nullptr
    },
    {"DOI",
        (getter) staticCallback_getDOI,
        (setter) staticCallback_setDOI,
        "Digital Object Identifier (see https://doi.org/)",
        nullptr
    },
    {"Inherited",
        (getter) staticCallback_getInherited,
        (setter) staticCallback_setInherited,
        "List of inherited models identified by UUID.",
        nullptr
    },
    {"Properties",
        (getter) staticCallback_getProperties,
        (setter) staticCallback_setProperties,
        "Dictionary of model properties.",
        nullptr
    },
    {nullptr, nullptr, nullptr, nullptr, nullptr}		/* Sentinel */
};

// addInheritance() callback and implementer
// PyObject*  ModelPy::addInheritance(PyObject *args){};
// has to be implemented in ModelPyImp.cpp
PyObject * ModelPy::staticCallback_addInheritance (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'addInheritance' of 'Materials.Model' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ModelPy*>(self)->addInheritance(args);
        if (ret != nullptr)
            static_cast<ModelPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return nullptr;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// addProperty() callback and implementer
// PyObject*  ModelPy::addProperty(PyObject *args){};
// has to be implemented in ModelPyImp.cpp
PyObject * ModelPy::staticCallback_addProperty (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'addProperty' of 'Materials.Model' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ModelPy*>(self)->addProperty(args);
        if (ret != nullptr)
            static_cast<ModelPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return nullptr;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// LibraryName() callback and implementer
// PyObject*  ModelPy::LibraryName(PyObject *args){};
// has to be implemented in ModelPyImp.cpp
PyObject * ModelPy::staticCallback_getLibraryName (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ModelPy*>(self)->getLibraryName());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'LibraryName' of object 'Model'");
        return nullptr;
    }
}

int ModelPy::staticCallback_setLibraryName (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'LibraryName' of object 'Model' is read-only");
    return -1;
}

// LibraryRoot() callback and implementer
// PyObject*  ModelPy::LibraryRoot(PyObject *args){};
// has to be implemented in ModelPyImp.cpp
PyObject * ModelPy::staticCallback_getLibraryRoot (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ModelPy*>(self)->getLibraryRoot());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'LibraryRoot' of object 'Model'");
        return nullptr;
    }
}

int ModelPy::staticCallback_setLibraryRoot (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'LibraryRoot' of object 'Model' is read-only");
    return -1;
}

// LibraryIcon() callback and implementer
// PyObject*  ModelPy::LibraryIcon(PyObject *args){};
// has to be implemented in ModelPyImp.cpp
PyObject * ModelPy::staticCallback_getLibraryIcon (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ModelPy*>(self)->getLibraryIcon());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'LibraryIcon' of object 'Model'");
        return nullptr;
    }
}

int ModelPy::staticCallback_setLibraryIcon (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'LibraryIcon' of object 'Model' is read-only");
    return -1;
}

// Name() callback and implementer
// PyObject*  ModelPy::Name(PyObject *args){};
// has to be implemented in ModelPyImp.cpp
PyObject * ModelPy::staticCallback_getName (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ModelPy*>(self)->getName());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Name' of object 'Model'");
        return nullptr;
    }
}

int ModelPy::staticCallback_setName (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<ModelPy*>(self)->setName(Py::String(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'Name' of object 'Model'");
        return -1;
    }
}

// Type() callback and implementer
// PyObject*  ModelPy::Type(PyObject *args){};
// has to be implemented in ModelPyImp.cpp
PyObject * ModelPy::staticCallback_getType (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ModelPy*>(self)->getType());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Type' of object 'Model'");
        return nullptr;
    }
}

int ModelPy::staticCallback_setType (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<ModelPy*>(self)->setType(Py::String(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'Type' of object 'Model'");
        return -1;
    }
}

// Directory() callback and implementer
// PyObject*  ModelPy::Directory(PyObject *args){};
// has to be implemented in ModelPyImp.cpp
PyObject * ModelPy::staticCallback_getDirectory (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ModelPy*>(self)->getDirectory());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Directory' of object 'Model'");
        return nullptr;
    }
}

int ModelPy::staticCallback_setDirectory (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<ModelPy*>(self)->setDirectory(Py::String(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'Directory' of object 'Model'");
        return -1;
    }
}

// UUID() callback and implementer
// PyObject*  ModelPy::UUID(PyObject *args){};
// has to be implemented in ModelPyImp.cpp
PyObject * ModelPy::staticCallback_getUUID (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ModelPy*>(self)->getUUID());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'UUID' of object 'Model'");
        return nullptr;
    }
}

int ModelPy::staticCallback_setUUID (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'UUID' of object 'Model' is read-only");
    return -1;
}

// Description() callback and implementer
// PyObject*  ModelPy::Description(PyObject *args){};
// has to be implemented in ModelPyImp.cpp
PyObject * ModelPy::staticCallback_getDescription (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ModelPy*>(self)->getDescription());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Description' of object 'Model'");
        return nullptr;
    }
}

int ModelPy::staticCallback_setDescription (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<ModelPy*>(self)->setDescription(Py::String(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'Description' of object 'Model'");
        return -1;
    }
}

// URL() callback and implementer
// PyObject*  ModelPy::URL(PyObject *args){};
// has to be implemented in ModelPyImp.cpp
PyObject * ModelPy::staticCallback_getURL (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ModelPy*>(self)->getURL());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'URL' of object 'Model'");
        return nullptr;
    }
}

int ModelPy::staticCallback_setURL (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<ModelPy*>(self)->setURL(Py::String(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'URL' of object 'Model'");
        return -1;
    }
}

// DOI() callback and implementer
// PyObject*  ModelPy::DOI(PyObject *args){};
// has to be implemented in ModelPyImp.cpp
PyObject * ModelPy::staticCallback_getDOI (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ModelPy*>(self)->getDOI());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'DOI' of object 'Model'");
        return nullptr;
    }
}

int ModelPy::staticCallback_setDOI (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<ModelPy*>(self)->setDOI(Py::String(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'DOI' of object 'Model'");
        return -1;
    }
}

// Inherited() callback and implementer
// PyObject*  ModelPy::Inherited(PyObject *args){};
// has to be implemented in ModelPyImp.cpp
PyObject * ModelPy::staticCallback_getInherited (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ModelPy*>(self)->getInherited());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Inherited' of object 'Model'");
        return nullptr;
    }
}

int ModelPy::staticCallback_setInherited (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'Inherited' of object 'Model' is read-only");
    return -1;
}

// Properties() callback and implementer
// PyObject*  ModelPy::Properties(PyObject *args){};
// has to be implemented in ModelPyImp.cpp
PyObject * ModelPy::staticCallback_getProperties (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ModelPy*>(self)->getProperties());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Properties' of object 'Model'");
        return nullptr;
    }
}

int ModelPy::staticCallback_setProperties (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'Properties' of object 'Model' is read-only");
    return -1;
}




//--------------------------------------------------------------------------
// Constructor
//--------------------------------------------------------------------------
ModelPy::ModelPy(Model *pcObject, PyTypeObject *T)
    : BaseClassPy(static_cast<BaseClassPy::PointerType>(pcObject), T)
{
}


//--------------------------------------------------------------------------
// destructor
//--------------------------------------------------------------------------
ModelPy::~ModelPy()                                // Everything handled in parent
{
    // delete the handled object when the PyObject dies
    ModelPy::PointerType ptr = static_cast<ModelPy::PointerType>(_pcTwinPointer);
    delete ptr;
}

//--------------------------------------------------------------------------
// ModelPy representation
//--------------------------------------------------------------------------
PyObject *ModelPy::_repr()
{
    return Py_BuildValue("s", representation().c_str());
}

//--------------------------------------------------------------------------
// ModelPy Attributes
//--------------------------------------------------------------------------
PyObject *ModelPy::_getattr(const char *attr)			// __getattr__ function: note only need to handle new state
{
    try {
        // getter method for special Attributes (e.g. dynamic ones)
        PyObject *r = getCustomAttributes(attr);
        if(r) return r;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return nullptr;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError,"Unknown C++ exception");
        return nullptr;
    }
#endif

    PyMethodDef *ml = Methods;
    for (; ml->ml_name != nullptr; ml++) {
        if (attr[0] == ml->ml_name[0] &&
            strcmp(attr+1, ml->ml_name+1) == 0)
            return PyCFunction_New(ml, this);
    }

    PyErr_Clear();
    return BaseClassPy::_getattr(attr);
}

int ModelPy::_setattr(const char *attr, PyObject *value) // __setattr__ function: note only need to handle new state
{
    try {
        // setter for special Attributes (e.g. dynamic ones)
        int r = setCustomAttributes(attr, value);
        // r = 1: handled
        // r = -1: error
        // r = 0: ignore
        if (r == 1)
            return 0;
        else if (r == -1)
            return -1;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return -1;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return -1;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return -1;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return -1;
    }
#endif

    return BaseClassPy::_setattr(attr, value);
}

Model *ModelPy::getModelPtr() const
{
    return static_cast<Model *>(_pcTwinPointer);
}

#if defined(__clang__)
# pragma clang diagnostic pop
#endif

#if 0
/* From here on come the methods you have to implement, but NOT in this module. Implement in ModelPyImp.cpp! This prototypes
 * are just for convenience when you add a new method.
 */

PyObject *ModelPy::PyMake(PyTypeObject* /*type*/, PyObject* /*args*/, PyObject* /*kwds*/)
{
    // create a new instance of ModelPy and the Twin object
    return new ModelPy(new Model);
}

// constructor method
int ModelPy::PyInit(PyObject* /*args*/, PyObject* /*kwd*/)
{
    return 0;
}


// returns a string which represents the object e.g. when printed in python
std::string ModelPy::representation() const
{
    return {"<Model object>"};
}

PyObject* ModelPy::addInheritance(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ModelPy::addProperty(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}



Py::String ModelPy::getLibraryName() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String ModelPy::getLibraryRoot() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::Object ModelPy::getLibraryIcon() const
{
    //return Py::Object();
    throw Py::AttributeError("Not yet implemented");
}

Py::String ModelPy::getName() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

void  ModelPy::setName(Py::String arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::String ModelPy::getType() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

void  ModelPy::setType(Py::String arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::String ModelPy::getDirectory() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

void  ModelPy::setDirectory(Py::String arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::String ModelPy::getUUID() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::String ModelPy::getDescription() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

void  ModelPy::setDescription(Py::String arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::String ModelPy::getURL() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

void  ModelPy::setURL(Py::String arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::String ModelPy::getDOI() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

void  ModelPy::setDOI(Py::String arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::List ModelPy::getInherited() const
{
    //return Py::List();
    throw Py::AttributeError("Not yet implemented");
}

Py::Dict ModelPy::getProperties() const
{
    //return Py::Dict();
    throw Py::AttributeError("Not yet implemented");
}

PyObject *ModelPy::getCustomAttributes(const char* /*attr*/) const
{
    return nullptr;
}

int ModelPy::setCustomAttributes(const char* /*attr*/, PyObject* /*obj*/)
{
    return 0;
}


#endif



