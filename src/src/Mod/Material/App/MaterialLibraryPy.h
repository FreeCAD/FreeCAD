
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the XML file
// Every change you make here gets lost in the next full rebuild!
#ifndef MATERIALS_MATERIALLIBRARYPY_H
#define MATERIALS_MATERIALLIBRARYPY_H

#include <CXX/Objects.hxx>
#include <Base/BaseClassPy.h>
#include <Mod/Material/App/MaterialLibrary.h>
#include <string>


namespace Materials
{

//===========================================================================
// MaterialLibraryPy - Python wrapper
//===========================================================================

/** The python export class for MaterialLibrary
 */
class MaterialsExport MaterialLibraryPy : public Base::BaseClassPy
{
protected:
    ~MaterialLibraryPy() override;

public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyGetSetDef    GetterSetter[];
    PyTypeObject *GetType() const override {return &Type;}

public:
    MaterialLibraryPy(MaterialLibrary *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(PyTypeObject *, PyObject *, PyObject *);
    int PyInit(PyObject* args, PyObject*k) override;


    using PointerType = MaterialLibrary*;

    PyObject *_repr() override;        // the representation
    std::string representation() const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    //@}


    /** @name callbacks and implementers for the python object attributes */
    //@{
    ///getter callback for the Name attribute
    static PyObject * staticCallback_getName (PyObject *self, void *closure);
    /// getter for the Name attribute
    Py::String getName() const;
    /// setter callback for the Name attribute
    static int staticCallback_setName (PyObject *self, PyObject *value, void *closure);
    /// setter for the Name attribute
    void setName(Py::String arg);
    ///getter callback for the Icon attribute
    static PyObject * staticCallback_getIcon (PyObject *self, void *closure);
    /// getter for the Icon attribute
    Py::Object getIcon() const;
    /// setter callback for the Icon attribute
    static int staticCallback_setIcon (PyObject *self, PyObject *value, void *closure);
    /// setter for the Icon attribute
    void setIcon(Py::Object arg);
    ///getter callback for the Directory attribute
    static PyObject * staticCallback_getDirectory (PyObject *self, void *closure);
    /// getter for the Directory attribute
    Py::String getDirectory() const;
    /// setter callback for the Directory attribute
    static int staticCallback_setDirectory (PyObject *self, PyObject *value, void *closure);
    /// setter for the Directory attribute
    void setDirectory(Py::String arg);
    ///getter callback for the ReadOnly attribute
    static PyObject * staticCallback_getReadOnly (PyObject *self, void *closure);
    /// getter for the ReadOnly attribute
    Py::Boolean getReadOnly() const;
    /// setter callback for the ReadOnly attribute
    static int staticCallback_setReadOnly (PyObject *self, PyObject *value, void *closure);
    /// setter for the ReadOnly attribute
    void setReadOnly(Py::Boolean arg);
    ///getter callback for the Local attribute
    static PyObject * staticCallback_getLocal (PyObject *self, void *closure);
    /// getter for the Local attribute
    Py::Boolean getLocal() const;
    /// setter callback for the Local attribute
    static int staticCallback_setLocal (PyObject *self, PyObject *value, void *closure);
    /// setter for the Local attribute
    void setLocal(Py::Boolean arg);
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(const char *attr) override;              // __getattr__ function
    int _setattr(const char *attr, PyObject *value) override;   // __setattr__ function

    /// getter for the object handled by this class
    MaterialLibrary *getMaterialLibraryPtr() const;

};

}  //namespace Materials

#endif  // MATERIALS_MATERIALLIBRARYPY_H


