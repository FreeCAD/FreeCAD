
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the .XML file
// Every change you make here gets lost in the next full rebuild!
// This File is normally built as an include in ParabolaPyImp.cpp! It's not intended to be in a project!

#include <Base/PyObjectBase.h>
#include <Base/Console.h>
#include <Base/Exception.h>
#include <CXX/Objects.hxx>

#if defined(__clang__)
# pragma clang diagnostic push
# pragma clang diagnostic ignored "-Wdeprecated-declarations"
#endif

using Base::streq;
using namespace Part;

#if defined(__GNUC__)
#pragma GCC diagnostic push
// Ignore -Wmissing-field-initializers (GCC only):
// - C++20 guarantees omitted fields are zero-initialized.
// - Python C API changes fields across versions.
// - Clang does not warn; GCC does unnecessarily.
// See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=96868
#pragma GCC diagnostic ignored "-Wmissing-field-initializers"
#endif // __GNUC__
/// Type structure of ParabolaPy
PyTypeObject ParabolaPy::Type = {
    .ob_base = PyVarObject_HEAD_INIT(&PyType_Type,0)
    .tp_name = "Part.Parabola",
    .tp_basicsize = sizeof(ParabolaPy),
    .tp_itemsize = 0,
    /* methods */
    .tp_dealloc = PyDestructor,
    .tp_repr = __repr,
    .tp_getattro = __getattro,
    .tp_setattro = __setattro,
    /* --- Flags to define presence of optional/expanded features */
    .tp_flags = Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT,
    .tp_doc = "Describes a parabola in 3D space",
    .tp_methods = Part::ParabolaPy::Methods,
    .tp_getset = Part::ParabolaPy::GetterSetter,
    .tp_base = &Part::ConicPy::Type,
    .tp_init = __PyInit,
    .tp_new = Part::ParabolaPy::PyMake
};
#if defined(__GNUC__)
#pragma GCC diagnostic pop
#endif // __GNUC__

/// Methods structure of ParabolaPy
PyMethodDef ParabolaPy::Methods[] = {
    {"compute",
        reinterpret_cast<PyCFunction>( staticCallback_compute ),
        METH_VARARGS,
        "compute(p1,p2,p3) -> None\n"
        "\n"
        "The three points must lie on a plane parallel to xy plane and must not be collinear"
    },
    {nullptr, nullptr, 0, nullptr}		/* Sentinel */
};



/// Attribute structure of ParabolaPy
PyGetSetDef ParabolaPy::GetterSetter[] = {
    {"Focal",
        (getter) staticCallback_getFocal,
        (setter) staticCallback_setFocal,
        "The focal distance is the distance between\n"
        "the apex and the focus of the parabola.",
        nullptr
    },
    {"Focus",
        (getter) staticCallback_getFocus,
        (setter) staticCallback_setFocus,
        "The focus is on the positive side of the\n"
        "'X Axis' of the local coordinate system of the parabola.",
        nullptr
    },
    {"Parameter",
        (getter) staticCallback_getParameter,
        (setter) staticCallback_setParameter,
        "Compute the parameter of this parabola\n"
        "which is the distance between its focus\n"
        "and its directrix. This distance is twice the focal length.",
        nullptr
    },
    {nullptr, nullptr, nullptr, nullptr, nullptr}		/* Sentinel */
};

// compute() callback and implementer
// PyObject*  ParabolaPy::compute(PyObject *args){};
// has to be implemented in ParabolaPyImp.cpp
PyObject * ParabolaPy::staticCallback_compute (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'compute' of 'Part.GeomParabola' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ParabolaPy*>(self)->compute(args);
        if (ret != nullptr)
            static_cast<ParabolaPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return nullptr;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// Focal() callback and implementer
// PyObject*  ParabolaPy::Focal(PyObject *args){};
// has to be implemented in ParabolaPyImp.cpp
PyObject * ParabolaPy::staticCallback_getFocal (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ParabolaPy*>(self)->getFocal());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Focal' of object 'GeomParabola'");
        return nullptr;
    }
}

int ParabolaPy::staticCallback_setFocal (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<ParabolaPy*>(self)->setFocal(Py::Float(PyNumber_Float(value),true));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'Focal' of object 'GeomParabola'");
        return -1;
    }
}

// Focus() callback and implementer
// PyObject*  ParabolaPy::Focus(PyObject *args){};
// has to be implemented in ParabolaPyImp.cpp
PyObject * ParabolaPy::staticCallback_getFocus (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ParabolaPy*>(self)->getFocus());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Focus' of object 'GeomParabola'");
        return nullptr;
    }
}

int ParabolaPy::staticCallback_setFocus (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'Focus' of object 'GeomParabola' is read-only");
    return -1;
}

// Parameter() callback and implementer
// PyObject*  ParabolaPy::Parameter(PyObject *args){};
// has to be implemented in ParabolaPyImp.cpp
PyObject * ParabolaPy::staticCallback_getParameter (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ParabolaPy*>(self)->getParameter());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Parameter' of object 'GeomParabola'");
        return nullptr;
    }
}

int ParabolaPy::staticCallback_setParameter (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'Parameter' of object 'GeomParabola' is read-only");
    return -1;
}




//--------------------------------------------------------------------------
// Constructor
//--------------------------------------------------------------------------
ParabolaPy::ParabolaPy(GeomParabola *pcObject, PyTypeObject *T)
    : ConicPy(static_cast<ConicPy::PointerType>(pcObject), T)
{
}


//--------------------------------------------------------------------------
// destructor
//--------------------------------------------------------------------------
ParabolaPy::~ParabolaPy()                                // Everything handled in parent
{
}

//--------------------------------------------------------------------------
// ParabolaPy representation
//--------------------------------------------------------------------------
PyObject *ParabolaPy::_repr()
{
    return Py_BuildValue("s", representation().c_str());
}

//--------------------------------------------------------------------------
// ParabolaPy Attributes
//--------------------------------------------------------------------------
PyObject *ParabolaPy::_getattr(const char *attr)			// __getattr__ function: note only need to handle new state
{
    try {
        // getter method for special Attributes (e.g. dynamic ones)
        PyObject *r = getCustomAttributes(attr);
        if(r) return r;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return nullptr;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError,"Unknown C++ exception");
        return nullptr;
    }
#endif

    PyMethodDef *ml = Methods;
    for (; ml->ml_name != nullptr; ml++) {
        if (attr[0] == ml->ml_name[0] &&
            strcmp(attr+1, ml->ml_name+1) == 0)
            return PyCFunction_New(ml, this);
    }

    PyErr_Clear();
    return ConicPy::_getattr(attr);
}

int ParabolaPy::_setattr(const char *attr, PyObject *value) // __setattr__ function: note only need to handle new state
{
    try {
        // setter for special Attributes (e.g. dynamic ones)
        int r = setCustomAttributes(attr, value);
        // r = 1: handled
        // r = -1: error
        // r = 0: ignore
        if (r == 1)
            return 0;
        else if (r == -1)
            return -1;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return -1;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return -1;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return -1;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return -1;
    }
#endif

    return ConicPy::_setattr(attr, value);
}

GeomParabola *ParabolaPy::getGeomParabolaPtr() const
{
    return static_cast<GeomParabola *>(_pcTwinPointer);
}

#if defined(__clang__)
# pragma clang diagnostic pop
#endif

#if 0
/* From here on come the methods you have to implement, but NOT in this module. Implement in ParabolaPyImp.cpp! This prototypes
 * are just for convenience when you add a new method.
 */

PyObject *ParabolaPy::PyMake(PyTypeObject* /*type*/, PyObject* /*args*/, PyObject* /*kwds*/)
{
    // create a new instance of ParabolaPy and the Twin object
    return new ParabolaPy(new GeomParabola);
}

// constructor method
int ParabolaPy::PyInit(PyObject* /*args*/, PyObject* /*kwd*/)
{
    return 0;
}


// returns a string which represents the object e.g. when printed in python
std::string ParabolaPy::representation() const
{
    return {"<GeomParabola object>"};
}

PyObject* ParabolaPy::compute(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}



Py::Float ParabolaPy::getFocal() const
{
    //return Py::Float();
    throw Py::AttributeError("Not yet implemented");
}

void  ParabolaPy::setFocal(Py::Float arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Object ParabolaPy::getFocus() const
{
    //return Py::Object();
    throw Py::AttributeError("Not yet implemented");
}

Py::Float ParabolaPy::getParameter() const
{
    //return Py::Float();
    throw Py::AttributeError("Not yet implemented");
}

PyObject *ParabolaPy::getCustomAttributes(const char* /*attr*/) const
{
    return nullptr;
}

int ParabolaPy::setCustomAttributes(const char* /*attr*/, PyObject* /*obj*/)
{
    return 0;
}


#endif



