
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the .XML file
// Every change you make here gets lost in the next full rebuild!
// This File is normally built as an include in RectangularTrimmedSurfacePyImp.cpp! It's not intended to be in a project!

#include <Base/PyObjectBase.h>
#include <Base/Console.h>
#include <Base/Exception.h>
#include <CXX/Objects.hxx>

#if defined(__clang__)
# pragma clang diagnostic push
# pragma clang diagnostic ignored "-Wdeprecated-declarations"
#endif

using Base::streq;
using namespace Part;

#if defined(__GNUC__)
#pragma GCC diagnostic push
// Ignore -Wmissing-field-initializers (GCC only):
// - C++20 guarantees omitted fields are zero-initialized.
// - Python C API changes fields across versions.
// - Clang does not warn; GCC does unnecessarily.
// See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=96868
#pragma GCC diagnostic ignored "-Wmissing-field-initializers"
#endif // __GNUC__
/// Type structure of RectangularTrimmedSurfacePy
PyTypeObject RectangularTrimmedSurfacePy::Type = {
    .ob_base = PyVarObject_HEAD_INIT(&PyType_Type,0)
    .tp_name = "Part.RectangularTrimmedSurface",
    .tp_basicsize = sizeof(RectangularTrimmedSurfacePy),
    .tp_itemsize = 0,
    /* methods */
    .tp_dealloc = PyDestructor,
    .tp_repr = __repr,
    .tp_getattro = __getattro,
    .tp_setattro = __setattro,
    /* --- Flags to define presence of optional/expanded features */
    .tp_flags = Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT,
    .tp_doc = "Describes a portion of a surface (a patch) limited by two values of the\n"
    "u parameter in the u parametric direction, and two values of the v parameter in the v parametric\n"
    "direction. The domain of the trimmed surface must be within the domain of the surface being trimmed.\n"
    "\n"
    "The trimmed surface is defined by:\n"
    "- the basis surface, and\n"
    "- the values (umin, umax) and (vmin, vmax) which limit it in the u and v parametric directions.\n"
    "\n"
    "The trimmed surface is built from a copy of the basis surface. Therefore, when the basis surface\n"
    "is modified the trimmed surface is not changed. Consequently, the trimmed surface does not\n"
    "necessarily have the same orientation as the basis surface.",
    .tp_methods = Part::RectangularTrimmedSurfacePy::Methods,
    .tp_getset = Part::RectangularTrimmedSurfacePy::GetterSetter,
    .tp_base = &Part::GeometrySurfacePy::Type,
    .tp_init = __PyInit,
    .tp_new = Part::RectangularTrimmedSurfacePy::PyMake
};
#if defined(__GNUC__)
#pragma GCC diagnostic pop
#endif // __GNUC__

/// Methods structure of RectangularTrimmedSurfacePy
PyMethodDef RectangularTrimmedSurfacePy::Methods[] = {
    {"setTrim",
        reinterpret_cast<PyCFunction>( staticCallback_setTrim ),
        METH_VARARGS,
        "setTrim(self, params: (u1, u2, v1, v2)) -> None\n"
        "\n"
        "Modifies this patch by changing the trim values applied to the original surface"
    },
    {nullptr, nullptr, 0, nullptr}		/* Sentinel */
};



/// Attribute structure of RectangularTrimmedSurfacePy
PyGetSetDef RectangularTrimmedSurfacePy::GetterSetter[] = {
    {"BasisSurface",
        (getter) staticCallback_getBasisSurface,
        (setter) staticCallback_setBasisSurface,
        "Represents the basis surface from which the trimmed surface is derived.",
        nullptr
    },
    {nullptr, nullptr, nullptr, nullptr, nullptr}		/* Sentinel */
};

// setTrim() callback and implementer
// PyObject*  RectangularTrimmedSurfacePy::setTrim(PyObject *args){};
// has to be implemented in RectangularTrimmedSurfacePyImp.cpp
PyObject * RectangularTrimmedSurfacePy::staticCallback_setTrim (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'setTrim' of 'Part.GeomTrimmedSurface' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<RectangularTrimmedSurfacePy*>(self)->setTrim(args);
        if (ret != nullptr)
            static_cast<RectangularTrimmedSurfacePy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return nullptr;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// BasisSurface() callback and implementer
// PyObject*  RectangularTrimmedSurfacePy::BasisSurface(PyObject *args){};
// has to be implemented in RectangularTrimmedSurfacePyImp.cpp
PyObject * RectangularTrimmedSurfacePy::staticCallback_getBasisSurface (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<RectangularTrimmedSurfacePy*>(self)->getBasisSurface());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'BasisSurface' of object 'GeomTrimmedSurface'");
        return nullptr;
    }
}

int RectangularTrimmedSurfacePy::staticCallback_setBasisSurface (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'BasisSurface' of object 'GeomTrimmedSurface' is read-only");
    return -1;
}




//--------------------------------------------------------------------------
// Constructor
//--------------------------------------------------------------------------
RectangularTrimmedSurfacePy::RectangularTrimmedSurfacePy(GeomTrimmedSurface *pcObject, PyTypeObject *T)
    : GeometrySurfacePy(static_cast<GeometrySurfacePy::PointerType>(pcObject), T)
{
}


//--------------------------------------------------------------------------
// destructor
//--------------------------------------------------------------------------
RectangularTrimmedSurfacePy::~RectangularTrimmedSurfacePy()                                // Everything handled in parent
{
}

//--------------------------------------------------------------------------
// RectangularTrimmedSurfacePy representation
//--------------------------------------------------------------------------
PyObject *RectangularTrimmedSurfacePy::_repr()
{
    return Py_BuildValue("s", representation().c_str());
}

//--------------------------------------------------------------------------
// RectangularTrimmedSurfacePy Attributes
//--------------------------------------------------------------------------
PyObject *RectangularTrimmedSurfacePy::_getattr(const char *attr)			// __getattr__ function: note only need to handle new state
{
    try {
        // getter method for special Attributes (e.g. dynamic ones)
        PyObject *r = getCustomAttributes(attr);
        if(r) return r;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return nullptr;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError,"Unknown C++ exception");
        return nullptr;
    }
#endif

    PyMethodDef *ml = Methods;
    for (; ml->ml_name != nullptr; ml++) {
        if (attr[0] == ml->ml_name[0] &&
            strcmp(attr+1, ml->ml_name+1) == 0)
            return PyCFunction_New(ml, this);
    }

    PyErr_Clear();
    return GeometrySurfacePy::_getattr(attr);
}

int RectangularTrimmedSurfacePy::_setattr(const char *attr, PyObject *value) // __setattr__ function: note only need to handle new state
{
    try {
        // setter for special Attributes (e.g. dynamic ones)
        int r = setCustomAttributes(attr, value);
        // r = 1: handled
        // r = -1: error
        // r = 0: ignore
        if (r == 1)
            return 0;
        else if (r == -1)
            return -1;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return -1;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return -1;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return -1;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return -1;
    }
#endif

    return GeometrySurfacePy::_setattr(attr, value);
}

GeomTrimmedSurface *RectangularTrimmedSurfacePy::getGeomTrimmedSurfacePtr() const
{
    return static_cast<GeomTrimmedSurface *>(_pcTwinPointer);
}

#if defined(__clang__)
# pragma clang diagnostic pop
#endif

#if 0
/* From here on come the methods you have to implement, but NOT in this module. Implement in RectangularTrimmedSurfacePyImp.cpp! This prototypes
 * are just for convenience when you add a new method.
 */

PyObject *RectangularTrimmedSurfacePy::PyMake(PyTypeObject* /*type*/, PyObject* /*args*/, PyObject* /*kwds*/)
{
    // create a new instance of RectangularTrimmedSurfacePy and the Twin object
    return new RectangularTrimmedSurfacePy(new GeomTrimmedSurface);
}

// constructor method
int RectangularTrimmedSurfacePy::PyInit(PyObject* /*args*/, PyObject* /*kwd*/)
{
    return 0;
}


// returns a string which represents the object e.g. when printed in python
std::string RectangularTrimmedSurfacePy::representation() const
{
    return {"<GeomTrimmedSurface object>"};
}

PyObject* RectangularTrimmedSurfacePy::setTrim(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}



Py::Object RectangularTrimmedSurfacePy::getBasisSurface() const
{
    //return Py::Object();
    throw Py::AttributeError("Not yet implemented");
}

PyObject *RectangularTrimmedSurfacePy::getCustomAttributes(const char* /*attr*/) const
{
    return nullptr;
}

int RectangularTrimmedSurfacePy::setCustomAttributes(const char* /*attr*/, PyObject* /*obj*/)
{
    return 0;
}


#endif



