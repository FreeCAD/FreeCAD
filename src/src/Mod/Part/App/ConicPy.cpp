
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the .XML file
// Every change you make here gets lost in the next full rebuild!
// This File is normally built as an include in ConicPyImp.cpp! It's not intended to be in a project!

#include <Base/PyObjectBase.h>
#include <Base/Console.h>
#include <Base/Exception.h>
#include <CXX/Objects.hxx>

#if defined(__clang__)
# pragma clang diagnostic push
# pragma clang diagnostic ignored "-Wdeprecated-declarations"
#endif

using Base::streq;
using namespace Part;

#if defined(__GNUC__)
#pragma GCC diagnostic push
// Ignore -Wmissing-field-initializers (GCC only):
// - C++20 guarantees omitted fields are zero-initialized.
// - Python C API changes fields across versions.
// - Clang does not warn; GCC does unnecessarily.
// See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=96868
#pragma GCC diagnostic ignored "-Wmissing-field-initializers"
#endif // __GNUC__
/// Type structure of ConicPy
PyTypeObject ConicPy::Type = {
    .ob_base = PyVarObject_HEAD_INIT(&PyType_Type,0)
    .tp_name = "Part.Conic",
    .tp_basicsize = sizeof(ConicPy),
    .tp_itemsize = 0,
    /* methods */
    .tp_dealloc = PyDestructor,
    .tp_repr = __repr,
    .tp_getattro = __getattro,
    .tp_setattro = __setattro,
    /* --- Flags to define presence of optional/expanded features */
    .tp_flags = Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT,
    .tp_doc = "Describes an abstract conic in 3d space",
    .tp_methods = Part::ConicPy::Methods,
    .tp_getset = Part::ConicPy::GetterSetter,
    .tp_base = &Part::GeometryCurvePy::Type,
    .tp_init = __PyInit,
    .tp_new = Part::ConicPy::PyMake
};
#if defined(__GNUC__)
#pragma GCC diagnostic pop
#endif // __GNUC__

/// Methods structure of ConicPy
PyMethodDef ConicPy::Methods[] = {
    {nullptr, nullptr, 0, nullptr}		/* Sentinel */
};



/// Attribute structure of ConicPy
PyGetSetDef ConicPy::GetterSetter[] = {
    {"Location",
        (getter) staticCallback_getLocation,
        (setter) staticCallback_setLocation,
        "Location of the conic.",
        nullptr
    },
    {"Center",
        (getter) staticCallback_getCenter,
        (setter) staticCallback_setCenter,
        "Deprecated -- use Location.",
        nullptr
    },
    {"Eccentricity",
        (getter) staticCallback_getEccentricity,
        (setter) staticCallback_setEccentricity,
        "Returns the eccentricity value of the conic e.\n"
        "e = 0 for a circle\n"
        "0 < e < 1 for an ellipse  (e = 0 if MajorRadius = MinorRadius)\n"
        "e > 1 for a hyperbola\n"
        "e = 1 for a parabola",
        nullptr
    },
    {"AngleXU",
        (getter) staticCallback_getAngleXU,
        (setter) staticCallback_setAngleXU,
        "The angle between the X axis and the major axis of the conic.",
        nullptr
    },
    {"Axis",
        (getter) staticCallback_getAxis,
        (setter) staticCallback_setAxis,
        "The axis direction of the circle",
        nullptr
    },
    {"XAxis",
        (getter) staticCallback_getXAxis,
        (setter) staticCallback_setXAxis,
        "The X axis direction of the circle",
        nullptr
    },
    {"YAxis",
        (getter) staticCallback_getYAxis,
        (setter) staticCallback_setYAxis,
        "The Y axis direction of the circle",
        nullptr
    },
    {nullptr, nullptr, nullptr, nullptr, nullptr}		/* Sentinel */
};

// Location() callback and implementer
// PyObject*  ConicPy::Location(PyObject *args){};
// has to be implemented in ConicPyImp.cpp
PyObject * ConicPy::staticCallback_getLocation (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ConicPy*>(self)->getLocation());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Location' of object 'GeomConic'");
        return nullptr;
    }
}

int ConicPy::staticCallback_setLocation (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<ConicPy*>(self)->setLocation(Py::Object(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'Location' of object 'GeomConic'");
        return -1;
    }
}

// Center() callback and implementer
// PyObject*  ConicPy::Center(PyObject *args){};
// has to be implemented in ConicPyImp.cpp
PyObject * ConicPy::staticCallback_getCenter (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ConicPy*>(self)->getCenter());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Center' of object 'GeomConic'");
        return nullptr;
    }
}

int ConicPy::staticCallback_setCenter (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<ConicPy*>(self)->setCenter(Py::Object(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'Center' of object 'GeomConic'");
        return -1;
    }
}

// Eccentricity() callback and implementer
// PyObject*  ConicPy::Eccentricity(PyObject *args){};
// has to be implemented in ConicPyImp.cpp
PyObject * ConicPy::staticCallback_getEccentricity (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ConicPy*>(self)->getEccentricity());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Eccentricity' of object 'GeomConic'");
        return nullptr;
    }
}

int ConicPy::staticCallback_setEccentricity (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'Eccentricity' of object 'GeomConic' is read-only");
    return -1;
}

// AngleXU() callback and implementer
// PyObject*  ConicPy::AngleXU(PyObject *args){};
// has to be implemented in ConicPyImp.cpp
PyObject * ConicPy::staticCallback_getAngleXU (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ConicPy*>(self)->getAngleXU());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'AngleXU' of object 'GeomConic'");
        return nullptr;
    }
}

int ConicPy::staticCallback_setAngleXU (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<ConicPy*>(self)->setAngleXU(Py::Float(PyNumber_Float(value),true));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'AngleXU' of object 'GeomConic'");
        return -1;
    }
}

// Axis() callback and implementer
// PyObject*  ConicPy::Axis(PyObject *args){};
// has to be implemented in ConicPyImp.cpp
PyObject * ConicPy::staticCallback_getAxis (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ConicPy*>(self)->getAxis());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Axis' of object 'GeomConic'");
        return nullptr;
    }
}

int ConicPy::staticCallback_setAxis (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<ConicPy*>(self)->setAxis(Py::Object(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'Axis' of object 'GeomConic'");
        return -1;
    }
}

// XAxis() callback and implementer
// PyObject*  ConicPy::XAxis(PyObject *args){};
// has to be implemented in ConicPyImp.cpp
PyObject * ConicPy::staticCallback_getXAxis (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ConicPy*>(self)->getXAxis());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'XAxis' of object 'GeomConic'");
        return nullptr;
    }
}

int ConicPy::staticCallback_setXAxis (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<ConicPy*>(self)->setXAxis(Py::Object(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'XAxis' of object 'GeomConic'");
        return -1;
    }
}

// YAxis() callback and implementer
// PyObject*  ConicPy::YAxis(PyObject *args){};
// has to be implemented in ConicPyImp.cpp
PyObject * ConicPy::staticCallback_getYAxis (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ConicPy*>(self)->getYAxis());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'YAxis' of object 'GeomConic'");
        return nullptr;
    }
}

int ConicPy::staticCallback_setYAxis (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<ConicPy*>(self)->setYAxis(Py::Object(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'YAxis' of object 'GeomConic'");
        return -1;
    }
}




//--------------------------------------------------------------------------
// Constructor
//--------------------------------------------------------------------------
ConicPy::ConicPy(GeomConic *pcObject, PyTypeObject *T)
    : GeometryCurvePy(static_cast<GeometryCurvePy::PointerType>(pcObject), T)
{
}


//--------------------------------------------------------------------------
// destructor
//--------------------------------------------------------------------------
ConicPy::~ConicPy()                                // Everything handled in parent
{
}

//--------------------------------------------------------------------------
// ConicPy representation
//--------------------------------------------------------------------------
PyObject *ConicPy::_repr()
{
    return Py_BuildValue("s", representation().c_str());
}

//--------------------------------------------------------------------------
// ConicPy Attributes
//--------------------------------------------------------------------------
PyObject *ConicPy::_getattr(const char *attr)			// __getattr__ function: note only need to handle new state
{
    try {
        // getter method for special Attributes (e.g. dynamic ones)
        PyObject *r = getCustomAttributes(attr);
        if(r) return r;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return nullptr;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError,"Unknown C++ exception");
        return nullptr;
    }
#endif

    PyMethodDef *ml = Methods;
    for (; ml->ml_name != nullptr; ml++) {
        if (attr[0] == ml->ml_name[0] &&
            strcmp(attr+1, ml->ml_name+1) == 0)
            return PyCFunction_New(ml, this);
    }

    PyErr_Clear();
    return GeometryCurvePy::_getattr(attr);
}

int ConicPy::_setattr(const char *attr, PyObject *value) // __setattr__ function: note only need to handle new state
{
    try {
        // setter for special Attributes (e.g. dynamic ones)
        int r = setCustomAttributes(attr, value);
        // r = 1: handled
        // r = -1: error
        // r = 0: ignore
        if (r == 1)
            return 0;
        else if (r == -1)
            return -1;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return -1;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return -1;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return -1;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return -1;
    }
#endif

    return GeometryCurvePy::_setattr(attr, value);
}

GeomConic *ConicPy::getGeomConicPtr() const
{
    return static_cast<GeomConic *>(_pcTwinPointer);
}

#if defined(__clang__)
# pragma clang diagnostic pop
#endif

#if 0
/* From here on come the methods you have to implement, but NOT in this module. Implement in ConicPyImp.cpp! This prototypes
 * are just for convenience when you add a new method.
 */

PyObject *ConicPy::PyMake(PyTypeObject* /*type*/, PyObject* /*args*/, PyObject* /*kwds*/)
{
    // create a new instance of ConicPy and the Twin object
    return new ConicPy(new GeomConic);
}

// constructor method
int ConicPy::PyInit(PyObject* /*args*/, PyObject* /*kwd*/)
{
    return 0;
}


// returns a string which represents the object e.g. when printed in python
std::string ConicPy::representation() const
{
    return {"<GeomConic object>"};
}



Py::Object ConicPy::getLocation() const
{
    //return Py::Object();
    throw Py::AttributeError("Not yet implemented");
}

void  ConicPy::setLocation(Py::Object arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Object ConicPy::getCenter() const
{
    //return Py::Object();
    throw Py::AttributeError("Not yet implemented");
}

void  ConicPy::setCenter(Py::Object arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Float ConicPy::getEccentricity() const
{
    //return Py::Float();
    throw Py::AttributeError("Not yet implemented");
}

Py::Float ConicPy::getAngleXU() const
{
    //return Py::Float();
    throw Py::AttributeError("Not yet implemented");
}

void  ConicPy::setAngleXU(Py::Float arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Object ConicPy::getAxis() const
{
    //return Py::Object();
    throw Py::AttributeError("Not yet implemented");
}

void  ConicPy::setAxis(Py::Object arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Object ConicPy::getXAxis() const
{
    //return Py::Object();
    throw Py::AttributeError("Not yet implemented");
}

void  ConicPy::setXAxis(Py::Object arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Object ConicPy::getYAxis() const
{
    //return Py::Object();
    throw Py::AttributeError("Not yet implemented");
}

void  ConicPy::setYAxis(Py::Object arg)
{
    throw Py::AttributeError("Not yet implemented");
}

PyObject *ConicPy::getCustomAttributes(const char* /*attr*/) const
{
    return nullptr;
}

int ConicPy::setCustomAttributes(const char* /*attr*/, PyObject* /*obj*/)
{
    return 0;
}


#endif



