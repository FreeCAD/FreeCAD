
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the .XML file
// Every change you make here gets lost in the next full rebuild!
// This File is normally built as an include in Hyperbola2dPyImp.cpp! It's not intended to be in a project!

#include <Base/PyObjectBase.h>
#include <Base/Console.h>
#include <Base/Exception.h>
#include <CXX/Objects.hxx>

#if defined(__clang__)
# pragma clang diagnostic push
# pragma clang diagnostic ignored "-Wdeprecated-declarations"
#endif

using Base::streq;
using namespace Part;

#if defined(__GNUC__)
#pragma GCC diagnostic push
// Ignore -Wmissing-field-initializers (GCC only):
// - C++20 guarantees omitted fields are zero-initialized.
// - Python C API changes fields across versions.
// - Clang does not warn; GCC does unnecessarily.
// See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=96868
#pragma GCC diagnostic ignored "-Wmissing-field-initializers"
#endif // __GNUC__
/// Type structure of Hyperbola2dPy
PyTypeObject Hyperbola2dPy::Type = {
    .ob_base = PyVarObject_HEAD_INIT(&PyType_Type,0)
    .tp_name = "Part.Geom2d.Hyperbola2d",
    .tp_basicsize = sizeof(Hyperbola2dPy),
    .tp_itemsize = 0,
    /* methods */
    .tp_dealloc = PyDestructor,
    .tp_repr = __repr,
    .tp_getattro = __getattro,
    .tp_setattro = __setattro,
    /* --- Flags to define presence of optional/expanded features */
    .tp_flags = Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT,
    .tp_doc = "Describes a hyperbola in 2D space\n"
    "To create a hyperbola there are several ways:\n"
    "Part.Geom2d.Hyperbola2d()\n"
    "    Creates a hyperbola with major radius 2 and minor radius 1 with the\n"
    "    center in (0,0)\n"
    "\n"
    "Part.Geom2d.Hyperbola2d(Hyperbola)\n"
    "    Create a copy of the given hyperbola\n"
    "\n"
    "Part.Geom2d.Hyperbola2d(S1,S2,Center)\n"
    "    Creates a hyperbola centered on the point Center, S1 and S2,\n"
    "    its major axis is defined by Center and S1,\n"
    "    its major radius is the distance between Center and S1, and\n"
    "    its minor radius is the distance between S2 and the major axis.\n"
    "\n"
    "Part.Geom2d.Hyperbola2d(Center,MajorRadius,MinorRadius)\n"
    "    Creates a hyperbola with major and minor radii MajorRadius and\n"
    "    MinorRadius and located at Center",
    .tp_methods = Part::Hyperbola2dPy::Methods,
    .tp_getset = Part::Hyperbola2dPy::GetterSetter,
    .tp_base = &Part::Conic2dPy::Type,
    .tp_init = __PyInit,
    .tp_new = Part::Hyperbola2dPy::PyMake
};
#if defined(__GNUC__)
#pragma GCC diagnostic pop
#endif // __GNUC__

/// Methods structure of Hyperbola2dPy
PyMethodDef Hyperbola2dPy::Methods[] = {
    {nullptr, nullptr, 0, nullptr}		/* Sentinel */
};



/// Attribute structure of Hyperbola2dPy
PyGetSetDef Hyperbola2dPy::GetterSetter[] = {
    {"MajorRadius",
        (getter) staticCallback_getMajorRadius,
        (setter) staticCallback_setMajorRadius,
        "The major radius of the hyperbola.",
        nullptr
    },
    {"MinorRadius",
        (getter) staticCallback_getMinorRadius,
        (setter) staticCallback_setMinorRadius,
        "The minor radius of the hyperbola.",
        nullptr
    },
    {"Focal",
        (getter) staticCallback_getFocal,
        (setter) staticCallback_setFocal,
        "The focal distance of the hyperbola.",
        nullptr
    },
    {"Focus1",
        (getter) staticCallback_getFocus1,
        (setter) staticCallback_setFocus1,
        "The first focus is on the positive side of the major axis of the hyperbola;\n"
        "the second focus is on the negative side.",
        nullptr
    },
    {"Focus2",
        (getter) staticCallback_getFocus2,
        (setter) staticCallback_setFocus2,
        "The first focus is on the positive side of the major axis of the hyperbola;\n"
        "the second focus is on the negative side.",
        nullptr
    },
    {nullptr, nullptr, nullptr, nullptr, nullptr}		/* Sentinel */
};

// MajorRadius() callback and implementer
// PyObject*  Hyperbola2dPy::MajorRadius(PyObject *args){};
// has to be implemented in Hyperbola2dPyImp.cpp
PyObject * Hyperbola2dPy::staticCallback_getMajorRadius (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<Hyperbola2dPy*>(self)->getMajorRadius());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'MajorRadius' of object 'Geom2dHyperbola'");
        return nullptr;
    }
}

int Hyperbola2dPy::staticCallback_setMajorRadius (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<Hyperbola2dPy*>(self)->setMajorRadius(Py::Float(PyNumber_Float(value),true));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'MajorRadius' of object 'Geom2dHyperbola'");
        return -1;
    }
}

// MinorRadius() callback and implementer
// PyObject*  Hyperbola2dPy::MinorRadius(PyObject *args){};
// has to be implemented in Hyperbola2dPyImp.cpp
PyObject * Hyperbola2dPy::staticCallback_getMinorRadius (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<Hyperbola2dPy*>(self)->getMinorRadius());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'MinorRadius' of object 'Geom2dHyperbola'");
        return nullptr;
    }
}

int Hyperbola2dPy::staticCallback_setMinorRadius (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<Hyperbola2dPy*>(self)->setMinorRadius(Py::Float(PyNumber_Float(value),true));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'MinorRadius' of object 'Geom2dHyperbola'");
        return -1;
    }
}

// Focal() callback and implementer
// PyObject*  Hyperbola2dPy::Focal(PyObject *args){};
// has to be implemented in Hyperbola2dPyImp.cpp
PyObject * Hyperbola2dPy::staticCallback_getFocal (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<Hyperbola2dPy*>(self)->getFocal());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Focal' of object 'Geom2dHyperbola'");
        return nullptr;
    }
}

int Hyperbola2dPy::staticCallback_setFocal (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'Focal' of object 'Geom2dHyperbola' is read-only");
    return -1;
}

// Focus1() callback and implementer
// PyObject*  Hyperbola2dPy::Focus1(PyObject *args){};
// has to be implemented in Hyperbola2dPyImp.cpp
PyObject * Hyperbola2dPy::staticCallback_getFocus1 (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<Hyperbola2dPy*>(self)->getFocus1());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Focus1' of object 'Geom2dHyperbola'");
        return nullptr;
    }
}

int Hyperbola2dPy::staticCallback_setFocus1 (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'Focus1' of object 'Geom2dHyperbola' is read-only");
    return -1;
}

// Focus2() callback and implementer
// PyObject*  Hyperbola2dPy::Focus2(PyObject *args){};
// has to be implemented in Hyperbola2dPyImp.cpp
PyObject * Hyperbola2dPy::staticCallback_getFocus2 (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<Hyperbola2dPy*>(self)->getFocus2());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Focus2' of object 'Geom2dHyperbola'");
        return nullptr;
    }
}

int Hyperbola2dPy::staticCallback_setFocus2 (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'Focus2' of object 'Geom2dHyperbola' is read-only");
    return -1;
}




//--------------------------------------------------------------------------
// Constructor
//--------------------------------------------------------------------------
Hyperbola2dPy::Hyperbola2dPy(Geom2dHyperbola *pcObject, PyTypeObject *T)
    : Conic2dPy(static_cast<Conic2dPy::PointerType>(pcObject), T)
{
}


//--------------------------------------------------------------------------
// destructor
//--------------------------------------------------------------------------
Hyperbola2dPy::~Hyperbola2dPy()                                // Everything handled in parent
{
}

//--------------------------------------------------------------------------
// Hyperbola2dPy representation
//--------------------------------------------------------------------------
PyObject *Hyperbola2dPy::_repr()
{
    return Py_BuildValue("s", representation().c_str());
}

//--------------------------------------------------------------------------
// Hyperbola2dPy Attributes
//--------------------------------------------------------------------------
PyObject *Hyperbola2dPy::_getattr(const char *attr)			// __getattr__ function: note only need to handle new state
{
    try {
        // getter method for special Attributes (e.g. dynamic ones)
        PyObject *r = getCustomAttributes(attr);
        if(r) return r;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return nullptr;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError,"Unknown C++ exception");
        return nullptr;
    }
#endif

    PyMethodDef *ml = Methods;
    for (; ml->ml_name != nullptr; ml++) {
        if (attr[0] == ml->ml_name[0] &&
            strcmp(attr+1, ml->ml_name+1) == 0)
            return PyCFunction_New(ml, this);
    }

    PyErr_Clear();
    return Conic2dPy::_getattr(attr);
}

int Hyperbola2dPy::_setattr(const char *attr, PyObject *value) // __setattr__ function: note only need to handle new state
{
    try {
        // setter for special Attributes (e.g. dynamic ones)
        int r = setCustomAttributes(attr, value);
        // r = 1: handled
        // r = -1: error
        // r = 0: ignore
        if (r == 1)
            return 0;
        else if (r == -1)
            return -1;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return -1;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return -1;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return -1;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return -1;
    }
#endif

    return Conic2dPy::_setattr(attr, value);
}

Geom2dHyperbola *Hyperbola2dPy::getGeom2dHyperbolaPtr() const
{
    return static_cast<Geom2dHyperbola *>(_pcTwinPointer);
}

#if defined(__clang__)
# pragma clang diagnostic pop
#endif

#if 0
/* From here on come the methods you have to implement, but NOT in this module. Implement in Hyperbola2dPyImp.cpp! This prototypes
 * are just for convenience when you add a new method.
 */

PyObject *Hyperbola2dPy::PyMake(PyTypeObject* /*type*/, PyObject* /*args*/, PyObject* /*kwds*/)
{
    // create a new instance of Hyperbola2dPy and the Twin object
    return new Hyperbola2dPy(new Geom2dHyperbola);
}

// constructor method
int Hyperbola2dPy::PyInit(PyObject* /*args*/, PyObject* /*kwd*/)
{
    return 0;
}


// returns a string which represents the object e.g. when printed in python
std::string Hyperbola2dPy::representation() const
{
    return {"<Geom2dHyperbola object>"};
}



Py::Float Hyperbola2dPy::getMajorRadius() const
{
    //return Py::Float();
    throw Py::AttributeError("Not yet implemented");
}

void  Hyperbola2dPy::setMajorRadius(Py::Float arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Float Hyperbola2dPy::getMinorRadius() const
{
    //return Py::Float();
    throw Py::AttributeError("Not yet implemented");
}

void  Hyperbola2dPy::setMinorRadius(Py::Float arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Float Hyperbola2dPy::getFocal() const
{
    //return Py::Float();
    throw Py::AttributeError("Not yet implemented");
}

Py::Object Hyperbola2dPy::getFocus1() const
{
    //return Py::Object();
    throw Py::AttributeError("Not yet implemented");
}

Py::Object Hyperbola2dPy::getFocus2() const
{
    //return Py::Object();
    throw Py::AttributeError("Not yet implemented");
}

PyObject *Hyperbola2dPy::getCustomAttributes(const char* /*attr*/) const
{
    return nullptr;
}

int Hyperbola2dPy::setCustomAttributes(const char* /*attr*/, PyObject* /*obj*/)
{
    return 0;
}


#endif



