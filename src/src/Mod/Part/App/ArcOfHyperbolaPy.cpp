
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the .XML file
// Every change you make here gets lost in the next full rebuild!
// This File is normally built as an include in ArcOfHyperbolaPyImp.cpp! It's not intended to be in a project!

#include <Base/PyObjectBase.h>
#include <Base/Console.h>
#include <Base/Exception.h>
#include <CXX/Objects.hxx>

#if defined(__clang__)
# pragma clang diagnostic push
# pragma clang diagnostic ignored "-Wdeprecated-declarations"
#endif

using Base::streq;
using namespace Part;

#if defined(__GNUC__)
#pragma GCC diagnostic push
// Ignore -Wmissing-field-initializers (GCC only):
// - C++20 guarantees omitted fields are zero-initialized.
// - Python C API changes fields across versions.
// - Clang does not warn; GCC does unnecessarily.
// See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=96868
#pragma GCC diagnostic ignored "-Wmissing-field-initializers"
#endif // __GNUC__
/// Type structure of ArcOfHyperbolaPy
PyTypeObject ArcOfHyperbolaPy::Type = {
    .ob_base = PyVarObject_HEAD_INIT(&PyType_Type,0)
    .tp_name = "Part.ArcOfHyperbola",
    .tp_basicsize = sizeof(ArcOfHyperbolaPy),
    .tp_itemsize = 0,
    /* methods */
    .tp_dealloc = PyDestructor,
    .tp_repr = __repr,
    .tp_getattro = __getattro,
    .tp_setattro = __setattro,
    /* --- Flags to define presence of optional/expanded features */
    .tp_flags = Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT,
    .tp_doc = "Describes a portion of an hyperbola",
    .tp_methods = Part::ArcOfHyperbolaPy::Methods,
    .tp_getset = Part::ArcOfHyperbolaPy::GetterSetter,
    .tp_base = &Part::ArcOfConicPy::Type,
    .tp_init = __PyInit,
    .tp_new = Part::ArcOfHyperbolaPy::PyMake
};
#if defined(__GNUC__)
#pragma GCC diagnostic pop
#endif // __GNUC__

/// Methods structure of ArcOfHyperbolaPy
PyMethodDef ArcOfHyperbolaPy::Methods[] = {
    {nullptr, nullptr, 0, nullptr}		/* Sentinel */
};



/// Attribute structure of ArcOfHyperbolaPy
PyGetSetDef ArcOfHyperbolaPy::GetterSetter[] = {
    {"MajorRadius",
        (getter) staticCallback_getMajorRadius,
        (setter) staticCallback_setMajorRadius,
        "The major radius of the hyperbola.",
        nullptr
    },
    {"MinorRadius",
        (getter) staticCallback_getMinorRadius,
        (setter) staticCallback_setMinorRadius,
        "The minor radius of the hyperbola.",
        nullptr
    },
    {"Hyperbola",
        (getter) staticCallback_getHyperbola,
        (setter) staticCallback_setHyperbola,
        "The internal hyperbola representation",
        nullptr
    },
    {nullptr, nullptr, nullptr, nullptr, nullptr}		/* Sentinel */
};

// MajorRadius() callback and implementer
// PyObject*  ArcOfHyperbolaPy::MajorRadius(PyObject *args){};
// has to be implemented in ArcOfHyperbolaPyImp.cpp
PyObject * ArcOfHyperbolaPy::staticCallback_getMajorRadius (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ArcOfHyperbolaPy*>(self)->getMajorRadius());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'MajorRadius' of object 'GeomArcOfHyperbola'");
        return nullptr;
    }
}

int ArcOfHyperbolaPy::staticCallback_setMajorRadius (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<ArcOfHyperbolaPy*>(self)->setMajorRadius(Py::Float(PyNumber_Float(value),true));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'MajorRadius' of object 'GeomArcOfHyperbola'");
        return -1;
    }
}

// MinorRadius() callback and implementer
// PyObject*  ArcOfHyperbolaPy::MinorRadius(PyObject *args){};
// has to be implemented in ArcOfHyperbolaPyImp.cpp
PyObject * ArcOfHyperbolaPy::staticCallback_getMinorRadius (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ArcOfHyperbolaPy*>(self)->getMinorRadius());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'MinorRadius' of object 'GeomArcOfHyperbola'");
        return nullptr;
    }
}

int ArcOfHyperbolaPy::staticCallback_setMinorRadius (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<ArcOfHyperbolaPy*>(self)->setMinorRadius(Py::Float(PyNumber_Float(value),true));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'MinorRadius' of object 'GeomArcOfHyperbola'");
        return -1;
    }
}

// Hyperbola() callback and implementer
// PyObject*  ArcOfHyperbolaPy::Hyperbola(PyObject *args){};
// has to be implemented in ArcOfHyperbolaPyImp.cpp
PyObject * ArcOfHyperbolaPy::staticCallback_getHyperbola (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ArcOfHyperbolaPy*>(self)->getHyperbola());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Hyperbola' of object 'GeomArcOfHyperbola'");
        return nullptr;
    }
}

int ArcOfHyperbolaPy::staticCallback_setHyperbola (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'Hyperbola' of object 'GeomArcOfHyperbola' is read-only");
    return -1;
}




//--------------------------------------------------------------------------
// Constructor
//--------------------------------------------------------------------------
ArcOfHyperbolaPy::ArcOfHyperbolaPy(GeomArcOfHyperbola *pcObject, PyTypeObject *T)
    : ArcOfConicPy(static_cast<ArcOfConicPy::PointerType>(pcObject), T)
{
}


//--------------------------------------------------------------------------
// destructor
//--------------------------------------------------------------------------
ArcOfHyperbolaPy::~ArcOfHyperbolaPy()                                // Everything handled in parent
{
}

//--------------------------------------------------------------------------
// ArcOfHyperbolaPy representation
//--------------------------------------------------------------------------
PyObject *ArcOfHyperbolaPy::_repr()
{
    return Py_BuildValue("s", representation().c_str());
}

//--------------------------------------------------------------------------
// ArcOfHyperbolaPy Attributes
//--------------------------------------------------------------------------
PyObject *ArcOfHyperbolaPy::_getattr(const char *attr)			// __getattr__ function: note only need to handle new state
{
    try {
        // getter method for special Attributes (e.g. dynamic ones)
        PyObject *r = getCustomAttributes(attr);
        if(r) return r;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return nullptr;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError,"Unknown C++ exception");
        return nullptr;
    }
#endif

    PyMethodDef *ml = Methods;
    for (; ml->ml_name != nullptr; ml++) {
        if (attr[0] == ml->ml_name[0] &&
            strcmp(attr+1, ml->ml_name+1) == 0)
            return PyCFunction_New(ml, this);
    }

    PyErr_Clear();
    return ArcOfConicPy::_getattr(attr);
}

int ArcOfHyperbolaPy::_setattr(const char *attr, PyObject *value) // __setattr__ function: note only need to handle new state
{
    try {
        // setter for special Attributes (e.g. dynamic ones)
        int r = setCustomAttributes(attr, value);
        // r = 1: handled
        // r = -1: error
        // r = 0: ignore
        if (r == 1)
            return 0;
        else if (r == -1)
            return -1;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return -1;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return -1;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return -1;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return -1;
    }
#endif

    return ArcOfConicPy::_setattr(attr, value);
}

GeomArcOfHyperbola *ArcOfHyperbolaPy::getGeomArcOfHyperbolaPtr() const
{
    return static_cast<GeomArcOfHyperbola *>(_pcTwinPointer);
}

#if defined(__clang__)
# pragma clang diagnostic pop
#endif

#if 0
/* From here on come the methods you have to implement, but NOT in this module. Implement in ArcOfHyperbolaPyImp.cpp! This prototypes
 * are just for convenience when you add a new method.
 */

PyObject *ArcOfHyperbolaPy::PyMake(PyTypeObject* /*type*/, PyObject* /*args*/, PyObject* /*kwds*/)
{
    // create a new instance of ArcOfHyperbolaPy and the Twin object
    return new ArcOfHyperbolaPy(new GeomArcOfHyperbola);
}

// constructor method
int ArcOfHyperbolaPy::PyInit(PyObject* /*args*/, PyObject* /*kwd*/)
{
    return 0;
}


// returns a string which represents the object e.g. when printed in python
std::string ArcOfHyperbolaPy::representation() const
{
    return {"<GeomArcOfHyperbola object>"};
}



Py::Float ArcOfHyperbolaPy::getMajorRadius() const
{
    //return Py::Float();
    throw Py::AttributeError("Not yet implemented");
}

void  ArcOfHyperbolaPy::setMajorRadius(Py::Float arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Float ArcOfHyperbolaPy::getMinorRadius() const
{
    //return Py::Float();
    throw Py::AttributeError("Not yet implemented");
}

void  ArcOfHyperbolaPy::setMinorRadius(Py::Float arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Object ArcOfHyperbolaPy::getHyperbola() const
{
    //return Py::Object();
    throw Py::AttributeError("Not yet implemented");
}

PyObject *ArcOfHyperbolaPy::getCustomAttributes(const char* /*attr*/) const
{
    return nullptr;
}

int ArcOfHyperbolaPy::setCustomAttributes(const char* /*attr*/, PyObject* /*obj*/)
{
    return 0;
}


#endif



