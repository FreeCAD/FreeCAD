
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the .XML file
// Every change you make here gets lost in the next full rebuild!
// This File is normally built as an include in AssemblyObjectPyImp.cpp! It's not intended to be in a project!

#include <Base/PyObjectBase.h>
#include <Base/Console.h>
#include <Base/Exception.h>
#include <CXX/Objects.hxx>

#if defined(__clang__)
# pragma clang diagnostic push
# pragma clang diagnostic ignored "-Wdeprecated-declarations"
#endif

using Base::streq;
using namespace Assembly;

#if defined(__GNUC__)
#pragma GCC diagnostic push
// Ignore -Wmissing-field-initializers (GCC only):
// - C++20 guarantees omitted fields are zero-initialized.
// - Python C API changes fields across versions.
// - Clang does not warn; GCC does unnecessarily.
// See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=96868
#pragma GCC diagnostic ignored "-Wmissing-field-initializers"
#endif // __GNUC__
/// Type structure of AssemblyObjectPy
PyTypeObject AssemblyObjectPy::Type = {
    .ob_base = PyVarObject_HEAD_INIT(&PyType_Type,0)
    .tp_name = "Assembly.AssemblyObject",
    .tp_basicsize = sizeof(AssemblyObjectPy),
    .tp_itemsize = 0,
    /* methods */
    .tp_dealloc = PyDestructor,
    .tp_repr = __repr,
    .tp_getattro = __getattro,
    .tp_setattro = __setattro,
    /* --- Flags to define presence of optional/expanded features */
    .tp_flags = Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT,
    .tp_doc = "This class handles document objects in Assembly\n"
    "\n"
    "License: LGPL-2.1-or-later",
    .tp_methods = Assembly::AssemblyObjectPy::Methods,
    .tp_getset = Assembly::AssemblyObjectPy::GetterSetter,
    .tp_base = &App::PartPy::Type,
    .tp_init = __PyInit,
    .tp_new = Assembly::AssemblyObjectPy::PyMake
};
#if defined(__GNUC__)
#pragma GCC diagnostic pop
#endif // __GNUC__

/// Methods structure of AssemblyObjectPy
PyMethodDef AssemblyObjectPy::Methods[] = {
    {"solve",
        reinterpret_cast<PyCFunction>( staticCallback_solve ),
        METH_VARARGS,
        "Solve the assembly and update part placements.\n"
        "\n"
        "solve(enableRedo=False) -> int\n"
        "\n"
        "Args:\n"
        "enableRedo: Whether the solve save the initial position of parts\n"
        "to enable undoing it even without a transaction.\n"
        "Defaults to `False` ie the solve cannot be undone if called\n"
        "outside of a transaction.\n"
        "\n"
        "Returns:\n"
        "0 in case of success, otherwise the following codes in this order of\n"
        "priority:\n"
        "-6 if no parts are fixed.\n"
        "-4 if over-constrained,\n"
        "-3 if conflicting constraints,\n"
        "-5 if malformed constraints\n"
        "-1 if solver error,\n"
        "-2 if redundant constraints."
    },
    {"generateSimulation",
        reinterpret_cast<PyCFunction>( staticCallback_generateSimulation ),
        METH_VARARGS,
        "Generate the simulation.\n"
        "\n"
        "solve(simulationObject) -> int\n"
        "\n"
        "Args:\n"
        "simulationObject: The simulation Object.\n"
        "\n"
        "Returns:\n"
        "0 in case of success, otherwise the following codes in this order of\n"
        "priority:\n"
        "-6 if no parts are fixed.\n"
        "-4 if over-constrained,\n"
        "-3 if conflicting constraints,\n"
        "-5 if malformed constraints\n"
        "-1 if solver error,\n"
        "-2 if redundant constraints."
    },
    {"updateForFrame",
        reinterpret_cast<PyCFunction>( staticCallback_updateForFrame ),
        METH_VARARGS,
        "Update entire assembly to frame number specified.\n"
        "\n"
        "updateForFrame(index)\n"
        "\n"
        "Args: index of frame.\n"
        "\n"
        "Returns: None"
    },
    {"numberOfFrames",
        reinterpret_cast<PyCFunction>( staticCallback_numberOfFrames ),
        METH_VARARGS,
        "numberOfFrames()\n"
        "\n"
        "Args: None\n"
        "\n"
        "Returns: Number of frames"
    },
    {"undoSolve",
        reinterpret_cast<PyCFunction>( staticCallback_undoSolve ),
        METH_VARARGS,
        "Undo the last solve of the assembly and return part placements to their initial position.\n"
        "\n"
        "undoSolve()\n"
        "\n"
        "Returns: None"
    },
    {"ensureIdentityPlacements",
        reinterpret_cast<PyCFunction>( staticCallback_ensureIdentityPlacements ),
        METH_VARARGS,
        "Makes sure that LinkGroups or sub-assemblies have identity placements.\n"
        "\n"
        "ensureIdentityPlacements()\n"
        "\n"
        "Returns: None"
    },
    {"clearUndo",
        reinterpret_cast<PyCFunction>( staticCallback_clearUndo ),
        METH_VARARGS,
        "Clear the registered undo positions.\n"
        "\n"
        "clearUndo()\n"
        "\n"
        "Returns: None"
    },
    {"isPartConnected",
        reinterpret_cast<PyCFunction>( staticCallback_isPartConnected ),
        METH_VARARGS,
        "Check if a part is connected to the ground through joints.\n"
        "\n"
        "isPartConnected(obj) -> bool\n"
        "\n"
        "Args: document object to check.\n"
        "\n"
        "Returns: True if part is connected to ground"
    },
    {"isJointConnectingPartToGround",
        reinterpret_cast<PyCFunction>( staticCallback_isJointConnectingPartToGround ),
        METH_VARARGS,
        "Check if a joint is connecting a part to the ground.\n"
        "\n"
        "isJointConnectingPartToGround(joint, propName) -> bool\n"
        "\n"
        "Args:\n"
        "- joint: document object of the joint to check.\n"
        "- propName: string 'Part1' or 'Part2' of the joint.\n"
        "\n"
        "Returns: True if part is connected to ground"
    },
    {"isPartGrounded",
        reinterpret_cast<PyCFunction>( staticCallback_isPartGrounded ),
        METH_VARARGS,
        "Check if a part has a grounded joint.\n"
        "\n"
        "isPartGrounded(obj) -> bool\n"
        "\n"
        "Args:\n"
        "- obj: document object of the part to check.\n"
        "\n"
        "Returns: True if part has grounded joint"
    },
    {"exportAsASMT",
        reinterpret_cast<PyCFunction>( staticCallback_exportAsASMT ),
        METH_VARARGS,
        "Export the assembly in a text format called ASMT.\n"
        "\n"
        "exportAsASMT(fileName:str)\n"
        "\n"
        "Args:\n"
        "fileName: The name of the file where the ASMT will be exported."
    },
    {"getDownstreamParts",
        reinterpret_cast<PyCFunction>( staticCallback_getDownstreamParts ),
        METH_VARARGS,
        "Finds all parts connected to a start_part that are not connected to ground\n"
        "when a specific joint is ignored.\n"
        "\n"
        "getDownstreamParts(start_part, joint_to_ignore) -> list\n"
        "\n"
        "This is used to find the entire rigid group of unconstrained components that\n"
        "should be moved together during a pre-solve operation or a drag.\n"
        "\n"
        "Args:\n"
        "    start_part: The App.DocumentObject to begin the search from.\n"
        "    joint_to_ignore: The App.DocumentObject (a joint) to temporarily\n"
        "                     suppress during the connectivity check.\n"
        "\n"
        "Returns:\n"
        "    A list of App.DocumentObject instances representing the downstream parts."
    },
    {nullptr, nullptr, 0, nullptr}		/* Sentinel */
};



/// Attribute structure of AssemblyObjectPy
PyGetSetDef AssemblyObjectPy::GetterSetter[] = {
    {"Joints",
        (getter) staticCallback_getJoints,
        (setter) staticCallback_setJoints,
        "A list of all joints this assembly has.",
        nullptr
    },
    {nullptr, nullptr, nullptr, nullptr, nullptr}		/* Sentinel */
};

// solve() callback and implementer
// PyObject*  AssemblyObjectPy::solve(PyObject *args){};
// has to be implemented in AssemblyObjectPyImp.cpp
PyObject * AssemblyObjectPy::staticCallback_solve (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'solve' of 'Assembly.AssemblyObject' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }


    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<AssemblyObjectPy*>(self)->solve(args);
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return nullptr;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// generateSimulation() callback and implementer
// PyObject*  AssemblyObjectPy::generateSimulation(PyObject *args){};
// has to be implemented in AssemblyObjectPyImp.cpp
PyObject * AssemblyObjectPy::staticCallback_generateSimulation (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'generateSimulation' of 'Assembly.AssemblyObject' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }


    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<AssemblyObjectPy*>(self)->generateSimulation(args);
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return nullptr;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// updateForFrame() callback and implementer
// PyObject*  AssemblyObjectPy::updateForFrame(PyObject *args){};
// has to be implemented in AssemblyObjectPyImp.cpp
PyObject * AssemblyObjectPy::staticCallback_updateForFrame (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'updateForFrame' of 'Assembly.AssemblyObject' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }


    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<AssemblyObjectPy*>(self)->updateForFrame(args);
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return nullptr;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// numberOfFrames() callback and implementer
// PyObject*  AssemblyObjectPy::numberOfFrames(PyObject *args){};
// has to be implemented in AssemblyObjectPyImp.cpp
PyObject * AssemblyObjectPy::staticCallback_numberOfFrames (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'numberOfFrames' of 'Assembly.AssemblyObject' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }


    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<AssemblyObjectPy*>(self)->numberOfFrames(args);
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return nullptr;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// undoSolve() callback and implementer
// PyObject*  AssemblyObjectPy::undoSolve(PyObject *args){};
// has to be implemented in AssemblyObjectPyImp.cpp
PyObject * AssemblyObjectPy::staticCallback_undoSolve (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'undoSolve' of 'Assembly.AssemblyObject' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }


    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<AssemblyObjectPy*>(self)->undoSolve(args);
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return nullptr;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// ensureIdentityPlacements() callback and implementer
// PyObject*  AssemblyObjectPy::ensureIdentityPlacements(PyObject *args){};
// has to be implemented in AssemblyObjectPyImp.cpp
PyObject * AssemblyObjectPy::staticCallback_ensureIdentityPlacements (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'ensureIdentityPlacements' of 'Assembly.AssemblyObject' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }


    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<AssemblyObjectPy*>(self)->ensureIdentityPlacements(args);
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return nullptr;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// clearUndo() callback and implementer
// PyObject*  AssemblyObjectPy::clearUndo(PyObject *args){};
// has to be implemented in AssemblyObjectPyImp.cpp
PyObject * AssemblyObjectPy::staticCallback_clearUndo (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'clearUndo' of 'Assembly.AssemblyObject' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }


    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<AssemblyObjectPy*>(self)->clearUndo(args);
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return nullptr;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// isPartConnected() callback and implementer
// PyObject*  AssemblyObjectPy::isPartConnected(PyObject *args){};
// has to be implemented in AssemblyObjectPyImp.cpp
PyObject * AssemblyObjectPy::staticCallback_isPartConnected (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'isPartConnected' of 'Assembly.AssemblyObject' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }


    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<AssemblyObjectPy*>(self)->isPartConnected(args);
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return nullptr;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// isJointConnectingPartToGround() callback and implementer
// PyObject*  AssemblyObjectPy::isJointConnectingPartToGround(PyObject *args){};
// has to be implemented in AssemblyObjectPyImp.cpp
PyObject * AssemblyObjectPy::staticCallback_isJointConnectingPartToGround (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'isJointConnectingPartToGround' of 'Assembly.AssemblyObject' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }


    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<AssemblyObjectPy*>(self)->isJointConnectingPartToGround(args);
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return nullptr;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// isPartGrounded() callback and implementer
// PyObject*  AssemblyObjectPy::isPartGrounded(PyObject *args){};
// has to be implemented in AssemblyObjectPyImp.cpp
PyObject * AssemblyObjectPy::staticCallback_isPartGrounded (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'isPartGrounded' of 'Assembly.AssemblyObject' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }


    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<AssemblyObjectPy*>(self)->isPartGrounded(args);
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return nullptr;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// exportAsASMT() callback and implementer
// PyObject*  AssemblyObjectPy::exportAsASMT(PyObject *args){};
// has to be implemented in AssemblyObjectPyImp.cpp
PyObject * AssemblyObjectPy::staticCallback_exportAsASMT (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'exportAsASMT' of 'Assembly.AssemblyObject' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }


    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<AssemblyObjectPy*>(self)->exportAsASMT(args);
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return nullptr;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// getDownstreamParts() callback and implementer
// PyObject*  AssemblyObjectPy::getDownstreamParts(PyObject *args){};
// has to be implemented in AssemblyObjectPyImp.cpp
PyObject * AssemblyObjectPy::staticCallback_getDownstreamParts (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'getDownstreamParts' of 'Assembly.AssemblyObject' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }


    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<AssemblyObjectPy*>(self)->getDownstreamParts(args);
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return nullptr;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// Joints() callback and implementer
// PyObject*  AssemblyObjectPy::Joints(PyObject *args){};
// has to be implemented in AssemblyObjectPyImp.cpp
PyObject * AssemblyObjectPy::staticCallback_getJoints (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<AssemblyObjectPy*>(self)->getJoints());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Joints' of object 'AssemblyObject'");
        return nullptr;
    }
}

int AssemblyObjectPy::staticCallback_setJoints (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'Joints' of object 'AssemblyObject' is read-only");
    return -1;
}




//--------------------------------------------------------------------------
// Constructor
//--------------------------------------------------------------------------
AssemblyObjectPy::AssemblyObjectPy(AssemblyObject *pcObject, PyTypeObject *T)
    : PartPy(static_cast<PartPy::PointerType>(pcObject), T)
{
}

PyObject *AssemblyObjectPy::PyMake(PyTypeObject* /*type*/, PyObject* /*args*/, PyObject* /*kwds*/)
{
    // never create such objects with the constructor
    PyErr_SetString(PyExc_RuntimeError, "You cannot create directly an instance of 'AssemblyObjectPy'.");

    return nullptr;
}

int AssemblyObjectPy::PyInit(PyObject* /*args*/, PyObject* /*kwd*/)
{
    return 0;
}

//--------------------------------------------------------------------------
// destructor
//--------------------------------------------------------------------------
AssemblyObjectPy::~AssemblyObjectPy()                                // Everything handled in parent
{
}

//--------------------------------------------------------------------------
// AssemblyObjectPy representation
//--------------------------------------------------------------------------
PyObject *AssemblyObjectPy::_repr()
{
    return Py_BuildValue("s", representation().c_str());
}

//--------------------------------------------------------------------------
// AssemblyObjectPy Attributes
//--------------------------------------------------------------------------
PyObject *AssemblyObjectPy::_getattr(const char *attr)			// __getattr__ function: note only need to handle new state
{
    try {
        // getter method for special Attributes (e.g. dynamic ones)
        PyObject *r = getCustomAttributes(attr);
        if(r) return r;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return nullptr;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError,"Unknown C++ exception");
        return nullptr;
    }
#endif

    PyMethodDef *ml = Methods;
    for (; ml->ml_name != nullptr; ml++) {
        if (attr[0] == ml->ml_name[0] &&
            strcmp(attr+1, ml->ml_name+1) == 0)
            return PyCFunction_New(ml, this);
    }

    PyErr_Clear();
    return PartPy::_getattr(attr);
}

int AssemblyObjectPy::_setattr(const char *attr, PyObject *value) // __setattr__ function: note only need to handle new state
{
    try {
        // setter for special Attributes (e.g. dynamic ones)
        int r = setCustomAttributes(attr, value);
        // r = 1: handled
        // r = -1: error
        // r = 0: ignore
        if (r == 1)
            return 0;
        else if (r == -1)
            return -1;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return -1;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return -1;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return -1;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return -1;
    }
#endif

    return PartPy::_setattr(attr, value);
}

AssemblyObject *AssemblyObjectPy::getAssemblyObjectPtr() const
{
    return static_cast<AssemblyObject *>(_pcTwinPointer);
}

#if defined(__clang__)
# pragma clang diagnostic pop
#endif

#if 0
/* From here on come the methods you have to implement, but NOT in this module. Implement in AssemblyObjectPyImp.cpp! This prototypes
 * are just for convenience when you add a new method.
 */



// returns a string which represents the object e.g. when printed in python
std::string AssemblyObjectPy::representation() const
{
    return {"<AssemblyObject object>"};
}

PyObject* AssemblyObjectPy::solve(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* AssemblyObjectPy::generateSimulation(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* AssemblyObjectPy::updateForFrame(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* AssemblyObjectPy::numberOfFrames(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* AssemblyObjectPy::undoSolve(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* AssemblyObjectPy::ensureIdentityPlacements(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* AssemblyObjectPy::clearUndo(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* AssemblyObjectPy::isPartConnected(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* AssemblyObjectPy::isJointConnectingPartToGround(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* AssemblyObjectPy::isPartGrounded(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* AssemblyObjectPy::exportAsASMT(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* AssemblyObjectPy::getDownstreamParts(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}



Py::List AssemblyObjectPy::getJoints() const
{
    //return Py::List();
    throw Py::AttributeError("Not yet implemented");
}

PyObject *AssemblyObjectPy::getCustomAttributes(const char* /*attr*/) const
{
    return nullptr;
}

int AssemblyObjectPy::setCustomAttributes(const char* /*attr*/, PyObject* /*obj*/)
{
    return 0;
}


#endif



