
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the .XML file
// Every change you make here gets lost in the next full rebuild!
// This File is normally built as an include in ViewProviderFemMeshPyImp.cpp! It's not intended to be in a project!

#include <Base/PyObjectBase.h>
#include <Base/Console.h>
#include <Base/Exception.h>
#include <CXX/Objects.hxx>

#if defined(__clang__)
# pragma clang diagnostic push
# pragma clang diagnostic ignored "-Wdeprecated-declarations"
#endif

using Base::streq;
using namespace FemGui;

#if defined(__GNUC__)
#pragma GCC diagnostic push
// Ignore -Wmissing-field-initializers (GCC only):
// - C++20 guarantees omitted fields are zero-initialized.
// - Python C API changes fields across versions.
// - Clang does not warn; GCC does unnecessarily.
// See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=96868
#pragma GCC diagnostic ignored "-Wmissing-field-initializers"
#endif // __GNUC__
/// Type structure of ViewProviderFemMeshPy
PyTypeObject ViewProviderFemMeshPy::Type = {
    .ob_base = PyVarObject_HEAD_INIT(&PyType_Type,0)
    .tp_name = "FemGui.ViewProviderFemMesh",
    .tp_basicsize = sizeof(ViewProviderFemMeshPy),
    .tp_itemsize = 0,
    /* methods */
    .tp_dealloc = PyDestructor,
    .tp_repr = __repr,
    .tp_getattro = __getattro,
    .tp_setattro = __setattro,
    /* --- Flags to define presence of optional/expanded features */
    .tp_flags = Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT,
    .tp_doc = "ViewProviderFemMesh class\n"
    "\n"
    "License: LGPL-2.1-or-later",
    .tp_methods = FemGui::ViewProviderFemMeshPy::Methods,
    .tp_getset = FemGui::ViewProviderFemMeshPy::GetterSetter,
    .tp_base = &Gui::ViewProviderGeometryObjectPy::Type,
    .tp_init = __PyInit,
    .tp_new = FemGui::ViewProviderFemMeshPy::PyMake
};
#if defined(__GNUC__)
#pragma GCC diagnostic pop
#endif // __GNUC__

/// Methods structure of ViewProviderFemMeshPy
PyMethodDef ViewProviderFemMeshPy::Methods[] = {
    {"applyDisplacement",
        reinterpret_cast<PyCFunction>( staticCallback_applyDisplacement ),
        METH_VARARGS,
        "None"
    },
    {"resetNodeColor",
        reinterpret_cast<PyCFunction>( staticCallback_resetNodeColor ),
        METH_VARARGS,
        "Reset color set by method setNodeColorByScalars."
    },
    {"resetNodeDisplacement",
        reinterpret_cast<PyCFunction>( staticCallback_resetNodeDisplacement ),
        METH_VARARGS,
        "Reset displacements set by method setNodeDisplacementByVectors."
    },
    {"resetHighlightedNodes",
        reinterpret_cast<PyCFunction>( staticCallback_resetHighlightedNodes ),
        METH_VARARGS,
        "Reset highlighted nodes."
    },
    {"setNodeColorByScalars",
        reinterpret_cast<PyCFunction>( staticCallback_setNodeColorByScalars ),
        METH_VARARGS,
        "Sets mesh node colors using element list and value list."
    },
    {"setNodeDisplacementByVectors",
        reinterpret_cast<PyCFunction>( staticCallback_setNodeDisplacementByVectors ),
        METH_VARARGS,
        "None"
    },
    {nullptr, nullptr, 0, nullptr}		/* Sentinel */
};



/// Attribute structure of ViewProviderFemMeshPy
PyGetSetDef ViewProviderFemMeshPy::GetterSetter[] = {
    {"NodeColor",
        (getter) staticCallback_getNodeColor,
        (setter) staticCallback_setNodeColor,
        "Postprocessing color of the nodes. The faces between the nodes get interpolated.",
        nullptr
    },
    {"ElementColor",
        (getter) staticCallback_getElementColor,
        (setter) staticCallback_setElementColor,
        "Postprocessing color of the elements. All faces of the element get the same color.",
        nullptr
    },
    {"NodeDisplacement",
        (getter) staticCallback_getNodeDisplacement,
        (setter) staticCallback_setNodeDisplacement,
        "Postprocessing color of the nodes. The faces between the nodes get interpolated.",
        nullptr
    },
    {"HighlightedNodes",
        (getter) staticCallback_getHighlightedNodes,
        (setter) staticCallback_setHighlightedNodes,
        "List of nodes which get highlighted.",
        nullptr
    },
    {"VisibleElementFaces",
        (getter) staticCallback_getVisibleElementFaces,
        (setter) staticCallback_setVisibleElementFaces,
        "List of elements and faces which are actually shown. These are all surface faces of the mesh.",
        nullptr
    },
    {nullptr, nullptr, nullptr, nullptr, nullptr}		/* Sentinel */
};

// applyDisplacement() callback and implementer
// PyObject*  ViewProviderFemMeshPy::applyDisplacement(PyObject *args){};
// has to be implemented in ViewProviderFemMeshPyImp.cpp
PyObject * ViewProviderFemMeshPy::staticCallback_applyDisplacement (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'applyDisplacement' of 'FemGui.ViewProviderFemMesh' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ViewProviderFemMeshPy*>(self)->applyDisplacement(args);
        if (ret != nullptr)
            static_cast<ViewProviderFemMeshPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return nullptr;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// resetNodeColor() callback and implementer
// PyObject*  ViewProviderFemMeshPy::resetNodeColor(PyObject *args){};
// has to be implemented in ViewProviderFemMeshPyImp.cpp
PyObject * ViewProviderFemMeshPy::staticCallback_resetNodeColor (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'resetNodeColor' of 'FemGui.ViewProviderFemMesh' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ViewProviderFemMeshPy*>(self)->resetNodeColor(args);
        if (ret != nullptr)
            static_cast<ViewProviderFemMeshPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return nullptr;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// resetNodeDisplacement() callback and implementer
// PyObject*  ViewProviderFemMeshPy::resetNodeDisplacement(PyObject *args){};
// has to be implemented in ViewProviderFemMeshPyImp.cpp
PyObject * ViewProviderFemMeshPy::staticCallback_resetNodeDisplacement (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'resetNodeDisplacement' of 'FemGui.ViewProviderFemMesh' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ViewProviderFemMeshPy*>(self)->resetNodeDisplacement(args);
        if (ret != nullptr)
            static_cast<ViewProviderFemMeshPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return nullptr;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// resetHighlightedNodes() callback and implementer
// PyObject*  ViewProviderFemMeshPy::resetHighlightedNodes(PyObject *args){};
// has to be implemented in ViewProviderFemMeshPyImp.cpp
PyObject * ViewProviderFemMeshPy::staticCallback_resetHighlightedNodes (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'resetHighlightedNodes' of 'FemGui.ViewProviderFemMesh' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ViewProviderFemMeshPy*>(self)->resetHighlightedNodes(args);
        if (ret != nullptr)
            static_cast<ViewProviderFemMeshPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return nullptr;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// setNodeColorByScalars() callback and implementer
// PyObject*  ViewProviderFemMeshPy::setNodeColorByScalars(PyObject *args){};
// has to be implemented in ViewProviderFemMeshPyImp.cpp
PyObject * ViewProviderFemMeshPy::staticCallback_setNodeColorByScalars (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'setNodeColorByScalars' of 'FemGui.ViewProviderFemMesh' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ViewProviderFemMeshPy*>(self)->setNodeColorByScalars(args);
        if (ret != nullptr)
            static_cast<ViewProviderFemMeshPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return nullptr;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// setNodeDisplacementByVectors() callback and implementer
// PyObject*  ViewProviderFemMeshPy::setNodeDisplacementByVectors(PyObject *args){};
// has to be implemented in ViewProviderFemMeshPyImp.cpp
PyObject * ViewProviderFemMeshPy::staticCallback_setNodeDisplacementByVectors (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'setNodeDisplacementByVectors' of 'FemGui.ViewProviderFemMesh' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return nullptr;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ViewProviderFemMeshPy*>(self)->setNodeDisplacementByVectors(args);
        if (ret != nullptr)
            static_cast<ViewProviderFemMeshPy*>(self)->startNotify();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return nullptr;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// NodeColor() callback and implementer
// PyObject*  ViewProviderFemMeshPy::NodeColor(PyObject *args){};
// has to be implemented in ViewProviderFemMeshPyImp.cpp
PyObject * ViewProviderFemMeshPy::staticCallback_getNodeColor (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ViewProviderFemMeshPy*>(self)->getNodeColor());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'NodeColor' of object 'ViewProviderFemMesh'");
        return nullptr;
    }
}

int ViewProviderFemMeshPy::staticCallback_setNodeColor (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<ViewProviderFemMeshPy*>(self)->setNodeColor(Py::Dict(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'NodeColor' of object 'ViewProviderFemMesh'");
        return -1;
    }
}

// ElementColor() callback and implementer
// PyObject*  ViewProviderFemMeshPy::ElementColor(PyObject *args){};
// has to be implemented in ViewProviderFemMeshPyImp.cpp
PyObject * ViewProviderFemMeshPy::staticCallback_getElementColor (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ViewProviderFemMeshPy*>(self)->getElementColor());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'ElementColor' of object 'ViewProviderFemMesh'");
        return nullptr;
    }
}

int ViewProviderFemMeshPy::staticCallback_setElementColor (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<ViewProviderFemMeshPy*>(self)->setElementColor(Py::Dict(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'ElementColor' of object 'ViewProviderFemMesh'");
        return -1;
    }
}

// NodeDisplacement() callback and implementer
// PyObject*  ViewProviderFemMeshPy::NodeDisplacement(PyObject *args){};
// has to be implemented in ViewProviderFemMeshPyImp.cpp
PyObject * ViewProviderFemMeshPy::staticCallback_getNodeDisplacement (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ViewProviderFemMeshPy*>(self)->getNodeDisplacement());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'NodeDisplacement' of object 'ViewProviderFemMesh'");
        return nullptr;
    }
}

int ViewProviderFemMeshPy::staticCallback_setNodeDisplacement (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<ViewProviderFemMeshPy*>(self)->setNodeDisplacement(Py::Dict(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'NodeDisplacement' of object 'ViewProviderFemMesh'");
        return -1;
    }
}

// HighlightedNodes() callback and implementer
// PyObject*  ViewProviderFemMeshPy::HighlightedNodes(PyObject *args){};
// has to be implemented in ViewProviderFemMeshPyImp.cpp
PyObject * ViewProviderFemMeshPy::staticCallback_getHighlightedNodes (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ViewProviderFemMeshPy*>(self)->getHighlightedNodes());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'HighlightedNodes' of object 'ViewProviderFemMesh'");
        return nullptr;
    }
}

int ViewProviderFemMeshPy::staticCallback_setHighlightedNodes (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<ViewProviderFemMeshPy*>(self)->setHighlightedNodes(Py::List(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'HighlightedNodes' of object 'ViewProviderFemMesh'");
        return -1;
    }
}

// VisibleElementFaces() callback and implementer
// PyObject*  ViewProviderFemMeshPy::VisibleElementFaces(PyObject *args){};
// has to be implemented in ViewProviderFemMeshPyImp.cpp
PyObject * ViewProviderFemMeshPy::staticCallback_getVisibleElementFaces (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<ViewProviderFemMeshPy*>(self)->getVisibleElementFaces());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'VisibleElementFaces' of object 'ViewProviderFemMesh'");
        return nullptr;
    }
}

int ViewProviderFemMeshPy::staticCallback_setVisibleElementFaces (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'VisibleElementFaces' of object 'ViewProviderFemMesh' is read-only");
    return -1;
}




//--------------------------------------------------------------------------
// Constructor
//--------------------------------------------------------------------------
ViewProviderFemMeshPy::ViewProviderFemMeshPy(ViewProviderFemMesh *pcObject, PyTypeObject *T)
    : ViewProviderGeometryObjectPy(static_cast<ViewProviderGeometryObjectPy::PointerType>(pcObject), T)
{
}

PyObject *ViewProviderFemMeshPy::PyMake(PyTypeObject* /*type*/, PyObject* /*args*/, PyObject* /*kwds*/)
{
    // never create such objects with the constructor
    PyErr_SetString(PyExc_RuntimeError, "You cannot create directly an instance of 'ViewProviderFemMeshPy'.");

    return nullptr;
}

int ViewProviderFemMeshPy::PyInit(PyObject* /*args*/, PyObject* /*kwd*/)
{
    return 0;
}

//--------------------------------------------------------------------------
// destructor
//--------------------------------------------------------------------------
ViewProviderFemMeshPy::~ViewProviderFemMeshPy()                                // Everything handled in parent
{
}

//--------------------------------------------------------------------------
// ViewProviderFemMeshPy representation
//--------------------------------------------------------------------------
PyObject *ViewProviderFemMeshPy::_repr()
{
    return Py_BuildValue("s", representation().c_str());
}

//--------------------------------------------------------------------------
// ViewProviderFemMeshPy Attributes
//--------------------------------------------------------------------------
PyObject *ViewProviderFemMeshPy::_getattr(const char *attr)			// __getattr__ function: note only need to handle new state
{
    try {
        // getter method for special Attributes (e.g. dynamic ones)
        PyObject *r = getCustomAttributes(attr);
        if(r) return r;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return nullptr;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError,"Unknown C++ exception");
        return nullptr;
    }
#endif

    PyMethodDef *ml = Methods;
    for (; ml->ml_name != nullptr; ml++) {
        if (attr[0] == ml->ml_name[0] &&
            strcmp(attr+1, ml->ml_name+1) == 0)
            return PyCFunction_New(ml, this);
    }

    PyErr_Clear();
    return ViewProviderGeometryObjectPy::_getattr(attr);
}

int ViewProviderFemMeshPy::_setattr(const char *attr, PyObject *value) // __setattr__ function: note only need to handle new state
{
    try {
        // setter for special Attributes (e.g. dynamic ones)
        int r = setCustomAttributes(attr, value);
        // r = 1: handled
        // r = -1: error
        // r = 0: ignore
        if (r == 1)
            return 0;
        else if (r == -1)
            return -1;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return -1;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return -1;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return -1;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return -1;
    }
#endif

    return ViewProviderGeometryObjectPy::_setattr(attr, value);
}

ViewProviderFemMesh *ViewProviderFemMeshPy::getViewProviderFemMeshPtr() const
{
    return static_cast<ViewProviderFemMesh *>(_pcTwinPointer);
}

#if defined(__clang__)
# pragma clang diagnostic pop
#endif

#if 0
/* From here on come the methods you have to implement, but NOT in this module. Implement in ViewProviderFemMeshPyImp.cpp! This prototypes
 * are just for convenience when you add a new method.
 */



// returns a string which represents the object e.g. when printed in python
std::string ViewProviderFemMeshPy::representation() const
{
    return {"<ViewProviderFemMesh object>"};
}

PyObject* ViewProviderFemMeshPy::applyDisplacement(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ViewProviderFemMeshPy::resetNodeColor(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ViewProviderFemMeshPy::resetNodeDisplacement(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ViewProviderFemMeshPy::resetHighlightedNodes(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ViewProviderFemMeshPy::setNodeColorByScalars(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* ViewProviderFemMeshPy::setNodeDisplacementByVectors(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}



Py::Dict ViewProviderFemMeshPy::getNodeColor() const
{
    //return Py::Dict();
    throw Py::AttributeError("Not yet implemented");
}

void  ViewProviderFemMeshPy::setNodeColor(Py::Dict arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Dict ViewProviderFemMeshPy::getElementColor() const
{
    //return Py::Dict();
    throw Py::AttributeError("Not yet implemented");
}

void  ViewProviderFemMeshPy::setElementColor(Py::Dict arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Dict ViewProviderFemMeshPy::getNodeDisplacement() const
{
    //return Py::Dict();
    throw Py::AttributeError("Not yet implemented");
}

void  ViewProviderFemMeshPy::setNodeDisplacement(Py::Dict arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::List ViewProviderFemMeshPy::getHighlightedNodes() const
{
    //return Py::List();
    throw Py::AttributeError("Not yet implemented");
}

void  ViewProviderFemMeshPy::setHighlightedNodes(Py::List arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::List ViewProviderFemMeshPy::getVisibleElementFaces() const
{
    //return Py::List();
    throw Py::AttributeError("Not yet implemented");
}

PyObject *ViewProviderFemMeshPy::getCustomAttributes(const char* /*attr*/) const
{
    return nullptr;
}

int ViewProviderFemMeshPy::setCustomAttributes(const char* /*attr*/, PyObject* /*obj*/)
{
    return 0;
}


#endif



