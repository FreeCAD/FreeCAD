
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the .XML file
// Every change you make here gets lost in the next full rebuild!
// This File is normally built as an include in CosmeticEdgePyImp.cpp! It's not intended to be in a project!

#include <Base/PyObjectBase.h>
#include <Base/Console.h>
#include <Base/Exception.h>
#include <CXX/Objects.hxx>

#if defined(__clang__)
# pragma clang diagnostic push
# pragma clang diagnostic ignored "-Wdeprecated-declarations"
#endif

using Base::streq;
using namespace TechDraw;

#if defined(__GNUC__)
#pragma GCC diagnostic push
// Ignore -Wmissing-field-initializers (GCC only):
// - C++20 guarantees omitted fields are zero-initialized.
// - Python C API changes fields across versions.
// - Clang does not warn; GCC does unnecessarily.
// See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=96868
#pragma GCC diagnostic ignored "-Wmissing-field-initializers"
#endif // __GNUC__
/// Type structure of CosmeticEdgePy
PyTypeObject CosmeticEdgePy::Type = {
    .ob_base = PyVarObject_HEAD_INIT(&PyType_Type,0)
    .tp_name = "TechDraw.CosmeticEdge",
    .tp_basicsize = sizeof(CosmeticEdgePy),
    .tp_itemsize = 0,
    /* methods */
    .tp_dealloc = PyDestructor,
    .tp_repr = __repr,
    .tp_getattro = __getattro,
    .tp_setattro = __setattro,
    /* --- Flags to define presence of optional/expanded features */
    .tp_flags = Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT,
    .tp_doc = "CosmeticEdge specifies an extra (cosmetic) edge in Views\n"
    "\n"
    "License: LGPL-2.1-or-later",
    .tp_methods = TechDraw::CosmeticEdgePy::Methods,
    .tp_getset = TechDraw::CosmeticEdgePy::GetterSetter,
    .tp_base = &Base::PyObjectBase::Type,
    .tp_init = __PyInit,
    .tp_new = TechDraw::CosmeticEdgePy::PyMake
};
#if defined(__GNUC__)
#pragma GCC diagnostic pop
#endif // __GNUC__

/// Methods structure of CosmeticEdgePy
PyMethodDef CosmeticEdgePy::Methods[] = {
    {nullptr, nullptr, 0, nullptr}		/* Sentinel */
};



/// Attribute structure of CosmeticEdgePy
PyGetSetDef CosmeticEdgePy::GetterSetter[] = {
    {"Tag",
        (getter) staticCallback_getTag,
        (setter) staticCallback_setTag,
        "Gives the tag of the CosmeticEdge as string.",
        nullptr
    },
    {"Start",
        (getter) staticCallback_getStart,
        (setter) staticCallback_setStart,
        "Gives the position of one end of this CosmeticEdge as vector.",
        nullptr
    },
    {"End",
        (getter) staticCallback_getEnd,
        (setter) staticCallback_setEnd,
        "Gives the position of one end of this CosmeticEdge as vector.",
        nullptr
    },
    {"Center",
        (getter) staticCallback_getCenter,
        (setter) staticCallback_setCenter,
        "Gives the position of center point of this CosmeticEdge as vector.",
        nullptr
    },
    {"Radius",
        (getter) staticCallback_getRadius,
        (setter) staticCallback_setRadius,
        "Gives the radius of CosmeticEdge in mm.",
        nullptr
    },
    {"Format",
        (getter) staticCallback_getFormat,
        (setter) staticCallback_setFormat,
        "The appearance attributes (style, weight, color, visible) for this CosmeticEdge.",
        nullptr
    },
    {nullptr, nullptr, nullptr, nullptr, nullptr}		/* Sentinel */
};

// Tag() callback and implementer
// PyObject*  CosmeticEdgePy::Tag(PyObject *args){};
// has to be implemented in CosmeticEdgePyImp.cpp
PyObject * CosmeticEdgePy::staticCallback_getTag (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<CosmeticEdgePy*>(self)->getTag());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Tag' of object 'CosmeticEdge'");
        return nullptr;
    }
}

int CosmeticEdgePy::staticCallback_setTag (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'Tag' of object 'CosmeticEdge' is read-only");
    return -1;
}

// Start() callback and implementer
// PyObject*  CosmeticEdgePy::Start(PyObject *args){};
// has to be implemented in CosmeticEdgePyImp.cpp
PyObject * CosmeticEdgePy::staticCallback_getStart (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<CosmeticEdgePy*>(self)->getStart());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Start' of object 'CosmeticEdge'");
        return nullptr;
    }
}

int CosmeticEdgePy::staticCallback_setStart (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<CosmeticEdgePy*>(self)->setStart(Py::Vector(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'Start' of object 'CosmeticEdge'");
        return -1;
    }
}

// End() callback and implementer
// PyObject*  CosmeticEdgePy::End(PyObject *args){};
// has to be implemented in CosmeticEdgePyImp.cpp
PyObject * CosmeticEdgePy::staticCallback_getEnd (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<CosmeticEdgePy*>(self)->getEnd());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'End' of object 'CosmeticEdge'");
        return nullptr;
    }
}

int CosmeticEdgePy::staticCallback_setEnd (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<CosmeticEdgePy*>(self)->setEnd(Py::Vector(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'End' of object 'CosmeticEdge'");
        return -1;
    }
}

// Center() callback and implementer
// PyObject*  CosmeticEdgePy::Center(PyObject *args){};
// has to be implemented in CosmeticEdgePyImp.cpp
PyObject * CosmeticEdgePy::staticCallback_getCenter (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<CosmeticEdgePy*>(self)->getCenter());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Center' of object 'CosmeticEdge'");
        return nullptr;
    }
}

int CosmeticEdgePy::staticCallback_setCenter (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<CosmeticEdgePy*>(self)->setCenter(Py::Vector(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'Center' of object 'CosmeticEdge'");
        return -1;
    }
}

// Radius() callback and implementer
// PyObject*  CosmeticEdgePy::Radius(PyObject *args){};
// has to be implemented in CosmeticEdgePyImp.cpp
PyObject * CosmeticEdgePy::staticCallback_getRadius (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<CosmeticEdgePy*>(self)->getRadius());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Radius' of object 'CosmeticEdge'");
        return nullptr;
    }
}

int CosmeticEdgePy::staticCallback_setRadius (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<CosmeticEdgePy*>(self)->setRadius(Py::Float(PyNumber_Float(value),true));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'Radius' of object 'CosmeticEdge'");
        return -1;
    }
}

// Format() callback and implementer
// PyObject*  CosmeticEdgePy::Format(PyObject *args){};
// has to be implemented in CosmeticEdgePyImp.cpp
PyObject * CosmeticEdgePy::staticCallback_getFormat (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<CosmeticEdgePy*>(self)->getFormat());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Format' of object 'CosmeticEdge'");
        return nullptr;
    }
}

int CosmeticEdgePy::staticCallback_setFormat (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<CosmeticEdgePy*>(self)->setFormat(Py::Dict(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'Format' of object 'CosmeticEdge'");
        return -1;
    }
}




//--------------------------------------------------------------------------
// Constructor
//--------------------------------------------------------------------------
CosmeticEdgePy::CosmeticEdgePy(CosmeticEdge *pcObject, PyTypeObject *T)
    : PyObjectBase(static_cast<PyObjectBase::PointerType>(pcObject), T)
{
}


//--------------------------------------------------------------------------
// destructor
//--------------------------------------------------------------------------
CosmeticEdgePy::~CosmeticEdgePy()                                // Everything handled in parent
{
    // delete the handled object when the PyObject dies
    CosmeticEdgePy::PointerType ptr = static_cast<CosmeticEdgePy::PointerType>(_pcTwinPointer);
    delete ptr;
}

//--------------------------------------------------------------------------
// CosmeticEdgePy representation
//--------------------------------------------------------------------------
PyObject *CosmeticEdgePy::_repr()
{
    return Py_BuildValue("s", representation().c_str());
}

//--------------------------------------------------------------------------
// CosmeticEdgePy Attributes
//--------------------------------------------------------------------------
PyObject *CosmeticEdgePy::_getattr(const char *attr)			// __getattr__ function: note only need to handle new state
{
    try {
        // getter method for special Attributes (e.g. dynamic ones)
        PyObject *r = getCustomAttributes(attr);
        if(r) return r;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return nullptr;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError,"Unknown C++ exception");
        return nullptr;
    }
#endif

    PyMethodDef *ml = Methods;
    for (; ml->ml_name != nullptr; ml++) {
        if (attr[0] == ml->ml_name[0] &&
            strcmp(attr+1, ml->ml_name+1) == 0)
            return PyCFunction_New(ml, this);
    }

    PyErr_Clear();
    return PyObjectBase::_getattr(attr);
}

int CosmeticEdgePy::_setattr(const char *attr, PyObject *value) // __setattr__ function: note only need to handle new state
{
    try {
        // setter for special Attributes (e.g. dynamic ones)
        int r = setCustomAttributes(attr, value);
        // r = 1: handled
        // r = -1: error
        // r = 0: ignore
        if (r == 1)
            return 0;
        else if (r == -1)
            return -1;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return -1;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return -1;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return -1;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return -1;
    }
#endif

    return PyObjectBase::_setattr(attr, value);
}

CosmeticEdge *CosmeticEdgePy::getCosmeticEdgePtr() const
{
    return static_cast<CosmeticEdge *>(_pcTwinPointer);
}

#if defined(__clang__)
# pragma clang diagnostic pop
#endif

#if 0
/* From here on come the methods you have to implement, but NOT in this module. Implement in CosmeticEdgePyImp.cpp! This prototypes
 * are just for convenience when you add a new method.
 */

PyObject *CosmeticEdgePy::PyMake(PyTypeObject* /*type*/, PyObject* /*args*/, PyObject* /*kwds*/)
{
    // create a new instance of CosmeticEdgePy and the Twin object
    return new CosmeticEdgePy(new CosmeticEdge);
}

// constructor method
int CosmeticEdgePy::PyInit(PyObject* /*args*/, PyObject* /*kwd*/)
{
    return 0;
}


// returns a string which represents the object e.g. when printed in python
std::string CosmeticEdgePy::representation() const
{
    return {"<CosmeticEdge object>"};
}



Py::String CosmeticEdgePy::getTag() const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

Py::Vector CosmeticEdgePy::getStart() const
{
    //return Py::Vector();
    throw Py::AttributeError("Not yet implemented");
}

void  CosmeticEdgePy::setStart(Py::Vector arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Vector CosmeticEdgePy::getEnd() const
{
    //return Py::Vector();
    throw Py::AttributeError("Not yet implemented");
}

void  CosmeticEdgePy::setEnd(Py::Vector arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Vector CosmeticEdgePy::getCenter() const
{
    //return Py::Vector();
    throw Py::AttributeError("Not yet implemented");
}

void  CosmeticEdgePy::setCenter(Py::Vector arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Float CosmeticEdgePy::getRadius() const
{
    //return Py::Float();
    throw Py::AttributeError("Not yet implemented");
}

void  CosmeticEdgePy::setRadius(Py::Float arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Dict CosmeticEdgePy::getFormat() const
{
    //return Py::Dict();
    throw Py::AttributeError("Not yet implemented");
}

void  CosmeticEdgePy::setFormat(Py::Dict arg)
{
    throw Py::AttributeError("Not yet implemented");
}

PyObject *CosmeticEdgePy::getCustomAttributes(const char* /*attr*/) const
{
    return nullptr;
}

int CosmeticEdgePy::setCustomAttributes(const char* /*attr*/, PyObject* /*obj*/)
{
    return 0;
}


#endif



