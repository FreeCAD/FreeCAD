
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the .XML file
// Every change you make here gets lost in the next full rebuild!
// This File is normally built as an include in VoronoiVertexPyImp.cpp! It's not intended to be in a project!

#include <Base/PyObjectBase.h>
#include <Base/Console.h>
#include <Base/Exception.h>
#include <CXX/Objects.hxx>

#if defined(__clang__)
# pragma clang diagnostic push
# pragma clang diagnostic ignored "-Wdeprecated-declarations"
#endif

using Base::streq;
using namespace Path;

#if defined(__GNUC__)
#pragma GCC diagnostic push
// Ignore -Wmissing-field-initializers (GCC only):
// - C++20 guarantees omitted fields are zero-initialized.
// - Python C API changes fields across versions.
// - Clang does not warn; GCC does unnecessarily.
// See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=96868
#pragma GCC diagnostic ignored "-Wmissing-field-initializers"
#endif // __GNUC__
/// Type structure of VoronoiVertexPy
PyTypeObject VoronoiVertexPy::Type = {
    .ob_base = PyVarObject_HEAD_INIT(&PyType_Type,0)
    .tp_name = "Path.VoronoiVertex",
    .tp_basicsize = sizeof(VoronoiVertexPy),
    .tp_itemsize = 0,
    /* methods */
    .tp_dealloc = PyDestructor,
    .tp_repr = __repr,
    .tp_getattro = __getattro,
    .tp_setattro = __setattro,
    /* --- Flags to define presence of optional/expanded features */
    .tp_flags = Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT,
    .tp_doc = "Vertex of a Voronoi diagram\n"
    "\n"
    "License: LGPL-2.1-or-later",
    .tp_richcompare = Path::VoronoiVertexPy::richCompare,
    .tp_methods = Path::VoronoiVertexPy::Methods,
    .tp_getset = Path::VoronoiVertexPy::GetterSetter,
    .tp_base = &Base::BaseClassPy::Type,
    .tp_init = __PyInit,
    .tp_new = Path::VoronoiVertexPy::PyMake
};
#if defined(__GNUC__)
#pragma GCC diagnostic pop
#endif // __GNUC__

/// Methods structure of VoronoiVertexPy
PyMethodDef VoronoiVertexPy::Methods[] = {
    {"toPoint",
        reinterpret_cast<PyCFunction>( staticCallback_toPoint ),
        METH_VARARGS,
        "Returns a Vector - or None if not possible"
    },
    {nullptr, nullptr, 0, nullptr}		/* Sentinel */
};



/// Attribute structure of VoronoiVertexPy
PyGetSetDef VoronoiVertexPy::GetterSetter[] = {
    {"Index",
        (getter) staticCallback_getIndex,
        (setter) staticCallback_setIndex,
        "Internal id of the element.",
        nullptr
    },
    {"Color",
        (getter) staticCallback_getColor,
        (setter) staticCallback_setColor,
        "Assigned color of the receiver.",
        nullptr
    },
    {"X",
        (getter) staticCallback_getX,
        (setter) staticCallback_setX,
        "X position",
        nullptr
    },
    {"Y",
        (getter) staticCallback_getY,
        (setter) staticCallback_setY,
        "Y position",
        nullptr
    },
    {"IncidentEdge",
        (getter) staticCallback_getIncidentEdge,
        (setter) staticCallback_setIncidentEdge,
        "Y position",
        nullptr
    },
    {nullptr, nullptr, nullptr, nullptr, nullptr}		/* Sentinel */
};

// toPoint() callback and implementer
// PyObject*  VoronoiVertexPy::toPoint(PyObject *args){};
// has to be implemented in VoronoiVertexPyImp.cpp
PyObject * VoronoiVertexPy::staticCallback_toPoint (PyObject *self, PyObject *args)
{
    // make sure that not a null pointer is passed
    if (!self) {
        PyErr_SetString(PyExc_TypeError, "descriptor 'toPoint' of 'Path.VoronoiVertex' object needs an argument");
        return nullptr;
    }

    // test if twin object isn't already deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }


    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<VoronoiVertexPy*>(self)->toPoint(args);
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return nullptr;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// Index() callback and implementer
// PyObject*  VoronoiVertexPy::Index(PyObject *args){};
// has to be implemented in VoronoiVertexPyImp.cpp
PyObject * VoronoiVertexPy::staticCallback_getIndex (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<VoronoiVertexPy*>(self)->getIndex());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Index' of object 'VoronoiVertex'");
        return nullptr;
    }
}

int VoronoiVertexPy::staticCallback_setIndex (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'Index' of object 'VoronoiVertex' is read-only");
    return -1;
}

// Color() callback and implementer
// PyObject*  VoronoiVertexPy::Color(PyObject *args){};
// has to be implemented in VoronoiVertexPyImp.cpp
PyObject * VoronoiVertexPy::staticCallback_getColor (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<VoronoiVertexPy*>(self)->getColor());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Color' of object 'VoronoiVertex'");
        return nullptr;
    }
}

int VoronoiVertexPy::staticCallback_setColor (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<VoronoiVertexPy*>(self)->setColor(Py::Long(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while writing attribute 'Color' of object 'VoronoiVertex'");
        return -1;
    }
}

// X() callback and implementer
// PyObject*  VoronoiVertexPy::X(PyObject *args){};
// has to be implemented in VoronoiVertexPyImp.cpp
PyObject * VoronoiVertexPy::staticCallback_getX (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<VoronoiVertexPy*>(self)->getX());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'X' of object 'VoronoiVertex'");
        return nullptr;
    }
}

int VoronoiVertexPy::staticCallback_setX (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'X' of object 'VoronoiVertex' is read-only");
    return -1;
}

// Y() callback and implementer
// PyObject*  VoronoiVertexPy::Y(PyObject *args){};
// has to be implemented in VoronoiVertexPyImp.cpp
PyObject * VoronoiVertexPy::staticCallback_getY (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<VoronoiVertexPy*>(self)->getY());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'Y' of object 'VoronoiVertex'");
        return nullptr;
    }
}

int VoronoiVertexPy::staticCallback_setY (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'Y' of object 'VoronoiVertex' is read-only");
    return -1;
}

// IncidentEdge() callback and implementer
// PyObject*  VoronoiVertexPy::IncidentEdge(PyObject *args){};
// has to be implemented in VoronoiVertexPyImp.cpp
PyObject * VoronoiVertexPy::staticCallback_getIncidentEdge (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return nullptr;
    }

    try {
        return Py::new_reference_to(static_cast<VoronoiVertexPy*>(self)->getIncidentEdge());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return nullptr;
    } catch (...) {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown exception while reading attribute 'IncidentEdge' of object 'VoronoiVertex'");
        return nullptr;
    }
}

int VoronoiVertexPy::staticCallback_setIncidentEdge (PyObject *self, PyObject * /*value*/, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }

    PyErr_SetString(PyExc_AttributeError, "Attribute 'IncidentEdge' of object 'VoronoiVertex' is read-only");
    return -1;
}




//--------------------------------------------------------------------------
// Constructor
//--------------------------------------------------------------------------
VoronoiVertexPy::VoronoiVertexPy(VoronoiVertex *pcObject, PyTypeObject *T)
    : BaseClassPy(static_cast<BaseClassPy::PointerType>(pcObject), T)
{
}


//--------------------------------------------------------------------------
// destructor
//--------------------------------------------------------------------------
VoronoiVertexPy::~VoronoiVertexPy()                                // Everything handled in parent
{
    // delete the handled object when the PyObject dies
    VoronoiVertexPy::PointerType ptr = static_cast<VoronoiVertexPy::PointerType>(_pcTwinPointer);
    delete ptr;
}

//--------------------------------------------------------------------------
// VoronoiVertexPy representation
//--------------------------------------------------------------------------
PyObject *VoronoiVertexPy::_repr()
{
    return Py_BuildValue("s", representation().c_str());
}

//--------------------------------------------------------------------------
// VoronoiVertexPy Attributes
//--------------------------------------------------------------------------
PyObject *VoronoiVertexPy::_getattr(const char *attr)			// __getattr__ function: note only need to handle new state
{
    try {
        // getter method for special Attributes (e.g. dynamic ones)
        PyObject *r = getCustomAttributes(attr);
        if(r) return r;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return nullptr;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError,"Unknown C++ exception");
        return nullptr;
    }
#endif

    PyMethodDef *ml = Methods;
    for (; ml->ml_name != nullptr; ml++) {
        if (attr[0] == ml->ml_name[0] &&
            strcmp(attr+1, ml->ml_name+1) == 0)
            return PyCFunction_New(ml, this);
    }

    PyErr_Clear();
    return BaseClassPy::_getattr(attr);
}

int VoronoiVertexPy::_setattr(const char *attr, PyObject *value) // __setattr__ function: note only need to handle new state
{
    try {
        // setter for special Attributes (e.g. dynamic ones)
        int r = setCustomAttributes(attr, value);
        // r = 1: handled
        // r = -1: error
        // r = 0: ignore
        if (r == 1)
            return 0;
        else if (r == -1)
            return -1;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return -1;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return -1;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return -1;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return -1;
    }
#endif

    return BaseClassPy::_setattr(attr, value);
}

VoronoiVertex *VoronoiVertexPy::getVoronoiVertexPtr() const
{
    return static_cast<VoronoiVertex *>(_pcTwinPointer);
}

#if defined(__clang__)
# pragma clang diagnostic pop
#endif

#if 0
/* From here on come the methods you have to implement, but NOT in this module. Implement in VoronoiVertexPyImp.cpp! This prototypes
 * are just for convenience when you add a new method.
 */

PyObject *VoronoiVertexPy::PyMake(PyTypeObject* /*type*/, PyObject* /*args*/, PyObject* /*kwds*/)
{
    // create a new instance of VoronoiVertexPy and the Twin object
    return new VoronoiVertexPy(new VoronoiVertex);
}

// constructor method
int VoronoiVertexPy::PyInit(PyObject* /*args*/, PyObject* /*kwd*/)
{
    return 0;
}


// returns a string which represents the object e.g. when printed in python
std::string VoronoiVertexPy::representation() const
{
    return {"<VoronoiVertex object>"};
}

PyObject* VoronoiVertexPy::toPoint(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}


PyObject* VoronoiVertexPy::richCompare(PyObject *v, PyObject *w, int op)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

Py::Long VoronoiVertexPy::getIndex() const
{
    //return Py::Long();
    throw Py::AttributeError("Not yet implemented");
}

Py::Long VoronoiVertexPy::getColor() const
{
    //return Py::Long();
    throw Py::AttributeError("Not yet implemented");
}

void  VoronoiVertexPy::setColor(Py::Long arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Float VoronoiVertexPy::getX() const
{
    //return Py::Float();
    throw Py::AttributeError("Not yet implemented");
}

Py::Float VoronoiVertexPy::getY() const
{
    //return Py::Float();
    throw Py::AttributeError("Not yet implemented");
}

Py::Object VoronoiVertexPy::getIncidentEdge() const
{
    //return Py::Object();
    throw Py::AttributeError("Not yet implemented");
}

PyObject *VoronoiVertexPy::getCustomAttributes(const char* /*attr*/) const
{
    return nullptr;
}

int VoronoiVertexPy::setCustomAttributes(const char* /*attr*/, PyObject* /*obj*/)
{
    return 0;
}


#endif



