
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the XML file
// Every change you make here gets lost in the next full rebuild!
#ifndef APP_APPLICATIONDIRECTORIESPY_H
#define APP_APPLICATIONDIRECTORIESPY_H

#include <CXX/Objects.hxx>
#include <Base/PyObjectBase.h>
#include <App/ApplicationDirectories.h>
#include <string>


namespace App
{

//===========================================================================
// ApplicationDirectoriesPy - Python wrapper
//===========================================================================

/** The python export class for ApplicationDirectories
 */
class AppExport ApplicationDirectoriesPy : public Base::PyObjectBase
{
protected:
    ~ApplicationDirectoriesPy() override;

public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyGetSetDef    GetterSetter[];
    PyTypeObject *GetType() const override {return &Type;}

public:
    ApplicationDirectoriesPy(ApplicationDirectories *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(PyTypeObject *, PyObject *, PyObject *);
    int PyInit(PyObject* args, PyObject*k) override;


    using PointerType = ApplicationDirectories*;

    PyObject *_repr() override;        // the representation
    std::string representation() const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    /// callback for the usingCurrentVersionConfig() method
    static PyObject * staticCallback_usingCurrentVersionConfig (PyObject *self, PyObject *args);
    /// implementer for the usingCurrentVersionConfig() method
    static PyObject*  usingCurrentVersionConfig(PyObject *args);
    /// callback for the migrateAllPaths() method
    static PyObject * staticCallback_migrateAllPaths (PyObject *self, PyObject *args);
    /// implementer for the migrateAllPaths() method
    static PyObject*  migrateAllPaths(PyObject *args);
    /// callback for the versionStringForPath() method
    static PyObject * staticCallback_versionStringForPath (PyObject *self, PyObject *args);
    /// implementer for the versionStringForPath() method
    static PyObject*  versionStringForPath(PyObject *args);
    /// callback for the isVersionedPath() method
    static PyObject * staticCallback_isVersionedPath (PyObject *self, PyObject *args);
    /// implementer for the isVersionedPath() method
    static PyObject*  isVersionedPath(PyObject *args);
    /// callback for the mostRecentAvailableConfigVersion() method
    static PyObject * staticCallback_mostRecentAvailableConfigVersion (PyObject *self, PyObject *args);
    /// implementer for the mostRecentAvailableConfigVersion() method
    static PyObject*  mostRecentAvailableConfigVersion(PyObject *args);
    /// callback for the mostRecentConfigFromBase() method
    static PyObject * staticCallback_mostRecentConfigFromBase (PyObject *self, PyObject *args);
    /// implementer for the mostRecentConfigFromBase() method
    static PyObject*  mostRecentConfigFromBase(PyObject *args);
    /// callback for the migrateConfig() method
    static PyObject * staticCallback_migrateConfig (PyObject *self, PyObject *args);
    /// implementer for the migrateConfig() method
    static PyObject*  migrateConfig(PyObject *args);
    //@}


    /** @name callbacks and implementers for the python object attributes */
    //@{
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(const char *attr) override;              // __getattr__ function
    int _setattr(const char *attr, PyObject *value) override;   // __setattr__ function

    /// getter for the object handled by this class
    ApplicationDirectories *getApplicationDirectoriesPtr() const;

};

}  //namespace App

#endif  // APP_APPLICATIONDIRECTORIESPY_H


