
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the XML file
// Every change you make here gets lost in the next full rebuild!
#ifndef APP_METADATAPY_H
#define APP_METADATAPY_H

#include <CXX/Objects.hxx>
#include <Base/PyObjectBase.h>
#include <App/Metadata.h>
#include <string>


namespace App
{

//===========================================================================
// MetadataPy - Python wrapper
//===========================================================================

/** The python export class for Metadata
 */
class AppExport MetadataPy : public Base::PyObjectBase
{
protected:
    ~MetadataPy() override;

public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyGetSetDef    GetterSetter[];
    PyTypeObject *GetType() const override {return &Type;}

public:
    MetadataPy(Metadata *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(PyTypeObject *, PyObject *, PyObject *);
    int PyInit(PyObject* args, PyObject*k) override;


    using PointerType = Metadata*;

    PyObject *_repr() override;        // the representation
    std::string representation() const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    /// callback for the getLastSupportedFreeCADVersion() method
    static PyObject * staticCallback_getLastSupportedFreeCADVersion (PyObject *self, PyObject *args);
    /// implementer for the getLastSupportedFreeCADVersion() method
    PyObject*  getLastSupportedFreeCADVersion(PyObject *args);
    /// callback for the getFirstSupportedFreeCADVersion() method
    static PyObject * staticCallback_getFirstSupportedFreeCADVersion (PyObject *self, PyObject *args);
    /// implementer for the getFirstSupportedFreeCADVersion() method
    PyObject*  getFirstSupportedFreeCADVersion(PyObject *args);
    /// callback for the supportsCurrentFreeCAD() method
    static PyObject * staticCallback_supportsCurrentFreeCAD (PyObject *self, PyObject *args);
    /// implementer for the supportsCurrentFreeCAD() method
    PyObject*  supportsCurrentFreeCAD(PyObject *args);
    /// callback for the getGenericMetadata() method
    static PyObject * staticCallback_getGenericMetadata (PyObject *self, PyObject *args);
    /// implementer for the getGenericMetadata() method
    PyObject*  getGenericMetadata(PyObject *args);
    /// callback for the addContentItem() method
    static PyObject * staticCallback_addContentItem (PyObject *self, PyObject *args);
    /// implementer for the addContentItem() method
    PyObject*  addContentItem(PyObject *args);
    /// callback for the removeContentItem() method
    static PyObject * staticCallback_removeContentItem (PyObject *self, PyObject *args);
    /// implementer for the removeContentItem() method
    PyObject*  removeContentItem(PyObject *args);
    /// callback for the addMaintainer() method
    static PyObject * staticCallback_addMaintainer (PyObject *self, PyObject *args);
    /// implementer for the addMaintainer() method
    PyObject*  addMaintainer(PyObject *args);
    /// callback for the removeMaintainer() method
    static PyObject * staticCallback_removeMaintainer (PyObject *self, PyObject *args);
    /// implementer for the removeMaintainer() method
    PyObject*  removeMaintainer(PyObject *args);
    /// callback for the addLicense() method
    static PyObject * staticCallback_addLicense (PyObject *self, PyObject *args);
    /// implementer for the addLicense() method
    PyObject*  addLicense(PyObject *args);
    /// callback for the removeLicense() method
    static PyObject * staticCallback_removeLicense (PyObject *self, PyObject *args);
    /// implementer for the removeLicense() method
    PyObject*  removeLicense(PyObject *args);
    /// callback for the addUrl() method
    static PyObject * staticCallback_addUrl (PyObject *self, PyObject *args);
    /// implementer for the addUrl() method
    PyObject*  addUrl(PyObject *args);
    /// callback for the removeUrl() method
    static PyObject * staticCallback_removeUrl (PyObject *self, PyObject *args);
    /// implementer for the removeUrl() method
    PyObject*  removeUrl(PyObject *args);
    /// callback for the addAuthor() method
    static PyObject * staticCallback_addAuthor (PyObject *self, PyObject *args);
    /// implementer for the addAuthor() method
    PyObject*  addAuthor(PyObject *args);
    /// callback for the removeAuthor() method
    static PyObject * staticCallback_removeAuthor (PyObject *self, PyObject *args);
    /// implementer for the removeAuthor() method
    PyObject*  removeAuthor(PyObject *args);
    /// callback for the addDepend() method
    static PyObject * staticCallback_addDepend (PyObject *self, PyObject *args);
    /// implementer for the addDepend() method
    PyObject*  addDepend(PyObject *args);
    /// callback for the removeDepend() method
    static PyObject * staticCallback_removeDepend (PyObject *self, PyObject *args);
    /// implementer for the removeDepend() method
    PyObject*  removeDepend(PyObject *args);
    /// callback for the addConflict() method
    static PyObject * staticCallback_addConflict (PyObject *self, PyObject *args);
    /// implementer for the addConflict() method
    PyObject*  addConflict(PyObject *args);
    /// callback for the removeConflict() method
    static PyObject * staticCallback_removeConflict (PyObject *self, PyObject *args);
    /// implementer for the removeConflict() method
    PyObject*  removeConflict(PyObject *args);
    /// callback for the addReplace() method
    static PyObject * staticCallback_addReplace (PyObject *self, PyObject *args);
    /// implementer for the addReplace() method
    PyObject*  addReplace(PyObject *args);
    /// callback for the removeReplace() method
    static PyObject * staticCallback_removeReplace (PyObject *self, PyObject *args);
    /// implementer for the removeReplace() method
    PyObject*  removeReplace(PyObject *args);
    /// callback for the addTag() method
    static PyObject * staticCallback_addTag (PyObject *self, PyObject *args);
    /// implementer for the addTag() method
    PyObject*  addTag(PyObject *args);
    /// callback for the removeTag() method
    static PyObject * staticCallback_removeTag (PyObject *self, PyObject *args);
    /// implementer for the removeTag() method
    PyObject*  removeTag(PyObject *args);
    /// callback for the addFile() method
    static PyObject * staticCallback_addFile (PyObject *self, PyObject *args);
    /// implementer for the addFile() method
    PyObject*  addFile(PyObject *args);
    /// callback for the removeFile() method
    static PyObject * staticCallback_removeFile (PyObject *self, PyObject *args);
    /// implementer for the removeFile() method
    PyObject*  removeFile(PyObject *args);
    /// callback for the write() method
    static PyObject * staticCallback_write (PyObject *self, PyObject *args);
    /// implementer for the write() method
    PyObject*  write(PyObject *args);
    //@}


    /** @name callbacks and implementers for the python object attributes */
    //@{
    ///getter callback for the Name attribute
    static PyObject * staticCallback_getName (PyObject *self, void *closure);
    /// getter for the Name attribute
    Py::String getName() const;
    /// setter callback for the Name attribute
    static int staticCallback_setName (PyObject *self, PyObject *value, void *closure);
    /// setter for the Name attribute
    void setName(Py::String arg);
    ///getter callback for the Version attribute
    static PyObject * staticCallback_getVersion (PyObject *self, void *closure);
    /// getter for the Version attribute
    Py::String getVersion() const;
    /// setter callback for the Version attribute
    static int staticCallback_setVersion (PyObject *self, PyObject *value, void *closure);
    /// setter for the Version attribute
    void setVersion(Py::String arg);
    ///getter callback for the Date attribute
    static PyObject * staticCallback_getDate (PyObject *self, void *closure);
    /// getter for the Date attribute
    Py::String getDate() const;
    /// setter callback for the Date attribute
    static int staticCallback_setDate (PyObject *self, PyObject *value, void *closure);
    /// setter for the Date attribute
    void setDate(Py::String arg);
    ///getter callback for the Type attribute
    static PyObject * staticCallback_getType (PyObject *self, void *closure);
    /// getter for the Type attribute
    Py::String getType() const;
    /// setter callback for the Type attribute
    static int staticCallback_setType (PyObject *self, PyObject *value, void *closure);
    /// setter for the Type attribute
    void setType(Py::String arg);
    ///getter callback for the Description attribute
    static PyObject * staticCallback_getDescription (PyObject *self, void *closure);
    /// getter for the Description attribute
    Py::String getDescription() const;
    /// setter callback for the Description attribute
    static int staticCallback_setDescription (PyObject *self, PyObject *value, void *closure);
    /// setter for the Description attribute
    void setDescription(Py::String arg);
    ///getter callback for the Maintainer attribute
    static PyObject * staticCallback_getMaintainer (PyObject *self, void *closure);
    /// getter for the Maintainer attribute
    Py::List getMaintainer() const;
    /// setter callback for the Maintainer attribute
    static int staticCallback_setMaintainer (PyObject *self, PyObject *value, void *closure);
    /// setter for the Maintainer attribute
    void setMaintainer(Py::List arg);
    ///getter callback for the License attribute
    static PyObject * staticCallback_getLicense (PyObject *self, void *closure);
    /// getter for the License attribute
    Py::List getLicense() const;
    /// setter callback for the License attribute
    static int staticCallback_setLicense (PyObject *self, PyObject *value, void *closure);
    /// setter for the License attribute
    void setLicense(Py::List arg);
    ///getter callback for the Urls attribute
    static PyObject * staticCallback_getUrls (PyObject *self, void *closure);
    /// getter for the Urls attribute
    Py::List getUrls() const;
    /// setter callback for the Urls attribute
    static int staticCallback_setUrls (PyObject *self, PyObject *value, void *closure);
    /// setter for the Urls attribute
    void setUrls(Py::List arg);
    ///getter callback for the Author attribute
    static PyObject * staticCallback_getAuthor (PyObject *self, void *closure);
    /// getter for the Author attribute
    Py::List getAuthor() const;
    /// setter callback for the Author attribute
    static int staticCallback_setAuthor (PyObject *self, PyObject *value, void *closure);
    /// setter for the Author attribute
    void setAuthor(Py::List arg);
    ///getter callback for the Depend attribute
    static PyObject * staticCallback_getDepend (PyObject *self, void *closure);
    /// getter for the Depend attribute
    Py::List getDepend() const;
    /// setter callback for the Depend attribute
    static int staticCallback_setDepend (PyObject *self, PyObject *value, void *closure);
    /// setter for the Depend attribute
    void setDepend(Py::List arg);
    ///getter callback for the Conflict attribute
    static PyObject * staticCallback_getConflict (PyObject *self, void *closure);
    /// getter for the Conflict attribute
    Py::List getConflict() const;
    /// setter callback for the Conflict attribute
    static int staticCallback_setConflict (PyObject *self, PyObject *value, void *closure);
    /// setter for the Conflict attribute
    void setConflict(Py::List arg);
    ///getter callback for the Replace attribute
    static PyObject * staticCallback_getReplace (PyObject *self, void *closure);
    /// getter for the Replace attribute
    Py::List getReplace() const;
    /// setter callback for the Replace attribute
    static int staticCallback_setReplace (PyObject *self, PyObject *value, void *closure);
    /// setter for the Replace attribute
    void setReplace(Py::List arg);
    ///getter callback for the Tag attribute
    static PyObject * staticCallback_getTag (PyObject *self, void *closure);
    /// getter for the Tag attribute
    Py::List getTag() const;
    /// setter callback for the Tag attribute
    static int staticCallback_setTag (PyObject *self, PyObject *value, void *closure);
    /// setter for the Tag attribute
    void setTag(Py::List arg);
    ///getter callback for the Icon attribute
    static PyObject * staticCallback_getIcon (PyObject *self, void *closure);
    /// getter for the Icon attribute
    Py::String getIcon() const;
    /// setter callback for the Icon attribute
    static int staticCallback_setIcon (PyObject *self, PyObject *value, void *closure);
    /// setter for the Icon attribute
    void setIcon(Py::String arg);
    ///getter callback for the Classname attribute
    static PyObject * staticCallback_getClassname (PyObject *self, void *closure);
    /// getter for the Classname attribute
    Py::String getClassname() const;
    /// setter callback for the Classname attribute
    static int staticCallback_setClassname (PyObject *self, PyObject *value, void *closure);
    /// setter for the Classname attribute
    void setClassname(Py::String arg);
    ///getter callback for the Subdirectory attribute
    static PyObject * staticCallback_getSubdirectory (PyObject *self, void *closure);
    /// getter for the Subdirectory attribute
    Py::String getSubdirectory() const;
    /// setter callback for the Subdirectory attribute
    static int staticCallback_setSubdirectory (PyObject *self, PyObject *value, void *closure);
    /// setter for the Subdirectory attribute
    void setSubdirectory(Py::String arg);
    ///getter callback for the File attribute
    static PyObject * staticCallback_getFile (PyObject *self, void *closure);
    /// getter for the File attribute
    Py::List getFile() const;
    /// setter callback for the File attribute
    static int staticCallback_setFile (PyObject *self, PyObject *value, void *closure);
    /// setter for the File attribute
    void setFile(Py::List arg);
    ///getter callback for the Content attribute
    static PyObject * staticCallback_getContent (PyObject *self, void *closure);
    /// getter for the Content attribute
    Py::Dict getContent() const;
    /// setter callback for the Content attribute
    static int staticCallback_setContent (PyObject *self, PyObject *value, void *closure);
    /// setter for the Content attribute
    void setContent(Py::Dict arg);
    ///getter callback for the FreeCADMin attribute
    static PyObject * staticCallback_getFreeCADMin (PyObject *self, void *closure);
    /// getter for the FreeCADMin attribute
    Py::String getFreeCADMin() const;
    /// setter callback for the FreeCADMin attribute
    static int staticCallback_setFreeCADMin (PyObject *self, PyObject *value, void *closure);
    /// setter for the FreeCADMin attribute
    void setFreeCADMin(Py::String arg);
    ///getter callback for the FreeCADMax attribute
    static PyObject * staticCallback_getFreeCADMax (PyObject *self, void *closure);
    /// getter for the FreeCADMax attribute
    Py::String getFreeCADMax() const;
    /// setter callback for the FreeCADMax attribute
    static int staticCallback_setFreeCADMax (PyObject *self, PyObject *value, void *closure);
    /// setter for the FreeCADMax attribute
    void setFreeCADMax(Py::String arg);
    ///getter callback for the PythonMin attribute
    static PyObject * staticCallback_getPythonMin (PyObject *self, void *closure);
    /// getter for the PythonMin attribute
    Py::String getPythonMin() const;
    /// setter callback for the PythonMin attribute
    static int staticCallback_setPythonMin (PyObject *self, PyObject *value, void *closure);
    /// setter for the PythonMin attribute
    void setPythonMin(Py::String arg);
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(const char *attr) override;              // __getattr__ function
    int _setattr(const char *attr, PyObject *value) override;   // __setattr__ function

    /// getter for the object handled by this class
    Metadata *getMetadataPtr() const;

    /** @name additional declarations and methods for the wrapper class */
    //@{
public:
    MetadataPy(const Metadata & pla, PyTypeObject *T = &Type)
    :PyObjectBase(new Metadata(pla),T){}
    Metadata value() const
    { return *(getMetadataPtr()); }
        
    //@}
};

}  //namespace App

#endif  // APP_METADATAPY_H


