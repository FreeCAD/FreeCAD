
// This file is generated by src/Tools/generateTemplates/templateClassPyExport.py out of the .XML file
// Every change you make here gets lost in the next full rebuild!
// This File is normally built as an include in MeasureManagerPyImp.cpp! It's not intended to be in a project!

#include <Base/PyObjectBase.h>
#include <Base/Console.h>
#include <Base/Exception.h>
#include <CXX/Objects.hxx>

#if defined(__clang__)
# pragma clang diagnostic push
# pragma clang diagnostic ignored "-Wdeprecated-declarations"
#endif

using Base::streq;
using namespace App;

#if defined(__GNUC__)
#pragma GCC diagnostic push
// Ignore -Wmissing-field-initializers (GCC only):
// - C++20 guarantees omitted fields are zero-initialized.
// - Python C API changes fields across versions.
// - Clang does not warn; GCC does unnecessarily.
// See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=96868
#pragma GCC diagnostic ignored "-Wmissing-field-initializers"
#endif // __GNUC__
/// Type structure of MeasureManagerPy
PyTypeObject MeasureManagerPy::Type = {
    .ob_base = PyVarObject_HEAD_INIT(&PyType_Type,0)
    .tp_name = "App.MeasureManager",
    .tp_basicsize = sizeof(MeasureManagerPy),
    .tp_itemsize = 0,
    /* methods */
    .tp_dealloc = PyDestructor,
    .tp_repr = __repr,
    .tp_getattro = __getattro,
    .tp_setattro = __setattro,
    /* --- Flags to define presence of optional/expanded features */
    .tp_flags = Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT,
    .tp_doc = "MeasureManager class.\n"
    "\n"
    "The MeasureManager handles measure types and geometry handler across FreeCAD.",
    .tp_methods = App::MeasureManagerPy::Methods,
    .tp_getset = App::MeasureManagerPy::GetterSetter,
    .tp_base = &Base::PyObjectBase::Type,
    .tp_init = __PyInit,
    .tp_new = App::MeasureManagerPy::PyMake
};
#if defined(__GNUC__)
#pragma GCC diagnostic pop
#endif // __GNUC__

/// Methods structure of MeasureManagerPy
PyMethodDef MeasureManagerPy::Methods[] = {
    {"addMeasureType",
        reinterpret_cast<PyCFunction>(reinterpret_cast<void (*) ()>( staticCallback_addMeasureType )),
        METH_VARARGS|METH_STATIC,
        "addMeasureType(id, label, measureType) -> None\n"
        "\n"
        "Add a new measure type.\n"
        "\n"
        "id : str\n"
        "    Unique identifier of the measure type.\n"
        "label : str\n"
        "    Name of the module.\n"
        "measureType : Measure.MeasureBasePython\n"
        "    The actual measure type."
    },
    {"getMeasureTypes",
        reinterpret_cast<PyCFunction>(reinterpret_cast<void (*) ()>( staticCallback_getMeasureTypes )),
        METH_NOARGS|METH_STATIC,
        "getMeasureTypes() -> List[(id, label, pythonMeasureType)]\n"
        "\n"
        "Returns a list of all registered measure types."
    },
    {nullptr, nullptr, 0, nullptr}		/* Sentinel */
};



/// Attribute structure of MeasureManagerPy
PyGetSetDef MeasureManagerPy::GetterSetter[] = {
    {nullptr, nullptr, nullptr, nullptr, nullptr}		/* Sentinel */
};

// addMeasureType() callback and implementer
// PyObject*  MeasureManagerPy::addMeasureType(PyObject *args){};
// has to be implemented in MeasureManagerPyImp.cpp
PyObject * MeasureManagerPy::staticCallback_addMeasureType (PyObject *self, PyObject *args)
{
    try { // catches all exceptions coming up from c++ and generate a python exception
        (void)self;
        PyObject* ret = MeasureManagerPy::addMeasureType(args);
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return nullptr;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}

// getMeasureTypes() callback and implementer
// PyObject*  MeasureManagerPy::getMeasureTypes(PyObject *args){};
// has to be implemented in MeasureManagerPyImp.cpp
PyObject * MeasureManagerPy::staticCallback_getMeasureTypes (PyObject *self, PyObject * Py_UNUSED(args))
{
    try { // catches all exceptions coming up from c++ and generate a python exception
        (void)self;
        PyObject* ret = MeasureManagerPy::getMeasureTypes();
        return ret;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return nullptr;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return nullptr;
    }
#endif
}




//--------------------------------------------------------------------------
// Constructor
//--------------------------------------------------------------------------
MeasureManagerPy::MeasureManagerPy(MeasureManager *pcObject, PyTypeObject *T)
    : PyObjectBase(static_cast<PyObjectBase::PointerType>(pcObject), T)
{
}

PyObject *MeasureManagerPy::PyMake(PyTypeObject* /*type*/, PyObject* /*args*/, PyObject* /*kwds*/)
{
    // never create such objects with the constructor
    PyErr_SetString(PyExc_RuntimeError, "You cannot create directly an instance of 'MeasureManagerPy'.");

    return nullptr;
}

int MeasureManagerPy::PyInit(PyObject* /*args*/, PyObject* /*kwd*/)
{
    return 0;
}

//--------------------------------------------------------------------------
// destructor
//--------------------------------------------------------------------------
MeasureManagerPy::~MeasureManagerPy()                                // Everything handled in parent
{
    // delete the handled object when the PyObject dies
    MeasureManagerPy::PointerType ptr = static_cast<MeasureManagerPy::PointerType>(_pcTwinPointer);
    delete ptr;
}

//--------------------------------------------------------------------------
// MeasureManagerPy representation
//--------------------------------------------------------------------------
PyObject *MeasureManagerPy::_repr()
{
    return Py_BuildValue("s", representation().c_str());
}

//--------------------------------------------------------------------------
// MeasureManagerPy Attributes
//--------------------------------------------------------------------------
PyObject *MeasureManagerPy::_getattr(const char *attr)			// __getattr__ function: note only need to handle new state
{
    try {
        // getter method for special Attributes (e.g. dynamic ones)
        PyObject *r = getCustomAttributes(attr);
        if(r) return r;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return nullptr;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return nullptr;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return nullptr;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError,"Unknown C++ exception");
        return nullptr;
    }
#endif

    PyMethodDef *ml = Methods;
    for (; ml->ml_name != nullptr; ml++) {
        if (attr[0] == ml->ml_name[0] &&
            strcmp(attr+1, ml->ml_name+1) == 0)
            return PyCFunction_New(ml, this);
    }

    PyErr_Clear();
    return PyObjectBase::_getattr(attr);
}

int MeasureManagerPy::_setattr(const char *attr, PyObject *value) // __setattr__ function: note only need to handle new state
{
    try {
        // setter for special Attributes (e.g. dynamic ones)
        int r = setCustomAttributes(attr, value);
        // r = 1: handled
        // r = -1: error
        // r = 0: ignore
        if (r == 1)
            return 0;
        else if (r == -1)
            return -1;
    } // Please sync the following catch implementation with PY_CATCH
    catch(const Base::Exception& e)
    {
        e.setPyException();
        return -1;
    }
    catch(const std::exception& e)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, e.what());
        return -1;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return -1;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS
    catch(...)
    {
        PyErr_SetString(Base::PyExc_FC_GeneralError, "Unknown C++ exception");
        return -1;
    }
#endif

    return PyObjectBase::_setattr(attr, value);
}

MeasureManager *MeasureManagerPy::getMeasureManagerPtr() const
{
    return static_cast<MeasureManager *>(_pcTwinPointer);
}

#if defined(__clang__)
# pragma clang diagnostic pop
#endif

#if 0
/* From here on come the methods you have to implement, but NOT in this module. Implement in MeasureManagerPyImp.cpp! This prototypes
 * are just for convenience when you add a new method.
 */



// returns a string which represents the object e.g. when printed in python
std::string MeasureManagerPy::representation() const
{
    return {"<MeasureManager object>"};
}

PyObject* MeasureManagerPy::addMeasureType(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}

PyObject* MeasureManagerPy::getMeasureTypes()
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return nullptr;
}



PyObject *MeasureManagerPy::getCustomAttributes(const char* /*attr*/) const
{
    return nullptr;
}

int MeasureManagerPy::setCustomAttributes(const char* /*attr*/, PyObject* /*obj*/)
{
    return 0;
}


#endif



