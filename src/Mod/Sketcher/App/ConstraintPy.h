
// This file is generated by src/Tools/generateTemaplates/templateClassPyExport.py out of the XML file
// Every change you make here get lost at the next full rebuild!
#ifndef SKETCHER_CONSTRAINTPY_H
#define SKETCHER_CONSTRAINTPY_H

#include <Base/PersistencePy.h>
#include <Mod/Sketcher/App/Constraint.h>
#include <string>

namespace Sketcher
{

//===========================================================================
// ConstraintPy - Python wrapper
//===========================================================================

/** The python export class for Constraint
 */
class SketcherExport ConstraintPy : public Base::PersistencePy
{
public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyGetSetDef    GetterSetter[];
    virtual PyTypeObject *GetType(void) {return &Type;};

public:
    ConstraintPy(Constraint *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(struct _typeobject *, PyObject *, PyObject *);
    virtual int PyInit(PyObject* args, PyObject*k);
    ~ConstraintPy();

    typedef Constraint* PointerType ;

    virtual PyObject *_repr(void);        // the representation
    std::string representation(void) const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    //@}


    /** @name callbacks and implementers for the python object attributes */
    //@{
    ///getter callback for the First attribute
    static PyObject * staticCallback_getFirst (PyObject *self, void *closure);
    /// getter for the First attribute
    Py::Int getFirst(void) const;
    /// setter callback for the First attribute
    static int staticCallback_setFirst (PyObject *self, PyObject *value, void *closure);
    /// setter for the First attribute
    void setFirst(Py::Int arg);
    ///getter callback for the Second attribute
    static PyObject * staticCallback_getSecond (PyObject *self, void *closure);
    /// getter for the Second attribute
    Py::Int getSecond(void) const;
    /// setter callback for the Second attribute
    static int staticCallback_setSecond (PyObject *self, PyObject *value, void *closure);
    /// setter for the Second attribute
    void setSecond(Py::Int arg);
    ///getter callback for the Name attribute
    static PyObject * staticCallback_getName (PyObject *self, void *closure);
    /// getter for the Name attribute
    Py::String getName(void) const;
    /// setter callback for the Name attribute
    static int staticCallback_setName (PyObject *self, PyObject *value, void *closure);
    /// setter for the Name attribute
    void setName(Py::String arg);
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(char *attr);              // __getattr__ function
    int _setattr(char *attr, PyObject *value);        // __setattr__ function

    /// getter for the object handled by this class
    Constraint *getConstraintPtr(void) const;

    /** @name additional declarations and methods for the wrapper class */
    //@{

    //@}
};

}  //namespace Sketcher

#endif  // SKETCHER_CONSTRAINTPY_H


