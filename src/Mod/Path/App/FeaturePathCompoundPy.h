
// This file is generated by src/Tools/generateTemaplates/templateClassPyExport.py out of the XML file
// Every change you make here get lost at the next full rebuild!
#ifndef PATH_FEATUREPATHCOMPOUNDPY_H
#define PATH_FEATUREPATHCOMPOUNDPY_H

#include <App/DocumentObjectPy.h>
#include <Mod/Path/App/FeaturePathCompound.h>
#include <string>

namespace Path
{

//===========================================================================
// FeaturePathCompoundPy - Python wrapper
//===========================================================================

/** The python export class for FeaturePathCompound
 */
class PathExport FeaturePathCompoundPy : public App::DocumentObjectPy
{
public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyGetSetDef    GetterSetter[];
    virtual PyTypeObject *GetType(void) {return &Type;}

public:
    FeaturePathCompoundPy(FeatureCompound *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(struct _typeobject *, PyObject *, PyObject *);
    virtual int PyInit(PyObject* args, PyObject*k);
    ~FeaturePathCompoundPy();
    

    typedef FeatureCompound* PointerType ;

    virtual PyObject *_repr(void);        // the representation
    std::string representation(void) const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    /// callback for the addObject() method
    static PyObject * staticCallback_addObject (PyObject *self, PyObject *args);
    /// implementer for the addObject() method
    PyObject*  addObject(PyObject *args);
    /// callback for the removeObject() method
    static PyObject * staticCallback_removeObject (PyObject *self, PyObject *args);
    /// implementer for the removeObject() method
    PyObject*  removeObject(PyObject *args);
    //@}


    /** @name callbacks and implementers for the python object attributes */
    //@{
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(char *attr);              // __getattr__ function
    int _setattr(char *attr, PyObject *value);        // __setattr__ function

    /// getter for the object handled by this class
    FeatureCompound *getFeaturePathCompoundPtr(void) const;

    /** @name additional declarations and methods for the wrapper class */
    //@{

    //@}
};

}  //namespace Path

#endif  // PATH_FEATUREPATHCOMPOUNDPY_H


