<?xml version="1.0" encoding="UTF-8"?>
<GenerateModel xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="generateMetaModel_Module.xsd">
    <PythonExport 
        Father="BaseClassPy" 
        Name="VoronoiEdgePy" 
        Twin="VoronoiEdge" 
        TwinPointer="VoronoiEdge" 
        Include="Mod/Path/App/VoronoiEdge.h" 
        FatherInclude="Base/BaseClassPy.h" 
        Namespace="Path" 
        FatherNamespace="Base"
        Constructor="true"
        RichCompare="true"
        Delete="true">
        <Documentation>
            <Author Licence="LGPL" Name="sliptonic" EMail="shopinthewoods@gmail.com" />
            <UserDocu>Edge of a Voronoi diagram</UserDocu>
        </Documentation>
        <Attribute Name="Index" ReadOnly="true">
            <Documentation>
                <UserDocu>Internal id of the element.</UserDocu>
            </Documentation>
            <Parameter Name="Index" Type="Long"/>
        </Attribute>
        <Attribute Name="Color" ReadOnly="false">
            <Documentation>
                <UserDocu>Assigned color of the receiver.</UserDocu>
            </Documentation>
            <Parameter Name="Color" Type="Long"/>
        </Attribute>
        <Attribute Name="Cell" ReadOnly="true">
            <Documentation>
                <UserDocu>cell the edge belongs to</UserDocu>
            </Documentation>
            <Parameter Name="Cell" Type="Object"/>
        </Attribute>
        <Attribute Name="Vertices" ReadOnly="true">
            <Documentation>
                <UserDocu>Begin and End voronoi vertex</UserDocu>
            </Documentation>
            <Parameter Name="Vertices" Type="List"/>
        </Attribute>
        <Attribute Name="Next" ReadOnly="true">
            <Documentation>
                <UserDocu>CCW next edge within voronoi cell</UserDocu>
            </Documentation>
            <Parameter Name="Next" Type="Object"/>
        </Attribute>
        <Attribute Name="Prev" ReadOnly="true">
            <Documentation>
                <UserDocu>CCW previous edge within voronoi cell</UserDocu>
            </Documentation>
            <Parameter Name="Prev" Type="Object"/>
        </Attribute>
        <Attribute Name="RotNext" ReadOnly="true">
            <Documentation>
                <UserDocu>Rotated CCW next edge within voronoi cell</UserDocu>
            </Documentation>
            <Parameter Name="RotNext" Type="Object"/>
        </Attribute>
        <Attribute Name="RotPrev" ReadOnly="true">
            <Documentation>
                <UserDocu>Rotated CCW previous edge within voronoi cell</UserDocu>
            </Documentation>
            <Parameter Name="RotPrev" Type="Object"/>
        </Attribute>
        <Attribute Name="Twin" ReadOnly="true">
            <Documentation>
                <UserDocu>Twin edge</UserDocu>
            </Documentation>
            <Parameter Name="Twin" Type="Object"/>
        </Attribute>
        <Methode Name="isFinite" Const="true">
            <Documentation>
                <UserDocu>Returns true if both vertices are finite</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="isInfinite" Const="true">
            <Documentation>
                <UserDocu>Returns true if the end vertex is infinite</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="isLinear" Const="true">
            <Documentation>
                <UserDocu>Returns true if edge is straight</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="isCurved" Const="true">
            <Documentation>
                <UserDocu>Returns true if edge is curved</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="isPrimary" Const="true">
            <Documentation>
                <UserDocu>Returns false if edge goes through endpoint of the segment site</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="isSecondary" Const="true">
            <Documentation>
                <UserDocu>Returns true if edge goes through endpoint of the segment site</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="toShape" Const="true">
            <Documentation>
                <UserDocu>Returns a shape for the edge</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="getDistances" Const="true">
            <Documentation>
                <UserDocu>Returns the distance of the vertices to the input source</UserDocu>
            </Documentation>
        </Methode>
        <Methode Name="getSegmentAngle" Const="true">
            <Documentation>
                <UserDocu>Returns the angle (in degree) of the segments if the edge was formed by two segments</UserDocu>
            </Documentation>
        </Methode>
    </PythonExport>
</GenerateModel>
