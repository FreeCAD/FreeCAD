
// This file is generated by src/Tools/generateTemaplates/templateClassPyExport.py out of the .XML file
// Every change you make here get lost at the next full rebuild!
// This File is normaly build as an include in ToolPyImp.cpp! Its not intended to be in a project!

#include <boost/filesystem/path.hpp>
#include <boost/filesystem/operations.hpp>
#include <boost/filesystem/exception.hpp>
#include <Base/PyObjectBase.h>
#include <Base/Console.h>
#include <Base/Exception.h>
#include <CXX/Objects.hxx>

using Base::streq;
using namespace Path;

/// Type structure of ToolPy
PyTypeObject ToolPy::Type = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,                                                /*ob_size*/
    "Path.Tool",     /*tp_name*/
    sizeof(ToolPy),                       /*tp_basicsize*/
    0,                                                /*tp_itemsize*/
    /* methods */
    PyDestructor,                                     /*tp_dealloc*/
    0,                                                /*tp_print*/
    __getattr,                                        /*tp_getattr*/
    __setattr,                                        /*tp_setattr*/
    0,                                                /*tp_compare*/
    __repr,                                           /*tp_repr*/
    0,                                                /*tp_as_number*/
    0,                                                /*tp_as_sequence*/
    0,                                                /*tp_as_mapping*/
    0,                                                /*tp_hash*/
    0,                                                /*tp_call */
    0,                                                /*tp_str  */
    0,                                                /*tp_getattro*/
    0,                                                /*tp_setattro*/
    /* --- Functions to access object as input/output buffer ---------*/
    0,                                                /* tp_as_buffer */
    /* --- Flags to define presence of optional/expanded features */
    Py_TPFLAGS_HAVE_CLASS,        /*tp_flags */
    "The Tool objects holds the properties of a CNC tool.\n"
    "optional attributes:\n"
    "  name: a user-defined name for this tool\n"
    "  tooltype: Drill, CenterDrill, CounterSink, CounterBore, Reamer, Tap, EndMill, SlotCutter, BallEndMill, ChamferMill, CornerRound, Engraver or Undefined \n"
    "  material: HighSpeedSteel, HighCarbonToolSteel, Carbide, CastAlloy, Ceramics, Diamond, Sialon or Undefined\n"
    "  diameter : the diameter of this tool\n"
    "  lengthOffset\n"
    "  flatRadius\n"
    "  cornerRadius\n"
    "  cuttingEdgeAngle\n"
    "  cuttingEdgeHeight",           /*tp_doc */
    0,                                                /*tp_traverse */
    0,                                                /*tp_clear */
    0,                                                /*tp_richcompare */
    0,                                                /*tp_weaklistoffset */
    0,                                                /*tp_iter */
    0,                                                /*tp_iternext */
    Path::ToolPy::Methods,                     /*tp_methods */
    0,                                                /*tp_members */
    Path::ToolPy::GetterSetter,                     /*tp_getset */
    &Base::PersistencePy::Type,                        /*tp_base */
    0,                                                /*tp_dict */
    0,                                                /*tp_descr_get */
    0,                                                /*tp_descr_set */
    0,                                                /*tp_dictoffset */
    __PyInit,                                         /*tp_init */
    0,                                                /*tp_alloc */
    Path::ToolPy::PyMake,/*tp_new */
    0,                                                /*tp_free   Low-level free-memory routine */
    0,                                                /*tp_is_gc  For PyObject_IS_GC */
    0,                                                /*tp_bases */
    0,                                                /*tp_mro    method resolution order */
    0,                                                /*tp_cache */
    0,                                                /*tp_subclasses */
    0,                                                /*tp_weaklist */
    0                                                 /*tp_del */
};

/// Methods structure of ToolPy
PyMethodDef ToolPy::Methods[] = {
    {"copy",
        (PyCFunction) staticCallback_copy,
        METH_VARARGS,
        "returns a copy of this tool"
    },
    {NULL, NULL, 0, NULL}		/* Sentinel */
};



/// Attribute structure of ToolPy
PyGetSetDef ToolPy::GetterSetter[] = {
    {"Name",
        (getter) staticCallback_getName,
        (setter) staticCallback_setName, 
        "the name of this tool in mm",
        NULL
    },
    {"ToolType",
        (getter) staticCallback_getToolType,
        (setter) staticCallback_setToolType, 
        "the type of this tool: Drill, CenterDrill, CounterSink, CounterBore, Reamer, Tap,\nEndMill, SlotCutter, BallEndMill, ChamferMill, CornerRound, Engraver or Undefined",
        NULL
    },
    {"Material",
        (getter) staticCallback_getMaterial,
        (setter) staticCallback_setMaterial, 
        "the material of this tool: Steel, Carbide, HighSpeedSteel,\nHighCarbonToolSteel CastAlloy, Ceramics, Diamond, Sialon or Undefined",
        NULL
    },
    {"Diameter",
        (getter) staticCallback_getDiameter,
        (setter) staticCallback_setDiameter, 
        "the diameter of this tool in mm",
        NULL
    },
    {"LengthOffset",
        (getter) staticCallback_getLengthOffset,
        (setter) staticCallback_setLengthOffset, 
        "the length offset of this tool in mm",
        NULL
    },
    {"FlatRadius",
        (getter) staticCallback_getFlatRadius,
        (setter) staticCallback_setFlatRadius, 
        "the flat radius of this tool in mm",
        NULL
    },
    {"CornerRadius",
        (getter) staticCallback_getCornerRadius,
        (setter) staticCallback_setCornerRadius, 
        "the corner radius of this tool in mm",
        NULL
    },
    {"CuttingEdgeAngle",
        (getter) staticCallback_getCuttingEdgeAngle,
        (setter) staticCallback_setCuttingEdgeAngle, 
        "the cutting edge angle of this tool",
        NULL
    },
    {"CuttingEdgeHeight",
        (getter) staticCallback_getCuttingEdgeHeight,
        (setter) staticCallback_setCuttingEdgeHeight, 
        "the cutting edge height of this tool in mm",
        NULL
    },
    {NULL, NULL, NULL, NULL, NULL}		/* Sentinel */
};

// copy() callback and implementer
// PyObject*  ToolPy::copy(PyObject *args){};
// has to be implemented in ToolPyImp.cpp
PyObject * ToolPy::staticCallback_copy (PyObject *self, PyObject *args)
{
    // test if twin object not allready deleted
    if (!static_cast<PyObjectBase*>(self)->isValid()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return NULL;
    }

    // test if object is set Const
    if (static_cast<PyObjectBase*>(self)->isConst()) {
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a non const method");
        return NULL;
    }

    try { // catches all exceptions coming up from c++ and generate a python exception
        PyObject* ret = static_cast<ToolPy*>(self)->copy(args);
        if (ret != 0)
            static_cast<ToolPy*>(self)->startNotify();
        return ret;
    }
    catch(const Base::Exception& e) // catch the FreeCAD exceptions
    {
        std::string str;
        str += "FreeCAD exception thrown (";
        str += e.what();
        str += ")";
        e.ReportException();
        PyErr_SetString(Base::BaseExceptionFreeCADError,str.c_str());
        return NULL;
    }
    catch(const boost::filesystem::filesystem_error& e) // catch boost filesystem exception
    {
        std::string str;
        str += "File system exception thrown (";
        //str += e.who();
        //str += ", ";
        str += e.what();
        str += ")\n";
        Base::Console().Error(str.c_str());
        PyErr_SetString(Base::BaseExceptionFreeCADError,str.c_str());
        return NULL;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return NULL;
    }
    catch(const char* e) // catch simple string exceptions
    {
        Base::Console().Error(e);
        PyErr_SetString(Base::BaseExceptionFreeCADError,e);
        return NULL;
    }
    // in debug not all exceptions will be catched to get the attention of the developer!
#ifndef DONT_CATCH_CXX_EXCEPTIONS 
    catch(const std::exception& e) // catch other c++ exceptions
    {
        std::string str;
        str += "FC++ exception thrown (";
        str += e.what();
        str += ")";
        Base::Console().Error(str.c_str());
        PyErr_SetString(Base::BaseExceptionFreeCADError,str.c_str());
        return NULL;
    }
    catch(...)  // catch the rest!
    {
        PyErr_SetString(Base::BaseExceptionFreeCADError,"Unknown C++ exception");
        return NULL;
    }
#endif
}

// Name() callback and implementer
// PyObject*  ToolPy::Name(PyObject *args){};
// has to be implemented in ToolPyImp.cpp
PyObject * ToolPy::staticCallback_getName (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return NULL;
    }

    try {
        return Py::new_reference_to(static_cast<ToolPy*>(self)->getName());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return NULL;
    } catch (...) {
        PyErr_SetString(Base::BaseExceptionFreeCADError, "Unknown exception while reading attribute 'Name' of object 'Tool'");
        return NULL;
    }
}

int ToolPy::staticCallback_setName (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<ToolPy*>(self)->setName(Py::String(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::BaseExceptionFreeCADError, "Unknown exception while writing attribute 'Name' of object 'Tool'");
        return -1;
    }
}

// ToolType() callback and implementer
// PyObject*  ToolPy::ToolType(PyObject *args){};
// has to be implemented in ToolPyImp.cpp
PyObject * ToolPy::staticCallback_getToolType (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return NULL;
    }

    try {
        return Py::new_reference_to(static_cast<ToolPy*>(self)->getToolType());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return NULL;
    } catch (...) {
        PyErr_SetString(Base::BaseExceptionFreeCADError, "Unknown exception while reading attribute 'ToolType' of object 'Tool'");
        return NULL;
    }
}

int ToolPy::staticCallback_setToolType (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<ToolPy*>(self)->setToolType(Py::String(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::BaseExceptionFreeCADError, "Unknown exception while writing attribute 'ToolType' of object 'Tool'");
        return -1;
    }
}

// Material() callback and implementer
// PyObject*  ToolPy::Material(PyObject *args){};
// has to be implemented in ToolPyImp.cpp
PyObject * ToolPy::staticCallback_getMaterial (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return NULL;
    }

    try {
        return Py::new_reference_to(static_cast<ToolPy*>(self)->getMaterial());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return NULL;
    } catch (...) {
        PyErr_SetString(Base::BaseExceptionFreeCADError, "Unknown exception while reading attribute 'Material' of object 'Tool'");
        return NULL;
    }
}

int ToolPy::staticCallback_setMaterial (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<ToolPy*>(self)->setMaterial(Py::String(value,false));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::BaseExceptionFreeCADError, "Unknown exception while writing attribute 'Material' of object 'Tool'");
        return -1;
    }
}

// Diameter() callback and implementer
// PyObject*  ToolPy::Diameter(PyObject *args){};
// has to be implemented in ToolPyImp.cpp
PyObject * ToolPy::staticCallback_getDiameter (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return NULL;
    }

    try {
        return Py::new_reference_to(static_cast<ToolPy*>(self)->getDiameter());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return NULL;
    } catch (...) {
        PyErr_SetString(Base::BaseExceptionFreeCADError, "Unknown exception while reading attribute 'Diameter' of object 'Tool'");
        return NULL;
    }
}

int ToolPy::staticCallback_setDiameter (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<ToolPy*>(self)->setDiameter(Py::Float(PyNumber_Float(value),true));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::BaseExceptionFreeCADError, "Unknown exception while writing attribute 'Diameter' of object 'Tool'");
        return -1;
    }
}

// LengthOffset() callback and implementer
// PyObject*  ToolPy::LengthOffset(PyObject *args){};
// has to be implemented in ToolPyImp.cpp
PyObject * ToolPy::staticCallback_getLengthOffset (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return NULL;
    }

    try {
        return Py::new_reference_to(static_cast<ToolPy*>(self)->getLengthOffset());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return NULL;
    } catch (...) {
        PyErr_SetString(Base::BaseExceptionFreeCADError, "Unknown exception while reading attribute 'LengthOffset' of object 'Tool'");
        return NULL;
    }
}

int ToolPy::staticCallback_setLengthOffset (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<ToolPy*>(self)->setLengthOffset(Py::Float(PyNumber_Float(value),true));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::BaseExceptionFreeCADError, "Unknown exception while writing attribute 'LengthOffset' of object 'Tool'");
        return -1;
    }
}

// FlatRadius() callback and implementer
// PyObject*  ToolPy::FlatRadius(PyObject *args){};
// has to be implemented in ToolPyImp.cpp
PyObject * ToolPy::staticCallback_getFlatRadius (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return NULL;
    }

    try {
        return Py::new_reference_to(static_cast<ToolPy*>(self)->getFlatRadius());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return NULL;
    } catch (...) {
        PyErr_SetString(Base::BaseExceptionFreeCADError, "Unknown exception while reading attribute 'FlatRadius' of object 'Tool'");
        return NULL;
    }
}

int ToolPy::staticCallback_setFlatRadius (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<ToolPy*>(self)->setFlatRadius(Py::Float(PyNumber_Float(value),true));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::BaseExceptionFreeCADError, "Unknown exception while writing attribute 'FlatRadius' of object 'Tool'");
        return -1;
    }
}

// CornerRadius() callback and implementer
// PyObject*  ToolPy::CornerRadius(PyObject *args){};
// has to be implemented in ToolPyImp.cpp
PyObject * ToolPy::staticCallback_getCornerRadius (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return NULL;
    }

    try {
        return Py::new_reference_to(static_cast<ToolPy*>(self)->getCornerRadius());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return NULL;
    } catch (...) {
        PyErr_SetString(Base::BaseExceptionFreeCADError, "Unknown exception while reading attribute 'CornerRadius' of object 'Tool'");
        return NULL;
    }
}

int ToolPy::staticCallback_setCornerRadius (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<ToolPy*>(self)->setCornerRadius(Py::Float(PyNumber_Float(value),true));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::BaseExceptionFreeCADError, "Unknown exception while writing attribute 'CornerRadius' of object 'Tool'");
        return -1;
    }
}

// CuttingEdgeAngle() callback and implementer
// PyObject*  ToolPy::CuttingEdgeAngle(PyObject *args){};
// has to be implemented in ToolPyImp.cpp
PyObject * ToolPy::staticCallback_getCuttingEdgeAngle (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return NULL;
    }

    try {
        return Py::new_reference_to(static_cast<ToolPy*>(self)->getCuttingEdgeAngle());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return NULL;
    } catch (...) {
        PyErr_SetString(Base::BaseExceptionFreeCADError, "Unknown exception while reading attribute 'CuttingEdgeAngle' of object 'Tool'");
        return NULL;
    }
}

int ToolPy::staticCallback_setCuttingEdgeAngle (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<ToolPy*>(self)->setCuttingEdgeAngle(Py::Float(PyNumber_Float(value),true));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::BaseExceptionFreeCADError, "Unknown exception while writing attribute 'CuttingEdgeAngle' of object 'Tool'");
        return -1;
    }
}

// CuttingEdgeHeight() callback and implementer
// PyObject*  ToolPy::CuttingEdgeHeight(PyObject *args){};
// has to be implemented in ToolPyImp.cpp
PyObject * ToolPy::staticCallback_getCuttingEdgeHeight (PyObject *self, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return NULL;
    }

    try {
        return Py::new_reference_to(static_cast<ToolPy*>(self)->getCuttingEdgeHeight());
    } catch (const Py::Exception&) {
        // The exception text is already set
        return NULL;
    } catch (...) {
        PyErr_SetString(Base::BaseExceptionFreeCADError, "Unknown exception while reading attribute 'CuttingEdgeHeight' of object 'Tool'");
        return NULL;
    }
}

int ToolPy::staticCallback_setCuttingEdgeHeight (PyObject *self, PyObject *value, void * /*closure*/)
{
    if (!static_cast<PyObjectBase*>(self)->isValid()){
        PyErr_SetString(PyExc_ReferenceError, "This object is already deleted most likely through closing a document. This reference is no longer valid!");
        return -1;
    }
    if (static_cast<PyObjectBase*>(self)->isConst()){
        PyErr_SetString(PyExc_ReferenceError, "This object is immutable, you can not set any attribute or call a method");
        return -1;
    }

    try {
        static_cast<ToolPy*>(self)->setCuttingEdgeHeight(Py::Float(PyNumber_Float(value),true));
        return 0;
    } catch (const Py::Exception&) {
        // The exception text is already set
        return -1;
    } catch (...) {
        PyErr_SetString(Base::BaseExceptionFreeCADError, "Unknown exception while writing attribute 'CuttingEdgeHeight' of object 'Tool'");
        return -1;
    }
}




//--------------------------------------------------------------------------
// Constructor
//--------------------------------------------------------------------------
ToolPy::ToolPy(Tool *pcObject, PyTypeObject *T)
    : PersistencePy(static_cast<PersistencePy::PointerType>(pcObject), T)
{
}


//--------------------------------------------------------------------------
// destructor
//--------------------------------------------------------------------------
ToolPy::~ToolPy()                                // Everything handled in parent
{
    // delete the handled object when the PyObject dies
    ToolPy::PointerType ptr = static_cast<ToolPy::PointerType>(_pcTwinPointer);
    delete ptr;
}

//--------------------------------------------------------------------------
// ToolPy representation
//--------------------------------------------------------------------------
PyObject *ToolPy::_repr(void)
{
    return Py_BuildValue("s", representation().c_str());
}

//--------------------------------------------------------------------------
// ToolPy Attributes
//--------------------------------------------------------------------------
PyObject *ToolPy::_getattr(char *attr)				// __getattr__ function: note only need to handle new state
{
    try {
        // getter method for special Attributes (e.g. dynamic ones)
        PyObject *r = getCustomAttributes(attr);
        if(r) return r;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS 
    catch(const Base::Exception& e) // catch the FreeCAD exceptions
    {
        std::string str;
        str += "FreeCAD exception thrown (";
        str += e.what();
        str += ")";
        e.ReportException();
        PyErr_SetString(Base::BaseExceptionFreeCADError,str.c_str());
        return NULL;
    }
    catch(const std::exception& e) // catch other c++ exceptions
    {
        std::string str;
        str += "FC++ exception thrown (";
        str += e.what();
        str += ")";
        Base::Console().Error(str.c_str());
        PyErr_SetString(Base::BaseExceptionFreeCADError,str.c_str());
        return NULL;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return NULL;
    }
    catch(...)  // catch the rest!
    {
        PyErr_SetString(Base::BaseExceptionFreeCADError,"Unknown C++ exception");
        return NULL;
    }
#else  // DONT_CATCH_CXX_EXCEPTIONS  
    catch(const Base::Exception& e) // catch the FreeCAD exceptions
    {
        std::string str;
        str += "FreeCAD exception thrown (";
        str += e.what();
        str += ")";
        e.ReportException();
        PyErr_SetString(Base::BaseExceptionFreeCADError,str.c_str());
        return NULL;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return NULL;
    }
#endif  // DONT_CATCH_CXX_EXCEPTIONS

    PyObject *rvalue = Py_FindMethod(Methods, this, attr);
    if (rvalue == NULL)
    {
        PyErr_Clear();
        return PersistencePy::_getattr(attr);
    }
    else
    {
        return rvalue;
    }
}

int ToolPy::_setattr(char *attr, PyObject *value) // __setattr__ function: note only need to handle new state
{
    try {
        // setter for  special Attributes (e.g. dynamic ones)
        int r = setCustomAttributes(attr, value);
        // r = 1: handled
        // r = -1: error
        // r = 0: ignore
        if (r == 1)
            return 0;
        else if (r == -1)
            return -1;
    }
#ifndef DONT_CATCH_CXX_EXCEPTIONS 
    catch(const Base::Exception& e) // catch the FreeCAD exceptions
    {
        std::string str;
        str += "FreeCAD exception thrown (";
        str += e.what();
        str += ")";
        e.ReportException();
        PyErr_SetString(Base::BaseExceptionFreeCADError,str.c_str());
        return -1;
    }
    catch(const std::exception& e) // catch other c++ exceptions
    {
        std::string str;
        str += "FC++ exception thrown (";
        str += e.what();
        str += ")";
        Base::Console().Error(str.c_str());
        PyErr_SetString(Base::BaseExceptionFreeCADError,str.c_str());
        return -1;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return -1;
    }
    catch(...)  // catch the rest!
    {
        PyErr_SetString(Base::BaseExceptionFreeCADError,"Unknown C++ exception");
        return -1;
    }
#else  // DONT_CATCH_CXX_EXCEPTIONS  
    catch(const Base::Exception& e) // catch the FreeCAD exceptions
    {
        std::string str;
        str += "FreeCAD exception thrown (";
        str += e.what();
        str += ")";
        e.ReportException();
        PyErr_SetString(Base::BaseExceptionFreeCADError,str.c_str());
        return -1;
    }
    catch(const Py::Exception&)
    {
        // The exception text is already set
        return -1;
    }
#endif  // DONT_CATCH_CXX_EXCEPTIONS

    return PersistencePy::_setattr(attr, value);
}

Tool *ToolPy::getToolPtr(void) const
{
    return static_cast<Tool *>(_pcTwinPointer);
}

#if 0
/* From here on come the methods you have to implement, but NOT in this module. Implement in ToolPyImp.cpp! This prototypes 
 * are just for convenience when you add a new method.
 */

PyObject *ToolPy::PyMake(struct _typeobject *, PyObject *, PyObject *)  // Python wrapper
{
    // create a new instance of ToolPy and the Twin object 
    return new ToolPy(new Tool);
}

// constructor method
int ToolPy::PyInit(PyObject* /*args*/, PyObject* /*kwd*/)
{
    return 0;
}

// returns a string which represents the object e.g. when printed in python
std::string ToolPy::representation(void) const
{
    return std::string("<Tool object>");
}

PyObject* ToolPy::copy(PyObject *args)
{
    PyErr_SetString(PyExc_NotImplementedError, "Not yet implemented");
    return 0;
}



Py::String ToolPy::getName(void) const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

void  ToolPy::setName(Py::String arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::String ToolPy::getToolType(void) const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

void  ToolPy::setToolType(Py::String arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::String ToolPy::getMaterial(void) const
{
    //return Py::String();
    throw Py::AttributeError("Not yet implemented");
}

void  ToolPy::setMaterial(Py::String arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Float ToolPy::getDiameter(void) const
{
    //return Py::Float();
    throw Py::AttributeError("Not yet implemented");
}

void  ToolPy::setDiameter(Py::Float arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Float ToolPy::getLengthOffset(void) const
{
    //return Py::Float();
    throw Py::AttributeError("Not yet implemented");
}

void  ToolPy::setLengthOffset(Py::Float arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Float ToolPy::getFlatRadius(void) const
{
    //return Py::Float();
    throw Py::AttributeError("Not yet implemented");
}

void  ToolPy::setFlatRadius(Py::Float arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Float ToolPy::getCornerRadius(void) const
{
    //return Py::Float();
    throw Py::AttributeError("Not yet implemented");
}

void  ToolPy::setCornerRadius(Py::Float arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Float ToolPy::getCuttingEdgeAngle(void) const
{
    //return Py::Float();
    throw Py::AttributeError("Not yet implemented");
}

void  ToolPy::setCuttingEdgeAngle(Py::Float arg)
{
    throw Py::AttributeError("Not yet implemented");
}

Py::Float ToolPy::getCuttingEdgeHeight(void) const
{
    //return Py::Float();
    throw Py::AttributeError("Not yet implemented");
}

void  ToolPy::setCuttingEdgeHeight(Py::Float arg)
{
    throw Py::AttributeError("Not yet implemented");
}

PyObject *ToolPy::getCustomAttributes(const char* attr) const
{
    return 0;
}

int ToolPy::setCustomAttributes(const char* attr, PyObject *obj)
{
    return 0; 
}
#endif



