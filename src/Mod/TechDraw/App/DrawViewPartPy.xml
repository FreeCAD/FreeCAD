<?xml version="1.0" encoding="UTF-8"?>
<GenerateModel xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="generateMetaModel_Module.xsd">
  <PythonExport
    Father="DrawViewPy"
    Name="DrawViewPartPy"
    Twin="DrawViewPart"
    TwinPointer="DrawViewPart"
    Include="Mod/TechDraw/App/DrawViewPart.h"
    Namespace="TechDraw"
    FatherInclude="Mod/TechDraw/App/DrawViewPy.h"
    FatherNamespace="TechDraw">
    <Documentation>
      <Author Licence="LGPL" Name="WandererFan" EMail="wandererfan@gmail.com" />
      <UserDocu>Feature for creating and manipulating Technical Drawing Part Views</UserDocu>
    </Documentation>
    <Methode Name="getVisibleEdges">
      <Documentation>
        <UserDocu>getVisibleEdges() - get the visible edges in the View as Part::TopoShapeEdges</UserDocu>
      </Documentation>
    </Methode>
   <Methode Name="getHiddenEdges">
      <Documentation>
        <UserDocu>getHiddenEdges() - get the hidden edges in the View as Part::TopoShapeEdges</UserDocu>
      </Documentation>
    </Methode>
    <Methode Name="makeCosmeticVertex">
      <Documentation>
        <UserDocu>id = makeCosmeticVertex(p1) - add a CosmeticVertex at p1 (View coordinates). Returns unique id vertex.</UserDocu>
      </Documentation>
    </Methode>
    <Methode Name="makeCosmeticVertex3d">
      <Documentation>
        <UserDocu>id = makeCosmeticVertex3d(p1) - add a CosmeticVertex at p1 (3d model coordinates). Returns unique id vertex.</UserDocu>
      </Documentation>
    </Methode>
    <Methode Name="getCosmeticVertex">
      <Documentation>
        <UserDocu>cv = getCosmeticVertex(id) - returns CosmeticVertex with unique id.</UserDocu>
      </Documentation>
    </Methode>
    <Methode Name="getCosmeticVertexBySelection">
      <Documentation>
        <UserDocu>cv = getCosmeticVertexBySelection(name) - returns CosmeticVertex with name (Vertex6).  Used in selections.</UserDocu>
      </Documentation>
    </Methode>
    <Methode Name="replaceCosmeticVertex">
      <Documentation>
        <UserDocu>rc = replaceCosmeticVertex(cv) - replaces CosmeticVertex in View. Returns True/False.</UserDocu>
      </Documentation>
    </Methode>
    <Methode Name="removeCosmeticVertex">
      <Documentation>
        <UserDocu>removeCosmeticVertex(cv) - remove CosmeticVertex from View. Returns None.</UserDocu>
      </Documentation>
    </Methode>
    <Methode Name="clearCosmeticVertices">
      <Documentation>
        <UserDocu>clearCosmeticVertices() - remove all CosmeticVertices from the View. Returns None.</UserDocu>
      </Documentation>
    </Methode>
    <Methode Name="makeCosmeticLine">
      <Documentation>
        <UserDocu>tag = makeCosmeticLine(p1, p2) - add a CosmeticEdge from p1 to p2(View coordinates). Returns tag of new CosmeticEdge.</UserDocu>
      </Documentation>
    </Methode>
    <Methode Name="makeCosmeticLine3D">
      <Documentation>
        <UserDocu>tag = makeCosmeticLine3D(p1, p2) - add a CosmeticEdge from p1 to p2(3D coordinates). Returns tag of new CosmeticEdge.</UserDocu>
      </Documentation>
    </Methode>
    <Methode Name="makeCosmeticCircle">
      <Documentation>
        <UserDocu>tag = makeCosmeticCircle(center, radius) - add a CosmeticEdge at center with radius radius(View coordinates). Returns tag of new CosmeticEdge.</UserDocu>
      </Documentation>
    </Methode>
    <Methode Name="makeCosmeticCircleArc">
      <Documentation>
        <UserDocu>tag = makeCosmeticCircleArc(center, radius, start, end) - add a CosmeticEdge at center with radius radius(View coordinates) from start angle to end angle. Returns tag of new CosmeticEdge.</UserDocu>
      </Documentation>
    </Methode>
    <Methode Name="getCosmeticEdge">
      <Documentation>
        <UserDocu>ce = getCosmeticEdge(id) - returns CosmeticEdge with unique id.</UserDocu>
      </Documentation>
    </Methode>
    <Methode Name="getCosmeticEdgeBySelection">
      <Documentation>
        <UserDocu>ce = getCosmeticEdgeBySelection(name) - returns CosmeticEdge by name (Edge25).  Used in selections</UserDocu>
      </Documentation>
    </Methode>
    <Methode Name="replaceCosmeticEdge">
      <Documentation>
        <UserDocu>replaceCosmeticEdge(ce) - replaces CosmeticEdge ce in View. Returns True/False.</UserDocu>
      </Documentation>
    </Methode>
    <Methode Name="removeCosmeticEdge">
      <Documentation>
        <UserDocu>removeCosmeticEdge(ce) - remove CosmeticEdge ce from View. Returns None.</UserDocu>
      </Documentation>
    </Methode>
    <Methode Name="makeCenterLine">
      <Documentation>
        <UserDocu>makeCenterLine(subNames, mode) - draw a center line on this viewPart. SubNames is a list of n Faces, 2 Edges or 2 Vertices (ex [Face1,Face2,Face3]. Returns unique tag of added CenterLine.</UserDocu>
      </Documentation>
    </Methode>
    <Methode Name="getCenterLine">
      <Documentation>
        <UserDocu>cl = getCenterLine(id) - returns CenterLine with unique id.</UserDocu>
      </Documentation>
    </Methode>
    <Methode Name="getCenterLineBySelection">
      <Documentation>
        <UserDocu>cl = getCenterLineBySelection(name) - returns CenterLine by name (Edge25).  Used in selections</UserDocu>
      </Documentation>
    </Methode>
    <Methode Name="replaceCenterLine">
      <Documentation>
        <UserDocu>replaceCenterLine(cl) - replacls CenterLine cl in View. Returns True/False.</UserDocu>
      </Documentation>
    </Methode>
    <Methode Name="removeCenterLine">
      <Documentation>
        <UserDocu>removeCenterLine(cl) - remove CenterLine cl from View. Returns None.</UserDocu>
      </Documentation>
    </Methode>
    <Methode Name="clearCosmeticEdges">
      <Documentation>
        <UserDocu>clearCosmeticEdges() - remove all CosmeticLines from the View. Returns None.</UserDocu>
      </Documentation>
    </Methode>
    <Methode Name="clearCenterLines">
      <Documentation>
        <UserDocu>clearCenterLines() - remove all CenterLines from the View. Returns None.</UserDocu>
      </Documentation>
    </Methode>
    <Methode Name="clearGeomFormats">
      <Documentation>
        <UserDocu>clearGeomFormats() - remove all GeomFormats from the View. Returns None.</UserDocu>
      </Documentation>
    </Methode>
    <Methode Name="formatGeometricEdge">
      <Documentation>
        <UserDocu>formatGeometricEdge(index, style, weight, color, visible). Returns None.</UserDocu>
      </Documentation>
    </Methode>
    <Methode Name="getEdgeByIndex">
      <Documentation>
        <UserDocu>getEdgeByIndex(edgeIndex). Returns Part.TopoShape.</UserDocu>
      </Documentation>
    </Methode>
    <Methode Name="getEdgeBySelection">
      <Documentation>
        <UserDocu>getEdgeBySelection(edgeName). Returns Part.TopoShape.</UserDocu>
      </Documentation>
    </Methode>
    <Methode Name="getVertexByIndex">
      <Documentation>
        <UserDocu>getVertexByIndex(vertexIndex). Returns Part.TopoShape.</UserDocu>
      </Documentation>
    </Methode>
    <Methode Name="getVertexBySelection">
      <Documentation>
        <UserDocu>getVertexBySelection(vertexName). Returns Part.TopoShape.</UserDocu>
      </Documentation>
    </Methode>
    <Methode Name="requestPaint">
      <Documentation>
        <UserDocu>requestPaint(). Redraw the graphic for this View.</UserDocu>
      </Documentation>
    </Methode>
    <CustomAttributes />
  </PythonExport>
</GenerateModel>
