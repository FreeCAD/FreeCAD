##[pylyzer] failed /home/Ryan/documents/git/FreeCAD/src/Mod/Assembly/UtilsAssembly.py 1748993977 43804
.math: Never

.App: Never

.Part: Never


.Gui: Never

.___v_desugar_1: Never
.QtCore: Never
.QtGui: Never
.QtWidgets: Never


.translate: Never
.__title__: {"Assembly utilitary functions"}
.__author__: {"Ondsel"}
.__url__: {"https:..www.freecad.org"}
.activePartOrAssembly: () -> Never
.activeAssembly: () -> {None}
.activePart: () -> {None}
.isAssemblyCommandActive: () -> Bool
.isDocTemporary: |Type_300 <: Structural({.Temporary = Type_563}), Type_563: Type|(doc: Type_300) -> Type_563 or {False}
.assembly_has_at_least_n_parts: (n: Obj) -> Bool
.number_of_components_in: (assembly: {None}) -> Nat
.isLink: |Type_309 <: Structural({.ElementCount = E; .TypeId = Never}), E :> {0}|(obj: Type_309) -> Never
.isLinkGroup: |T <: Structural({.ElementCount = R and Type_700; .isDerivedFrom = (self: Obj, Type_605) -> Type_606 and (self: Obj, Type_611) -> R; .getLinkedObject = (self: Obj) -> Obj; .TypeId = E}), E :> {"App::Link"}, O <: Bool, Type_700 <: Structural({.__gt__ = (self: Never, R) -> Bool}), Type_605 :> {"Assembly::AssemblyObject", "Assembly::AssemblyLink"}, R :> {0}, R <: Nat, Type_606 <: Structural({.__or__ = (self: Never, R) -> O}), Type_611 :> {"Assembly::AssemblyLink"}, T <: Structural({.ElementCount = R and Type_700; .isDerivedFrom = (self: Obj, Type_605) -> Type_606 and (self: Obj, Type_611) -> R; .getLinkedObject = (self: Obj) -> T; .TypeId = E}), R: Type|(obj: T) -> {.obj.TypeId in {"App::Link"}} and {.obj.ElementCount in {Type_v_global_790: Nat | (Type_v_global_790 == 0 or (Type_v_global_790 >= 0) and (Type_v_global_790 != 0))}}
.getObject: |Type_315 <: Structural({.__len__ = (self: Never) -> Nat; .__getitem__ = (self: Obj, Type_728) -> Type_729 and (self: Obj, Type_743) -> Type_744}), Type_729 <: Structural({.__len__ = (self: Never) -> Nat}), Type_728 :> {0, 1}, Type_744: Type, Type_743 :> {0}|(ref: Type_315) -> {None}
.process_body: |E: Type, Type_318: Type, Type_317 <: Structural({.OutList = Type_959}), Type_959 <: global::Iterable(T), T <: Structural({.Name = E and E})|(body: Type_317, returnObj: Type_318, names: Structural({.__len__ = (self: Never) -> Nat; .__getitem__ = (self: Obj, Obj) -> E and (self: Obj, Obj) -> E}), i: Nat) -> Type_318
.isBodySubObject: (obj: Obj) -> Never
.fixBodyExtraFeatureInSub: (doc_name: Obj, sub_name: Str) -> Str
.getObjectInPart: |E: Type, T <: Structural({.Name = E}), Type_1127 <: global::Iterable(T), E :> {"App::Link"}, Type_1115: Type, Type_1105 <: Structural({.getLinkedObject = (self: Obj) -> Type_1105; .Name = E; .OutListRecursive = Type_1127; .TypeId = E and Type_1115}), Type_1105 <: Structural({.getLinkedObject = (self: Obj) -> Obj; .Name = E; .OutListRecursive = Type_1127; .TypeId = E and Type_1115})|(objName: E, part: Type_1105) -> {None}
.getRootPath: |Self <: global::Indexable(K, Obj), Type_332 <: Structural({.Parents = Type_1150; .Tip = Type_1227; .TypeId = E}), Type_1227: Type, Type_1150 <: global::Iterable(Self), E :> {"PartDesign::Body"}, K :> {0, 1}|(obj: Type_332, part: Structural({.Name = Obj; .Document = Obj})) -> global::Tuple([{None}, {""}])
.getObjPlcRelativeToPart: |Type_7017 <: Structural({.Name = Type_7239; .Document = Type_7328}), Type_7328: Type, Type_7239: Type|(assembly: Type_7017, ref: Structural({.__len__ = (self: Never) -> Nat; .__getitem__ = (self: Obj, Obj) -> Never and (self: Obj, Obj) -> Structural({.__len__ = (self: Never) -> Nat})})) -> Never
.getJcsPlcRelativeToPart: (assembly: Obj, jcsPlc: Obj, ref: Obj) -> Never
.getJcsGlobalPlc: (jcsPlc: Obj, ref: Obj) -> Never
.getGlobalPlacement: |Type_729 <: Structural({.__len__ = (self: Never) -> Nat}), Type_6180 <: Structural({.__len__ = (self: Never) -> Nat; .__getitem__ = (self: Obj, Type_743) -> Type_744 and (self: Obj, Type_728) -> Type_729}), Type_744: Type, Type_728 :> {0, 1}, Type_475 :> {None}, Type_743 :> {0}|(ref: Type_6180, targetObj: Type_475 := Type_475 and Type_475) -> Structural({.__mul__ = (self: Never, Obj) -> Never})
.isThereOneRootAssembly: () -> {False}
.getElementName: (full_name: Str) -> Str
.getObjsNamesAndElement: |T :> Str|(obj_name: T, sub_name: Str) -> global::Tuple([global::List!(T, _: Nat), T])
.getFullObjName: (obj_name: Str, sub_name: Str) -> Str
.getFullElementName: |O <: Structural({.__add__ = (self: Never, R) -> O}), R :> {"."}, R: Type, Type_361 <: Structural({.__add__ = (self: Never, R) -> O}), O: Type|(obj_name: Type_361, sub_name: R) -> O
.extract_type_and_number: (element_name: global::Iterable(Str)) -> Never
.findElementClosestVertex: (ref: global::Indexable(Obj, global::Indexable(Obj, Str)), mousePos: Obj) -> {""}
.getPointsFromVertexes: (vertexes: global::Iterable(Structural({.Point = Never}))) -> Never
.findClosestPointToMousePos: |R: Type, Type_372 <: Structural({.__sub__ = (self: Never, R) -> O}), O: Type|(candidates_points: global::Iterable(R), mousePos: Type_372) -> global::Tuple([{None}, {None}])
.findVertexNameInObject: |Type_374 <: Structural({.Point = E}), E: Type|(vertex: Type_374, obj: Structural({.Shape = Obj})) -> {""}
.color_from_unsigned: |R :> {8}, R :> {24}, Type_377 <: Structural({.__rshift__ = (self: Never, R) -> O and (self: Never, R) -> O and (self: Never, R) -> O}), O: Type, R :> {16}, O <: Structural({.__and__ = (self: Never, R) -> O}), O <: Structural({.__and__ = (self: Never, R) -> O}), O <: Structural({.__and__ = (self: Never, R) -> O}), R :> {255}|(c: Type_377) -> global::List!(Float, 3)
.getJointsOfType: |Type_2612 <: Structural({.__or__ = (self: Never, R) -> B}), B <: Bool, Type_379 <: Structural({.isDerivedFrom = (self: Obj, Type_2611) -> Type_2612 and (self: Obj, Type_2616) -> R; .Joints = Type_2632}), T <: Structural({.JointType = R}), Type_2616 :> {"Assembly::AssemblyLink"}, Type_2611 :> {"Assembly::AssemblyLink", "Assembly::AssemblyObject"}, R: Type, Type_2632 <: global::Iterable(T)|(asm: Type_379, jointTypes: Structural({.__contains__ = (self: Never, R) -> Bool})) -> global::List!(T, 1)
.getBomGroup: |Type_2678 :> {"Assembly::BomGroup"}, Type_2665 <: global::Iterable(T), Type_382 <: Structural({.OutList = Type_2665; .newObject = (self: Obj, Type_2678, Type_2679) -> Type_2680}), Type_2680 <: {None}, E :> {"Assembly::BomGroup"}, T <: Structural({.TypeId = E}), Type_2679 :> {"Bills of Materials"}|(assembly: Type_382) -> {None}
.getJointGroup: |Type_2713 :> {"Assembly::JointGroup"}, E :> {"Assembly::JointGroup"}, Type_2714 :> {"Joints"}, Type_2700 <: global::Iterable(T), Type_2715 <: {None}, T <: Structural({.TypeId = E}), Type_384 <: Structural({.OutList = Type_2700; .newObject = (self: Obj, Type_2713, Type_2714) -> Type_2715})|(assembly: Type_384) -> {None}
.getViewGroup: |Type_386 <: Structural({.OutList = Type_2735; .newObject = (self: Obj, Type_2748, Type_2749) -> Type_2750}), Type_2748 :> {"Assembly::ViewGroup"}, Type_2749 :> {"Exploded Views"}, Type_2735 <: global::Iterable(T), Type_2750 <: {None}, E :> {"Assembly::ViewGroup"}, T <: Structural({.TypeId = E})|(assembly: Type_386) -> {None}
.getSimulationGroup: |T <: Structural({.TypeId = E}), E :> {"Assembly::SimulationGroup"}, Type_388 <: Structural({.OutList = Type_2770; .newObject = (self: Obj, Type_2783, Type_2784) -> Type_2785}), Type_2784 :> {"Simulations"}, Type_2770 <: global::Iterable(T), Type_2783 :> {"Assembly::SimulationGroup"}, Type_2785 <: {None}|(assembly: Type_388) -> {None}
.isAssemblyGrounded: () -> {False}
.removeObjAndChilds: (obj: Obj) -> NoneType
.removeObjsAndChilds: (objs: global::Iterable(Structural({.OutList = global::Iterable(Never); .TypeId = {_: Never | True}}))) -> NoneType
.getMovablePartsWithin: |Type_2942 <: global::List!(Type_2988, 0), Type_606 <: Structural({.__or__ = (self: Never, R) -> O}), E :> {"App::Link"}, R <: Nat, Type_611 :> {"Assembly::AssemblyLink"}, Type_2994 :> {"Part::Feature", "App::Part"}, Type_3003 :> {"App::Part"}, Type_3134: Type, Type_700 <: Structural({.__gt__ = (self: Never, R) -> Bool}), T <: Structural({.ElementCount = R and Type_700; .isDerivedFrom = (self: Obj, Type_605) -> Type_606 and (self: Obj, Type_611) -> R; .getLinkedObject = (self: Obj) -> Obj; .TypeId = E; .ElementList = Type_2942}), O <: Bool, T: Type, Type_605 :> {"Assembly::AssemblyObject", "Assembly::AssemblyLink"}, Type_3004 <: Bool, Type_2988 <: Structural({.getLinkedObject = (self: Obj) -> Type_3134; .isDerivedFrom = (self: Obj, Type_2994) -> Type_2995 and (self: Obj, Type_3003) -> Type_3004; .TypeId = E}), Type_2995 <: Bool, T <: Structural({.ElementCount = R and Type_700; .isDerivedFrom = (self: Obj, Type_605) -> Type_606 and (self: Obj, Type_611) -> R; .getLinkedObject = (self: Obj) -> T; .TypeId = E; .ElementList = Type_2942}), E :> {"App::DocumentObjectGroup"}|(group: T, partsAsSolid: Bool := {False} and Bool) -> global::List(T, _: Nat)
.getSubMovingParts: |Type_3134: Type, E :> {"App::DocumentObjectGroup"}, Type_2988 <: Structural({.getLinkedObject = (self: Obj) -> Type_3134; .isDerivedFrom = (self: Obj, Type_2994) -> Type_2995 and (self: Obj, Type_3003) -> Type_3004; .TypeId = E}), Type_2994 :> {"Part::Feature", "App::Part"}, Type_2995 <: Bool, Type_3003 :> {"App::Part"}, Type_3004 <: Bool|(obj: Type_2988, partsAsSolid: Bool) -> global::List!(Never, 0)
.getCenterOfMass: (parts: global::Iterable(Never)) -> Never
.getObjMassAndCom: (obj: Obj, containingPart: {None} := {None} and {None}) -> global::Tuple([{0}, Never])
.getCenterOfBoundingBox: (objs: global::Iterable(NoneType), refs: global::Iterable(Structural({.__len__ = (self: Never) -> Nat; .__getitem__ = (self: Obj, Obj) -> Never and (self: Obj, Obj) -> Structural({.__len__ = (self: Never) -> Nat})}))) -> Never
.findCylindersIntersection: |E: Type, E :> Nat, Type_4021: Type, R :> {1}, R: Type, Type_409 <: Structural({.Shape = Type_4021})|(obj: Type_409, surface: Structural({.Center = Structural({.__add__ = (self: Never, R) -> Never}); .Axis = R}), edge: Structural({.CenterOfGravity = E}), elt_index: Structural({.__sub__ = (self: Never, R) -> E})) -> Never
.openEditingPlacementDialog: (obj: Obj, propName: Str) -> NoneType
.setPickableState: |Type_416 <: Structural({.ViewObject = Type_4451}), Type_4451: Type|(obj: Type_416, state: Bool) -> NoneType
.setJointsPickableState: |T <: Structural({.TypeId = E}), E :> {"App::FeaturePython"}, Type_4506 <: global::Iterable(T), Type_417 <: Structural({.Objects = Type_4506})|(doc: Type_417, state: Bool) -> NoneType
.applyOffsetToPlacement: |Type_418 <: Structural({.Base = O and Type_4567; .Rotation = Type_4568}), O: Type, Type_4567 <: Structural({.__add__ = (self: Never, R) -> O}), Type_4568: Type, R: Type|(plc: Type_418, offset: Obj) -> Type_418
.applyRotationToPlacement: |Type_427: Type|(plc: Type_427, angle: Obj) -> Type_427
.applyRotationToPlacementAlongAxis: |Type_427: Type|(plc: Type_427, angle: Obj, axis: Obj) -> Type_427
.flipPlacement: |Type_427: Type|(plc: Type_427) -> Type_427
.arePlacementSameDir: |Type_430 <: Structural({.Rotation = Type_4666}), Type_4666: Type|(plc1: Type_430, plc2: Structural({.Rotation = Obj})) -> {.zAxis1.dot(.zAxis2) in {Type_v_global_2338: Nat | (Type_v_global_2338 == 0 or (Type_v_global_2338 >= 0) and (Type_v_global_2338 != 0))}}
.arePlacementZParallel: |Type_434 <: Structural({.Rotation = Type_4698}), Type_4698: Type|(plc1: Type_434, plc2: Structural({.Rotation = Obj})) -> {.zAxis1.cross(.zAxis2).Length in {Type_v_global_2348: Float | (Type_v_global_2348 == 0.000001 or (Type_v_global_2348 <= 0.000001) and (Type_v_global_2348 != 0.000001))}}
.removeTNPFromSubname: (doc_name: Obj, obj_name: Obj, sub_name: Str) -> Str

.findPlacement: |Type_315 <: Structural({.__len__ = (self: Never) -> Nat; .__getitem__ = (self: Obj, Type_743) -> Type_744 and (self: Obj, Type_728) -> Type_729}), Type_729 <: Structural({.__len__ = (self: Never) -> Nat}), Type_744: Type, Type_728 :> {0, 1}, Type_743 :> {0}|(ref: Type_315, ignoreVertex: Bool := {False} and Bool) -> Never
.get_element: |E: Type, Type_448 :> Str, Type_6143 <: Structural({.getElement = (self: Obj, Type_448) -> Type_6143; .CenterOfGravity = E}), Type_6143 <: Structural({.getElement = (self: Obj, Type_448) -> Obj; .CenterOfGravity = E}), Type_6143 <: Structural({.getElement = (self: Never, Type_448) -> Type_6143; .CenterOfGravity = E}), Type_6143 <: Structural({.getElement = (self: Never, Type_448) -> Never; .CenterOfGravity = E})|(shape: Type_6143, name: Type_448) -> Type_6143
.isRefValid: |Type_729 <: Structural({.__len__ = (self: Never) -> Nat}), Type_6180 <: Structural({.__len__ = (self: Never) -> Nat; .__getitem__ = (self: Obj, Type_743) -> Type_744 and (self: Obj, Type_728) -> Type_729}), Type_744: Type, Type_728 :> {0, 1}, Type_743 :> {0}|(ref: Type_6180, number_sub: {1, 2}) -> {True}
.round_vector: |Type_6256 <: Float, Type_454 :> {10}, Type_453 <: Structural({.x = Type_6254; .z = Type_6256; .y = Type_6255}), Type_6255 <: Float, Type_6254 <: Float|(v: Type_453, decimals: Type_454 := Type_454 and Type_454) -> Never
.saveAssemblyPartsPlacements: |E :> {"App::Link"}, T <: Structural({.ElementCount = R and Type_700; .isDerivedFrom = (self: Obj, Type_605) -> Type_606 and (self: Obj, Type_611) -> R; .getLinkedObject = (self: Obj) -> Obj; .TypeId = E; .ElementList = Type_2942}), Type_606 <: Structural({.__or__ = (self: Never, R) -> O}), R <: Nat, Type_2942 <: global::List!(Type_2988, 0), T <: Structural({.ElementCount = R and Type_700; .isDerivedFrom = (self: Obj, Type_605) -> Type_606 and (self: Obj, Type_611) -> R; .getLinkedObject = (self: Obj) -> T; .TypeId = E; .ElementList = Type_2942}), Type_611 :> {"Assembly::AssemblyLink"}, Type_2988 <: Structural({.getLinkedObject = (self: Obj) -> Type_3134; .isDerivedFrom = (self: Obj, Type_2994) -> Type_2995 and (self: Obj, Type_3003) -> Type_3004; .TypeId = E}), Type_2994 :> {"Part::Feature", "App::Part"}, Type_3003 :> {"App::Part"}, Type_3134: Type, O <: Bool, Type_605 :> {"Assembly::AssemblyObject", "Assembly::AssemblyLink"}, Type_3004 <: Bool, Type_700 <: Structural({.__gt__ = (self: Never, R) -> Bool}), Type_2995 <: Bool|(assembly: T) -> global::Dict!({Never: Never})
.restoreAssemblyPartsPlacements: |E :> {"App::Link"}, Type_2988 <: Structural({.getLinkedObject = (self: Obj) -> Type_3134; .isDerivedFrom = (self: Obj, Type_2994) -> Type_2995 and (self: Obj, Type_3003) -> Type_3004; .TypeId = E}), R <: Nat, Type_611 :> {"Assembly::AssemblyLink"}, Type_606 <: Structural({.__or__ = (self: Never, R) -> O}), Type_2994 :> {"Part::Feature", "App::Part"}, Type_3003 :> {"App::Part"}, Type_3134: Type, T <: Structural({.ElementCount = R and Type_700; .isDerivedFrom = (self: Obj, Type_605) -> Type_606 and (self: Obj, Type_611) -> R; .getLinkedObject = (self: Obj) -> Obj; .TypeId = E; .ElementList = Type_2942}), O <: Bool, Type_605 :> {"Assembly::AssemblyObject", "Assembly::AssemblyLink"}, Type_700 <: Structural({.__gt__ = (self: Never, R) -> Bool}), Type_2942 <: global::List!(Type_2988, 0), Type_3004 <: Bool, Type_2995 <: Bool, R: Type, T <: Structural({.ElementCount = R and Type_700; .isDerivedFrom = (self: Obj, Type_605) -> Type_606 and (self: Obj, Type_611) -> R; .getLinkedObject = (self: Obj) -> T; .TypeId = E; .ElementList = Type_2942})|(assembly: T, initialPlcs: Structural({.__contains__ = (self: Never, R) -> Bool; .__getitem__ = (self: Obj, Obj) -> Never})) -> NoneType
.getComAndSize: |Type_6659: Type, Type_462 <: Structural({.ViewObject = Type_6641 and Type_6659}), Type_6641: Type|(assembly: Type_462) -> global::Tuple([Never, Never])
.getAssemblyShapes: |Type_700 <: Structural({.__gt__ = (self: Never, R) -> Bool}), E :> {"App::Link"}, T <: Structural({.ElementCount = R and Type_700; .isDerivedFrom = (self: Obj, Type_605) -> Type_606 and (self: Obj, Type_611) -> R; .getLinkedObject = (self: Obj) -> T; .TypeId = E; .ElementList = Type_2942}), Type_2942 <: global::List!(Type_2988, 0), R <: Nat, Type_611 :> {"Assembly::AssemblyLink"}, Type_2994 :> {"Part::Feature", "App::Part"}, Type_3003 :> {"App::Part"}, Type_3134: Type, O <: Bool, Type_2988 <: Structural({.getLinkedObject = (self: Obj) -> Type_3134; .isDerivedFrom = (self: Obj, Type_2994) -> Type_2995 and (self: Obj, Type_3003) -> Type_3004; .TypeId = E}), Type_605 :> {"Assembly::AssemblyObject", "Assembly::AssemblyLink"}, T: Type, Type_3004 <: Bool, Type_606 <: Structural({.__or__ = (self: Never, R) -> O}), T <: Structural({.ElementCount = R and Type_700; .isDerivedFrom = (self: Obj, Type_605) -> Type_606 and (self: Obj, Type_611) -> R; .getLinkedObject = (self: Obj) -> Obj; .TypeId = E; .ElementList = Type_2942}), Type_2995 <: Bool|(assembly: T) -> global::List!(T, 1)
.getJointDistance: |Type_337: Type, R: Type, Type_467 <: Structural({.Placement2 = R; .Reference1 = Type_337; .Placement1 = R; .Reference2 = Type_337})|(joint: Type_467) -> Int
.getJointXYAngle: |Type_469 <: Structural({.Placement2 = R; .Reference1 = Type_337; .Placement1 = R; .Reference2 = Type_337}), Type_337: Type, R: Type|(joint: Type_469) -> Never
.getMovingPart: |Type_7017 <: Structural({.Name = Type_7239; .Document = Type_7328}), Type_7328: Type, Type_7239: Type|(assembly: Type_7017, ref: Structural({.__len__ = (self: Never) -> Nat; .__getitem__ = (self: Obj, Obj) -> Never and (self: Obj, Obj) -> Structural({.__len__ = (self: Never) -> Nat})})) -> {None}
.truncateSubAtFirst: (sub: Str, target: Obj) -> Str
.truncateSubAtLast: (sub: Str, target: Obj) -> Str
.swapElNameInSubname: (sub_name: Str, new_elName: Obj) -> Str
.addVertexToReference: |T: Type, Type_485 :> global::List!(T or T, 2), Type_485 <: Structural({.__len__ = (self: Never) -> Nat; .__getitem__ = (self: Never, Type_7797) -> T and (self: Never, Type_7846) -> T}), Type_7797 :> {0, 1}, Type_7797 <: Int, Type_485 :> global::List!(T or T, 2), Type_485 <: Structural({.__len__ = (self: Never) -> Nat; .__getitem__ = (self: Obj, Type_7797) -> T and (self: Obj, Type_7846) -> T}), T <: Structural({.__len__ = (self: Never) -> Nat}), Type_7846 :> {0}, Type_7846 <: Int|(ref: Type_485, vertex_name: Obj) -> Type_485
.createPart: (partName: Obj, doc: Bool) -> global::Tuple([Never, Never])
.getLinkGroup: |R <: Structural({.InList = Obj; .TypeId = E}), Type_8095 <: global::Iterable(T), E :> {"App::Link"}, E :> {"App::LinkElement"}, R <: Structural({.InList = Type_8095; .TypeId = E}), T <: Structural({.ElementList = Type_8129; .TypeId = E}), Type_8129 <: Structural({.__contains__ = (self: Never, R) -> Bool})|(linkElement: R) -> {None}
.getParentPlacementIfNeeded: |R <: Structural({.InList = Type_8095; .TypeId = Never}), R <: Structural({.InList = Obj; .TypeId = Never}), Type_8095 <: global::Iterable(T), T <: Structural({.ElementList = Type_8129; .TypeId = E}), Type_8129 <: Structural({.__contains__ = (self: Never, R) -> Bool}), E :> {"App::Link"}|(part: R) -> Never
.generatePropertySettings: |K :> {1, 0}, Type_495 <: Structural({.getTypeIdOfProperty = (self: Obj, T) -> {"App::PropertyFloat"}; .getPropertyByName = (self: Obj, T) -> Self; .PropertiesList = Type_8261}), T: Type, Type_8261 <: global::Iterable(T), V: Type, Self <: global::Indexable(K, V)|(documentObject: Type_495) -> Str
