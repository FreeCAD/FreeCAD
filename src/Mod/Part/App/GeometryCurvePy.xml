<?xml version="1.0" encoding="UTF-8"?>
<GenerateModel xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="generateMetaModel_Module.xsd">
	<PythonExport
		Father="GeometryPy"
		Name="GeometryCurvePy"
		Twin="GeomCurve"
		TwinPointer="GeomCurve"
		Include="Mod/Part/App/Geometry.h"
		Namespace="Part"
		FatherInclude="Mod/Part/App/GeometryPy.h"
		FatherNamespace="Part"
		Constructor="true">
		<Documentation>
			<Author Licence="LGPL" Name="Werner Mayer" EMail="wmayer@users.sourceforge.net" />
			<UserDocu>
				The abstract class GeometryCurve is the root class of all curve objects.
			</UserDocu>
		</Documentation>
		<Methode Name="toShape" Const="true">
			<Documentation>
				<UserDocu>Return the shape for the geometry.</UserDocu>
			</Documentation>
		</Methode>
		<Methode Name="discretize">
			<Documentation>
				<UserDocu>Discretizes the curve using a given deflection or number of points and returns a list of points</UserDocu>
			</Documentation>
		</Methode>
		<Methode Name="length">
			<Documentation>
				<UserDocu>Computes the length of a curve
length([uMin,uMax,Tol]) -> Float</UserDocu>
			</Documentation>
		</Methode>
		<Methode Name="value">
			<Documentation>
				<UserDocu>Computes the point of parameter u on this curve</UserDocu>
			</Documentation>
		</Methode>
		<Methode Name="tangent">
			<Documentation>
				<UserDocu>Computes the tangent of parameter u on this curve</UserDocu>
			</Documentation>
		</Methode>
		<Methode Name="makeRuledSurface">
			<Documentation>
				<UserDocu>Make a ruled surface of this and the given curves</UserDocu>
			</Documentation>
		</Methode>
		<Methode Name="intersect2d">
			<Documentation>
				<UserDocu>Get intersection points with another curve lying on a plane.</UserDocu>
			</Documentation>
		</Methode>
		<Methode Name="parameter">
			<Documentation>
				<UserDocu>Returns the parameter on the curve
of the nearest orthogonal projection of the point.</UserDocu>
			</Documentation>
		</Methode>
		<Methode Name="toBSpline">
			<Documentation>
				<UserDocu>
					Converts a curve of any type (only part from First to Last)
					toBSpline([Float=First, Float=Last]) -> B-Spline curve
				</UserDocu>
			</Documentation>
		</Methode>
		<Methode Name="approximateBSpline">
			<Documentation>
				<UserDocu>
					Approximates a curve of any type to a B-Spline curve
					approximateBSpline(Tolerance, MaxSegments, MaxDegree, [Order='C2']) -> B-Spline curve
				</UserDocu>
			</Documentation>
		</Methode>
		<Attribute Name="Continuity" ReadOnly="true">
			<Documentation>
				<UserDocu>
					Returns the global continuity of the curve.
				</UserDocu>
			</Documentation>
			<Parameter Name="Continuity" Type="String"/>
		</Attribute>
		<Attribute Name="FirstParameter" ReadOnly="true">
			<Documentation>
				<UserDocu>
					Returns the value of the first parameter.
				</UserDocu>
			</Documentation>
			<Parameter Name="FirstParameter" Type="Float"/>
		</Attribute>
		<Attribute Name="LastParameter" ReadOnly="true">
			<Documentation>
				<UserDocu>
					Returns the value of the last parameter.
				</UserDocu>
			</Documentation>
			<Parameter Name="LastParameter" Type="Float"/>
		</Attribute>
	</PythonExport>
</GenerateModel>
