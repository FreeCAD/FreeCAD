
// This file is generated by src/Tools/generateTemaplates/templateClassPyExport.py out of the XML file
// Every change you make here get lost at the next full rebuild!
#ifndef PART_TOPOSHAPEFACEPY_H
#define PART_TOPOSHAPEFACEPY_H

#include <Mod/Part/App/TopoShapePy.h>
#include <Mod/Part/App/TopoShape.h>
#include <string>

namespace Part
{

//===========================================================================
// TopoShapeFacePy - Python wrapper
//===========================================================================

/** The python export class for TopoShape
 */
class PartExport TopoShapeFacePy : public Part::TopoShapePy
{
public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyGetSetDef    GetterSetter[];
    virtual PyTypeObject *GetType(void) {return &Type;};

public:
    TopoShapeFacePy(TopoShape *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(struct _typeobject *, PyObject *, PyObject *);
    virtual int PyInit(PyObject* args, PyObject*k);
    ~TopoShapeFacePy();

    typedef TopoShape* PointerType ;

    virtual PyObject *_repr(void);        // the representation
    std::string representation(void) const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    /// callback for the makeOffset() method
    static PyObject * staticCallback_makeOffset (PyObject *self, PyObject *args);
    /// implementer for the makeOffset() method
    PyObject*  makeOffset(PyObject *args);
    /// callback for the tangentAt() method
    static PyObject * staticCallback_tangentAt (PyObject *self, PyObject *args);
    /// implementer for the tangentAt() method
    PyObject*  tangentAt(PyObject *args);
    /// callback for the valueAt() method
    static PyObject * staticCallback_valueAt (PyObject *self, PyObject *args);
    /// implementer for the valueAt() method
    PyObject*  valueAt(PyObject *args);
    /// callback for the normalAt() method
    static PyObject * staticCallback_normalAt (PyObject *self, PyObject *args);
    /// implementer for the normalAt() method
    PyObject*  normalAt(PyObject *args);
    /// callback for the derivative1At() method
    static PyObject * staticCallback_derivative1At (PyObject *self, PyObject *args);
    /// implementer for the derivative1At() method
    PyObject*  derivative1At(PyObject *args);
    /// callback for the derivative2At() method
    static PyObject * staticCallback_derivative2At (PyObject *self, PyObject *args);
    /// implementer for the derivative2At() method
    PyObject*  derivative2At(PyObject *args);
    /// callback for the curvatureAt() method
    static PyObject * staticCallback_curvatureAt (PyObject *self, PyObject *args);
    /// implementer for the curvatureAt() method
    PyObject*  curvatureAt(PyObject *args);
    /// callback for the isPartOfDomain() method
    static PyObject * staticCallback_isPartOfDomain (PyObject *self, PyObject *args);
    /// implementer for the isPartOfDomain() method
    PyObject*  isPartOfDomain(PyObject *args);
    /// callback for the makeHalfSpace() method
    static PyObject * staticCallback_makeHalfSpace (PyObject *self, PyObject *args);
    /// implementer for the makeHalfSpace() method
    PyObject*  makeHalfSpace(PyObject *args);
    /// callback for the validate() method
    static PyObject * staticCallback_validate (PyObject *self, PyObject *args);
    /// implementer for the validate() method
    PyObject*  validate(PyObject *args);
    /// callback for the setTolerance() method
    static PyObject * staticCallback_setTolerance (PyObject *self, PyObject *args);
    /// implementer for the setTolerance() method
    PyObject*  setTolerance(PyObject *args);
    //@}


    /** @name callbacks and implementers for the python object attributes */
    //@{
    ///getter callback for the Tolerance attribute
    static PyObject * staticCallback_getTolerance (PyObject *self, void *closure);
    /// getter for the Tolerance attribute
    Py::Float getTolerance(void) const;
    /// setter callback for the Tolerance attribute
    static int staticCallback_setTolerance (PyObject *self, PyObject *value, void *closure);
    /// setter for the Tolerance attribute
    void setTolerance(Py::Float arg);
    ///getter callback for the ParameterRange attribute
    static PyObject * staticCallback_getParameterRange (PyObject *self, void *closure);
    /// getter for the ParameterRange attribute
    Py::Tuple getParameterRange(void) const;
    /// setter callback for the ParameterRange attribute
    static int staticCallback_setParameterRange (PyObject *self, PyObject *value, void *closure);
    // no setter method,  ParameterRange is read only!
    ///getter callback for the Surface attribute
    static PyObject * staticCallback_getSurface (PyObject *self, void *closure);
    /// getter for the Surface attribute
    Py::Object getSurface(void) const;
    /// setter callback for the Surface attribute
    static int staticCallback_setSurface (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Surface is read only!
    ///getter callback for the Wire attribute
    static PyObject * staticCallback_getWire (PyObject *self, void *closure);
    /// getter for the Wire attribute
    Py::Object getWire(void) const;
    /// setter callback for the Wire attribute
    static int staticCallback_setWire (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Wire is read only!
    ///getter callback for the OuterWire attribute
    static PyObject * staticCallback_getOuterWire (PyObject *self, void *closure);
    /// getter for the OuterWire attribute
    Py::Object getOuterWire(void) const;
    /// setter callback for the OuterWire attribute
    static int staticCallback_setOuterWire (PyObject *self, PyObject *value, void *closure);
    // no setter method,  OuterWire is read only!
    ///getter callback for the Mass attribute
    static PyObject * staticCallback_getMass (PyObject *self, void *closure);
    /// getter for the Mass attribute
    Py::Object getMass(void) const;
    /// setter callback for the Mass attribute
    static int staticCallback_setMass (PyObject *self, PyObject *value, void *closure);
    // no setter method,  Mass is read only!
    ///getter callback for the CenterOfMass attribute
    static PyObject * staticCallback_getCenterOfMass (PyObject *self, void *closure);
    /// getter for the CenterOfMass attribute
    Py::Object getCenterOfMass(void) const;
    /// setter callback for the CenterOfMass attribute
    static int staticCallback_setCenterOfMass (PyObject *self, PyObject *value, void *closure);
    // no setter method,  CenterOfMass is read only!
    ///getter callback for the MatrixOfInertia attribute
    static PyObject * staticCallback_getMatrixOfInertia (PyObject *self, void *closure);
    /// getter for the MatrixOfInertia attribute
    Py::Object getMatrixOfInertia(void) const;
    /// setter callback for the MatrixOfInertia attribute
    static int staticCallback_setMatrixOfInertia (PyObject *self, PyObject *value, void *closure);
    // no setter method,  MatrixOfInertia is read only!
    ///getter callback for the StaticMoments attribute
    static PyObject * staticCallback_getStaticMoments (PyObject *self, void *closure);
    /// getter for the StaticMoments attribute
    Py::Object getStaticMoments(void) const;
    /// setter callback for the StaticMoments attribute
    static int staticCallback_setStaticMoments (PyObject *self, PyObject *value, void *closure);
    // no setter method,  StaticMoments is read only!
    ///getter callback for the PrincipalProperties attribute
    static PyObject * staticCallback_getPrincipalProperties (PyObject *self, void *closure);
    /// getter for the PrincipalProperties attribute
    Py::Dict getPrincipalProperties(void) const;
    /// setter callback for the PrincipalProperties attribute
    static int staticCallback_setPrincipalProperties (PyObject *self, PyObject *value, void *closure);
    // no setter method,  PrincipalProperties is read only!
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(char *attr);              // __getattr__ function
    int _setattr(char *attr, PyObject *value);        // __setattr__ function

    /// getter for the object handled by this class
    TopoShape *getTopoShapePtr(void) const;

    /** @name additional declarations and methods for the wrapper class */
    //@{

    //@}
};

}  //namespace Part

#endif  // PART_TOPOSHAPEFACEPY_H


