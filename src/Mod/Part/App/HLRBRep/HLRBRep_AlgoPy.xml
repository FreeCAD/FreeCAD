<?xml version="1.0" encoding="utf-8"?>
<GenerateModel xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="generateMetaModel_Module.xsd">
    <PythonExport
      Father="PyObjectBase"
      Name="HLRBRep_AlgoPy"
      PythonName="Part.HLRBRep_Algo"
      Twin="HLRBRep_Algo"
      TwinPointer="HLRBRep_Algo"
      Include="HLRBRep_Algo.hxx"
      Namespace="Part"
      FatherInclude="Base/PyObjectBase.h"
      FatherNamespace="Base"
      Constructor="true"
      Delete="false">
    <Documentation>
          <Author Licence="LGPL" Name="Werner Mayer" EMail="wmayer[at]users.sourceforge.net" />
          <UserDocu>Describes functions to use HLR algorithm.</UserDocu>
    </Documentation>
    <Methode Name="add">
        <Documentation>
            <UserDocu>Adds the shape S to this framework, and
  specifies the number of isoparameters nbiso desired in visualizing S.
  You may add as many shapes as you wish. Use the function Add once for each shape.
            </UserDocu>
        </Documentation>
    </Methode>
    <Methode Name="remove">
        <Documentation>
            <UserDocu>Remove the shape S from this framework.</UserDocu>
        </Documentation>
    </Methode>
    <Methode Name="index">
        <Documentation>
            <UserDocu>return  the index  of  the  Shape <S>  and
  return 0 if the Shape <S> is not found.</UserDocu>
        </Documentation>
    </Methode>
    <Methode Name="outLinedShapeNullify">
        <Documentation>
            <UserDocu> Nullify all the results of OutLiner from HLRTopoBRep.
            </UserDocu>
        </Documentation>
    </Methode>
    <Methode Name="setProjector" Keyword="true">
        <Documentation>
            <UserDocu>set the projector.
            </UserDocu>
        </Documentation>
    </Methode>
    <Methode Name="nbShapes">
        <Documentation>
            <UserDocu>This function is a const member function that returns the number of shapes in the collection.
                It does not modify the object's state and is used to retrieve the count of shapes.
            </UserDocu>
        </Documentation>
    </Methode>
    <Methode Name="showAll">
        <Documentation>
            <UserDocu> set to visible all the edges.
            </UserDocu>
        </Documentation>
    </Methode>
    <Methode Name="hide">
        <Documentation>
            <UserDocu>hide the Shape <S> by itself.
            </UserDocu>
        </Documentation>
    </Methode>
    <Methode Name="hideAll">
        <Documentation>
            <UserDocu>set to  hide all the  edges of the  Shape <S>.
            </UserDocu>
        </Documentation>
    </Methode>
    <Methode Name="partialHide">
        <Documentation>
            <UserDocu>own hiding  of all the shapes of the DataStructure
  without hiding by each other.
            </UserDocu>
        </Documentation>
    </Methode>
    <Methode Name="select">
        <Documentation>
            <UserDocu>select all the DataStructure.
            </UserDocu>
        </Documentation>
    </Methode>
    <Methode Name="selectEdge">
        <Documentation>
            <UserDocu>select only the edges of the Shape <S>
            </UserDocu>
        </Documentation>
    </Methode>
    <Methode Name="selectFace">
        <Documentation>
            <UserDocu>select only the faces of the Shape <S>.
            </UserDocu>
        </Documentation>
    </Methode>
    <Methode Name="initEdgeStatus">
        <Documentation>
            <UserDocu>init the status of the selected edges depending of
  the back faces of a closed shell.
            </UserDocu>
        </Documentation>
    </Methode>
    <Methode Name="update">
        <Documentation>
            <UserDocu>update the DataStructure.
            </UserDocu>
        </Documentation>
    </Methode>
    <ClassDeclarations>
private:
    Handle(HLRBRep_Algo) hAlgo;

public:
    Handle(HLRBRep_Algo) handle() {
        return hAlgo;
    }
    </ClassDeclarations>
    </PythonExport>
</GenerateModel>
