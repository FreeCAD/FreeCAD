
// This file is generated by src/Tools/generateTemaplates/templateClassPyExport.py out of the XML file
// Every change you make here get lost at the next full rebuild!
#ifndef ROBOT_ROBOT6AXISPY_H
#define ROBOT_ROBOT6AXISPY_H

#include <Base/PersistencePy.h>
#include <Mod/Robot/App/Robot6Axis.h>
#include <string>

namespace Robot
{

//===========================================================================
// Robot6AxisPy - Python wrapper
//===========================================================================

/** The python export class for Robot6Axis
 */
class RobotExport Robot6AxisPy : public Base::PersistencePy
{
public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyGetSetDef    GetterSetter[];
    virtual PyTypeObject *GetType(void) {return &Type;};

public:
    Robot6AxisPy(Robot6Axis *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(struct _typeobject *, PyObject *, PyObject *);
    virtual int PyInit(PyObject* args, PyObject*k);
    ~Robot6AxisPy();

    typedef Robot6Axis* PointerType ;

    virtual PyObject *_repr(void);        // the representation
    std::string representation(void) const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    /// callback for the check() method
    static PyObject * staticCallback_check (PyObject *self, PyObject *args);
    /// implementer for the check() method
    PyObject*  check(PyObject *args);
    //@}


    /** @name callbacks and implementers for the python object attributes */
    //@{
    ///getter callback for the Axis1 attribute
    static PyObject * staticCallback_getAxis1 (PyObject *self, void *closure);
    /// getter for the Axis1 attribute
    Py::Float getAxis1(void) const;
    /// setter callback for the Axis1 attribute
    static int staticCallback_setAxis1 (PyObject *self, PyObject *value, void *closure);
    /// setter for the Axis1 attribute
    void setAxis1(Py::Float arg);
    ///getter callback for the Axis2 attribute
    static PyObject * staticCallback_getAxis2 (PyObject *self, void *closure);
    /// getter for the Axis2 attribute
    Py::Float getAxis2(void) const;
    /// setter callback for the Axis2 attribute
    static int staticCallback_setAxis2 (PyObject *self, PyObject *value, void *closure);
    /// setter for the Axis2 attribute
    void setAxis2(Py::Float arg);
    ///getter callback for the Axis3 attribute
    static PyObject * staticCallback_getAxis3 (PyObject *self, void *closure);
    /// getter for the Axis3 attribute
    Py::Float getAxis3(void) const;
    /// setter callback for the Axis3 attribute
    static int staticCallback_setAxis3 (PyObject *self, PyObject *value, void *closure);
    /// setter for the Axis3 attribute
    void setAxis3(Py::Float arg);
    ///getter callback for the Axis4 attribute
    static PyObject * staticCallback_getAxis4 (PyObject *self, void *closure);
    /// getter for the Axis4 attribute
    Py::Float getAxis4(void) const;
    /// setter callback for the Axis4 attribute
    static int staticCallback_setAxis4 (PyObject *self, PyObject *value, void *closure);
    /// setter for the Axis4 attribute
    void setAxis4(Py::Float arg);
    ///getter callback for the Axis5 attribute
    static PyObject * staticCallback_getAxis5 (PyObject *self, void *closure);
    /// getter for the Axis5 attribute
    Py::Float getAxis5(void) const;
    /// setter callback for the Axis5 attribute
    static int staticCallback_setAxis5 (PyObject *self, PyObject *value, void *closure);
    /// setter for the Axis5 attribute
    void setAxis5(Py::Float arg);
    ///getter callback for the Axis6 attribute
    static PyObject * staticCallback_getAxis6 (PyObject *self, void *closure);
    /// getter for the Axis6 attribute
    Py::Float getAxis6(void) const;
    /// setter callback for the Axis6 attribute
    static int staticCallback_setAxis6 (PyObject *self, PyObject *value, void *closure);
    /// setter for the Axis6 attribute
    void setAxis6(Py::Float arg);
    ///getter callback for the Tcp attribute
    static PyObject * staticCallback_getTcp (PyObject *self, void *closure);
    /// getter for the Tcp attribute
    Py::Object getTcp(void) const;
    /// setter callback for the Tcp attribute
    static int staticCallback_setTcp (PyObject *self, PyObject *value, void *closure);
    /// setter for the Tcp attribute
    void setTcp(Py::Object arg);
    ///getter callback for the Base attribute
    static PyObject * staticCallback_getBase (PyObject *self, void *closure);
    /// getter for the Base attribute
    Py::Object getBase(void) const;
    /// setter callback for the Base attribute
    static int staticCallback_setBase (PyObject *self, PyObject *value, void *closure);
    /// setter for the Base attribute
    void setBase(Py::Object arg);
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(char *attr);              // __getattr__ function
    int _setattr(char *attr, PyObject *value);        // __setattr__ function

    /// getter for the object handled by this class
    Robot6Axis *getRobot6AxisPtr(void) const;

    /** @name additional declarations and methods for the wrapper class */
    //@{

    //@}
};

}  //namespace Robot

#endif  // ROBOT_ROBOT6AXISPY_H


