
// This file is generated by src/Tools/generateTemaplates/templateClassPyExport.py out of the XML file
// Every change you make here get lost at the next full rebuild!
#ifndef BASE_PLACEMENTPY_H
#define BASE_PLACEMENTPY_H

#include <Base/PyObjectBase.h>
#include <Base/Placement.h>
#include <string>

namespace Base
{

//===========================================================================
// PlacementPy - Python wrapper
//===========================================================================

/** The python export class for Placement
 */
class BaseExport PlacementPy : public Base::PyObjectBase
{
public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyGetSetDef    GetterSetter[];
    virtual PyTypeObject *GetType(void) {return &Type;};

public:
    PlacementPy(Placement *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(struct _typeobject *, PyObject *, PyObject *);
    virtual int PyInit(PyObject* args, PyObject*k);
    ~PlacementPy();

    typedef Placement* PointerType ;

    virtual PyObject *_repr(void);        // the representation
    std::string representation(void) const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    /// callback for the copy() method
    static PyObject * staticCallback_copy (PyObject *self, PyObject *args);
    /// implementer for the copy() method
    PyObject*  copy(PyObject *args);
    /// callback for the move() method
    static PyObject * staticCallback_move (PyObject *self, PyObject *args);
    /// implementer for the move() method
    PyObject*  move(PyObject *args);
    /// callback for the multiply() method
    static PyObject * staticCallback_multiply (PyObject *self, PyObject *args);
    /// implementer for the multiply() method
    PyObject*  multiply(PyObject *args);
    /// callback for the multVec() method
    static PyObject * staticCallback_multVec (PyObject *self, PyObject *args);
    /// implementer for the multVec() method
    PyObject*  multVec(PyObject *args);
    /// callback for the toMatrix() method
    static PyObject * staticCallback_toMatrix (PyObject *self, PyObject *args);
    /// implementer for the toMatrix() method
    PyObject*  toMatrix(PyObject *args);
    /// callback for the inverse() method
    static PyObject * staticCallback_inverse (PyObject *self, PyObject *args);
    /// implementer for the inverse() method
    PyObject*  inverse(PyObject *args);
    /// callback for the isNull() method
    static PyObject * staticCallback_isNull (PyObject *self, PyObject *args);
    /// implementer for the isNull() method
    PyObject*  isNull(PyObject *args);
    //@}


    /** @name callbacks and implementers for the python object attributes */
    //@{
    ///getter callback for the Base attribute
    static PyObject * staticCallback_getBase (PyObject *self, void *closure);
    /// getter for the Base attribute
    Py::Object getBase(void) const;
    /// setter callback for the Base attribute
    static int staticCallback_setBase (PyObject *self, PyObject *value, void *closure);
    /// setter for the Base attribute
    void setBase(Py::Object arg);
    ///getter callback for the Rotation attribute
    static PyObject * staticCallback_getRotation (PyObject *self, void *closure);
    /// getter for the Rotation attribute
    Py::Object getRotation(void) const;
    /// setter callback for the Rotation attribute
    static int staticCallback_setRotation (PyObject *self, PyObject *value, void *closure);
    /// setter for the Rotation attribute
    void setRotation(Py::Object arg);
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(char *attr);              // __getattr__ function
    int _setattr(char *attr, PyObject *value);        // __setattr__ function

    /// getter for the object handled by this class
    Placement *getPlacementPtr(void) const;

    /** @name additional declarations and methods for the wrapper class */
    //@{

    //@}
};

}  //namespace Base

#endif  // BASE_PLACEMENTPY_H


