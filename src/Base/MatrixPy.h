
// This file is generated by src/Tools/generateTemaplates/templateClassPyExport.py out of the XML file
// Every change you make here get lost at the next full rebuild!
#ifndef BASE_MATRIXPY_H
#define BASE_MATRIXPY_H

#include <Base/PyObjectBase.h>
#include <Base/Matrix.h>
#include <string>

namespace Base
{

//===========================================================================
// MatrixPy - Python wrapper
//===========================================================================

/** The python export class for Matrix
 */
class BaseExport MatrixPy : public Base::PyObjectBase
{
public:
    static PyTypeObject   Type;
    static PyMethodDef    Methods[];
    static PyNumberMethods Number[];
    static PyObject * richCompare(PyObject *v, PyObject *w, int op);
    static PyGetSetDef    GetterSetter[];
    virtual PyTypeObject *GetType(void) {return &Type;};

public:
    MatrixPy(Matrix4D *pcObject, PyTypeObject *T = &Type);
    static PyObject *PyMake(struct _typeobject *, PyObject *, PyObject *);
    virtual int PyInit(PyObject* args, PyObject*k);
    ~MatrixPy();

    typedef Matrix4D* PointerType ;

    virtual PyObject *_repr(void);        // the representation
    std::string representation(void) const;

    /** @name callbacks and implementers for the python object methods */
    //@{
    /// callback for the move() method
    static PyObject * staticCallback_move (PyObject *self, PyObject *args);
    /// implementer for the move() method
    PyObject*  move(PyObject *args);
    /// callback for the scale() method
    static PyObject * staticCallback_scale (PyObject *self, PyObject *args);
    /// implementer for the scale() method
    PyObject*  scale(PyObject *args);
    /// callback for the unity() method
    static PyObject * staticCallback_unity (PyObject *self, PyObject *args);
    /// implementer for the unity() method
    PyObject*  unity(PyObject *args);
    /// callback for the transform() method
    static PyObject * staticCallback_transform (PyObject *self, PyObject *args);
    /// implementer for the transform() method
    PyObject*  transform(PyObject *args);
    /// callback for the rotateX() method
    static PyObject * staticCallback_rotateX (PyObject *self, PyObject *args);
    /// implementer for the rotateX() method
    PyObject*  rotateX(PyObject *args);
    /// callback for the rotateY() method
    static PyObject * staticCallback_rotateY (PyObject *self, PyObject *args);
    /// implementer for the rotateY() method
    PyObject*  rotateY(PyObject *args);
    /// callback for the rotateZ() method
    static PyObject * staticCallback_rotateZ (PyObject *self, PyObject *args);
    /// implementer for the rotateZ() method
    PyObject*  rotateZ(PyObject *args);
    /// callback for the multiply() method
    static PyObject * staticCallback_multiply (PyObject *self, PyObject *args);
    /// implementer for the multiply() method
    PyObject*  multiply(PyObject *args);
    /// callback for the invert() method
    static PyObject * staticCallback_invert (PyObject *self, PyObject *args);
    /// implementer for the invert() method
    PyObject*  invert(PyObject *args);
    /// callback for the inverse() method
    static PyObject * staticCallback_inverse (PyObject *self, PyObject *args);
    /// implementer for the inverse() method
    PyObject*  inverse(PyObject *args);
    /// callback for the transpose() method
    static PyObject * staticCallback_transpose (PyObject *self, PyObject *args);
    /// implementer for the transpose() method
    PyObject*  transpose(PyObject *args);
    /// callback for the transposed() method
    static PyObject * staticCallback_transposed (PyObject *self, PyObject *args);
    /// implementer for the transposed() method
    PyObject*  transposed(PyObject *args);
    /// callback for the determinant() method
    static PyObject * staticCallback_determinant (PyObject *self, PyObject *args);
    /// implementer for the determinant() method
    PyObject*  determinant(PyObject *args);
    /// callback for the isOrthogonal() method
    static PyObject * staticCallback_isOrthogonal (PyObject *self, PyObject *args);
    /// implementer for the isOrthogonal() method
    PyObject*  isOrthogonal(PyObject *args);
    /// callback for the submatrix() method
    static PyObject * staticCallback_submatrix (PyObject *self, PyObject *args);
    /// implementer for the submatrix() method
    PyObject*  submatrix(PyObject *args);
    /// callback for the analyze() method
    static PyObject * staticCallback_analyze (PyObject *self, PyObject *args);
    /// implementer for the analyze() method
    PyObject*  analyze(PyObject *args);
    //@}

    /** @name callbacks and implementers for the python object number protocol */
    //@{
    /// callback for the number_add_handler
    static PyObject * number_add_handler (PyObject *self, PyObject *other);
    /// callback for the number_subtract_handler
    static PyObject * number_subtract_handler (PyObject *self, PyObject *other);
    /// callback for the number_multiply_handler
    static PyObject * number_multiply_handler (PyObject *self, PyObject *other);
    /// callback for the number_divide_handler
    static PyObject * number_divide_handler (PyObject *self, PyObject *other);
    /// callback for the number_remainder_handler
    static PyObject * number_remainder_handler (PyObject *self, PyObject *other);
    /// callback for the number_divmod_handler
    static PyObject * number_divmod_handler (PyObject *self, PyObject *other);
    /// callback for the number_power_handler
    static PyObject * number_power_handler (PyObject *self, PyObject *other, PyObject *modulo);
    /// callback for the number_negative_handler
    static PyObject * number_negative_handler (PyObject *self);
    /// callback for the number_positive_handler
    static PyObject * number_positive_handler (PyObject *self);
    /// callback for the number_absolute_handler
    static PyObject * number_absolute_handler (PyObject *self);
    /// callback for the number_nonzero_handler
    static int number_nonzero_handler (PyObject *self);
    /// callback for the number_invert_handler
    static PyObject * number_invert_handler (PyObject *self);
    /// callback for the number_lshift_handler
    static PyObject * number_lshift_handler (PyObject *self, PyObject *other);
    /// callback for the number_rshift_handler
    static PyObject * number_rshift_handler (PyObject *self, PyObject *other);
    /// callback for the number_and_handler
    static PyObject * number_and_handler (PyObject *self, PyObject *other);
    /// callback for the number_xor_handler
    static PyObject * number_xor_handler (PyObject *self, PyObject *other);
    /// callback for the number_or_handler
    static PyObject * number_or_handler (PyObject *self, PyObject *other);
    /// callback for the number_coerce_handler
    static int number_coerce_handler (PyObject **self, PyObject **other);
    /// callback for the number_int_handler
    static PyObject * number_int_handler (PyObject *self);
    /// callback for the number_long_handler
    static PyObject * number_long_handler (PyObject *self);
    /// callback for the number_float_handler
    static PyObject * number_float_handler (PyObject *self);
    /// callback for the number_oct_handler
    static PyObject * number_oct_handler (PyObject *self);
    /// callback for the number_hex_handler
    static PyObject * number_hex_handler (PyObject *self);
    //@}

    /** @name callbacks and implementers for the python object attributes */
    //@{
    ///getter callback for the A11 attribute
    static PyObject * staticCallback_getA11 (PyObject *self, void *closure);
    /// getter for the A11 attribute
    Py::Float getA11(void) const;
    /// setter callback for the A11 attribute
    static int staticCallback_setA11 (PyObject *self, PyObject *value, void *closure);
    /// setter for the A11 attribute
    void setA11(Py::Float arg);
    ///getter callback for the A12 attribute
    static PyObject * staticCallback_getA12 (PyObject *self, void *closure);
    /// getter for the A12 attribute
    Py::Float getA12(void) const;
    /// setter callback for the A12 attribute
    static int staticCallback_setA12 (PyObject *self, PyObject *value, void *closure);
    /// setter for the A12 attribute
    void setA12(Py::Float arg);
    ///getter callback for the A13 attribute
    static PyObject * staticCallback_getA13 (PyObject *self, void *closure);
    /// getter for the A13 attribute
    Py::Float getA13(void) const;
    /// setter callback for the A13 attribute
    static int staticCallback_setA13 (PyObject *self, PyObject *value, void *closure);
    /// setter for the A13 attribute
    void setA13(Py::Float arg);
    ///getter callback for the A14 attribute
    static PyObject * staticCallback_getA14 (PyObject *self, void *closure);
    /// getter for the A14 attribute
    Py::Float getA14(void) const;
    /// setter callback for the A14 attribute
    static int staticCallback_setA14 (PyObject *self, PyObject *value, void *closure);
    /// setter for the A14 attribute
    void setA14(Py::Float arg);
    ///getter callback for the A21 attribute
    static PyObject * staticCallback_getA21 (PyObject *self, void *closure);
    /// getter for the A21 attribute
    Py::Float getA21(void) const;
    /// setter callback for the A21 attribute
    static int staticCallback_setA21 (PyObject *self, PyObject *value, void *closure);
    /// setter for the A21 attribute
    void setA21(Py::Float arg);
    ///getter callback for the A22 attribute
    static PyObject * staticCallback_getA22 (PyObject *self, void *closure);
    /// getter for the A22 attribute
    Py::Float getA22(void) const;
    /// setter callback for the A22 attribute
    static int staticCallback_setA22 (PyObject *self, PyObject *value, void *closure);
    /// setter for the A22 attribute
    void setA22(Py::Float arg);
    ///getter callback for the A23 attribute
    static PyObject * staticCallback_getA23 (PyObject *self, void *closure);
    /// getter for the A23 attribute
    Py::Float getA23(void) const;
    /// setter callback for the A23 attribute
    static int staticCallback_setA23 (PyObject *self, PyObject *value, void *closure);
    /// setter for the A23 attribute
    void setA23(Py::Float arg);
    ///getter callback for the A24 attribute
    static PyObject * staticCallback_getA24 (PyObject *self, void *closure);
    /// getter for the A24 attribute
    Py::Float getA24(void) const;
    /// setter callback for the A24 attribute
    static int staticCallback_setA24 (PyObject *self, PyObject *value, void *closure);
    /// setter for the A24 attribute
    void setA24(Py::Float arg);
    ///getter callback for the A31 attribute
    static PyObject * staticCallback_getA31 (PyObject *self, void *closure);
    /// getter for the A31 attribute
    Py::Float getA31(void) const;
    /// setter callback for the A31 attribute
    static int staticCallback_setA31 (PyObject *self, PyObject *value, void *closure);
    /// setter for the A31 attribute
    void setA31(Py::Float arg);
    ///getter callback for the A32 attribute
    static PyObject * staticCallback_getA32 (PyObject *self, void *closure);
    /// getter for the A32 attribute
    Py::Float getA32(void) const;
    /// setter callback for the A32 attribute
    static int staticCallback_setA32 (PyObject *self, PyObject *value, void *closure);
    /// setter for the A32 attribute
    void setA32(Py::Float arg);
    ///getter callback for the A33 attribute
    static PyObject * staticCallback_getA33 (PyObject *self, void *closure);
    /// getter for the A33 attribute
    Py::Float getA33(void) const;
    /// setter callback for the A33 attribute
    static int staticCallback_setA33 (PyObject *self, PyObject *value, void *closure);
    /// setter for the A33 attribute
    void setA33(Py::Float arg);
    ///getter callback for the A34 attribute
    static PyObject * staticCallback_getA34 (PyObject *self, void *closure);
    /// getter for the A34 attribute
    Py::Float getA34(void) const;
    /// setter callback for the A34 attribute
    static int staticCallback_setA34 (PyObject *self, PyObject *value, void *closure);
    /// setter for the A34 attribute
    void setA34(Py::Float arg);
    ///getter callback for the A41 attribute
    static PyObject * staticCallback_getA41 (PyObject *self, void *closure);
    /// getter for the A41 attribute
    Py::Float getA41(void) const;
    /// setter callback for the A41 attribute
    static int staticCallback_setA41 (PyObject *self, PyObject *value, void *closure);
    /// setter for the A41 attribute
    void setA41(Py::Float arg);
    ///getter callback for the A42 attribute
    static PyObject * staticCallback_getA42 (PyObject *self, void *closure);
    /// getter for the A42 attribute
    Py::Float getA42(void) const;
    /// setter callback for the A42 attribute
    static int staticCallback_setA42 (PyObject *self, PyObject *value, void *closure);
    /// setter for the A42 attribute
    void setA42(Py::Float arg);
    ///getter callback for the A43 attribute
    static PyObject * staticCallback_getA43 (PyObject *self, void *closure);
    /// getter for the A43 attribute
    Py::Float getA43(void) const;
    /// setter callback for the A43 attribute
    static int staticCallback_setA43 (PyObject *self, PyObject *value, void *closure);
    /// setter for the A43 attribute
    void setA43(Py::Float arg);
    ///getter callback for the A44 attribute
    static PyObject * staticCallback_getA44 (PyObject *self, void *closure);
    /// getter for the A44 attribute
    Py::Float getA44(void) const;
    /// setter callback for the A44 attribute
    static int staticCallback_setA44 (PyObject *self, PyObject *value, void *closure);
    /// setter for the A44 attribute
    void setA44(Py::Float arg);
    ///getter callback for the A attribute
    static PyObject * staticCallback_getA (PyObject *self, void *closure);
    /// getter for the A attribute
    Py::Sequence getA(void) const;
    /// setter callback for the A attribute
    static int staticCallback_setA (PyObject *self, PyObject *value, void *closure);
    /// setter for the A attribute
    void setA(Py::Sequence arg);
    //@}

    /// getter method for special attributes (e.g. dynamic ones)
    PyObject *getCustomAttributes(const char* attr) const;
    /// setter for special attributes (e.g. dynamic ones)
    /// Output: Success=1, Failure=-1, Ignore=0
    int setCustomAttributes(const char* attr, PyObject *obj);
    PyObject *_getattr(char *attr);              // __getattr__ function
    int _setattr(char *attr, PyObject *value);        // __setattr__ function

    /// getter for the object handled by this class
    Matrix4D *getMatrixPtr(void) const;

    /** @name additional declarations and methods for the wrapper class */
    //@{
public:
      MatrixPy(const Matrix4D & mat, PyTypeObject *T = &Type)
      :PyObjectBase(new Matrix4D(mat),T){}
      Matrix4D value() const
      { return *(getMatrixPtr()); }
    
    //@}
};

}  //namespace Base

#endif  // BASE_MATRIXPY_H


