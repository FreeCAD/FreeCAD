name: CMake

on: [push, pull_request]

env:
  GENERATOR: "Unix Makefiles"
  CMAKE_BUILD_TYPE: "${CMAKE_BUILD_TYPE:-Release}"

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Ubuntu Latest GCC 10", artifact: "Linux.7z",
            os: ubuntu-latest,
            cc: "gcc-10", cxx: "g++-10",
            cmake_flags: "-DPYTHON_EXECUTABLE=/usr/bin/python3 -DBUILD_FEM_NETGEN=ON -DBUILD_QT5=ON"
          }
        - {
            name: "Ubuntu Latest CLANG 10", artifact: "Linux.7z",
            os: ubuntu-latest,
            cc: "clang-10", cxx: "clang++-10",
            cmake_flags: "-DPYTHON_EXECUTABLE=/usr/bin/python3 -DBUILD_FEM_NETGEN=ON -DBUILD_QT5=ON"
          }

    steps:
    - uses: actions/cache@v2
      id: cache-id
      with:
        path: /var/cache/apt/archives
        key: ${{ matrix.config.os }}-cache-apt
      if: runner.os == 'Linux' 

    - name: Install Clang 10
      if: runner.os == 'Linux' && matrix.config.cc == 'clang-10'
      run: |
        sudo apt-get update -qq
        sudo apt-get install clang-10

    - name: Install Dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-add-repository -y ppa:freecad-maintainers/freecad-daily 
        sudo apt-get update -qq
        # Build deps
        sudo apt-get install -y --no-install-recommends          \
                               python-dev                       \
                               python-pyside                    \
                               python-matplotlib                \
                               python3-dev                      \
                               python3-pyside                   \
                               python3-matplotlib               \
                               libboost1.65-dev                 \
                               libboost-filesystem1.65-dev      \
                               libboost-program-options1.65-dev \
                               libboost-python1.65-dev          \
                               libboost-regex1.65-dev           \
                               libboost-signals1.65-dev         \
                               libboost-system1.65-dev          \
                               libboost-thread1.65-dev          \
                               libxerces-c-dev                  \
                               libocct-data-exchange-dev        \
                               libocct-ocaf-dev                 \
                               libocct-visualization-dev        \
                               libvtk7-dev                      \
                               libmedc-dev                      \
                               pybind11-dev                     \
                               swig                             \
                               qt4-qmake                        \
                               libqt4-opengl-dev                \
                               libqtwebkit-dev                  \
                               qtbase5-dev                      \
                               libqt5xmlpatterns5-dev           \
                               libqt5svg5-dev                   \
                               libqt5opengl5-dev                \
                               qttools5-dev                     \
                               qtwebengine5-dev                 \
                               libcoin80-dev                    \
                               libpyside-dev                    \
                               libpyside2-dev                   \
                               libshiboken-dev                  \
                               libshiboken2-dev                 \
                               pyside-tools                     \
                               pyside2-tools                    \
                               doxygen                          \
                               graphviz                         \
                               libnglib-dev                     \
                               netgen                           \
                               netgen-headers                   \
                               libmetis-dev                     \
                               libspnav-dev
        # Runtime deps
        sudo apt-get install -y --no-install-recommends freecad-daily-python3 python-pivy python3-pivy python-ply python3-ply

        # Use newer Eigen to suppress warnings
        # https://github.com/FreeCAD/FreeCAD/pull/3485
        wget http://mirrors.kernel.org/ubuntu/pool/universe/e/eigen3/libeigen3-dev_3.3.7-2_all.deb
        sudo dpkg -i libeigen3-dev_3.3.7-2_all.deb
        #export DISPLAY=:99.0
        #sh -e /etc/init.d/xvfb start

        export INSTALLED_APP_PATH="/usr/local/bin/FreeCAD"
        export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/netgen/:$LD_LIRBARY_PATH

    - name: Checkout 
      uses: actions/checkout@v2
    - name: Configure
      run: |
        mkdir build && cd build 
        CC=${{matrix.config.cc}} CXX=${{matrix.config.cxx}} cmake -Wno-dev -G"${GENERATOR}" ${{matrix.config.cmake_flags}} -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} ../
    - name: Install and Test (Linux)
      if: runner.os == 'Linux'
      run: |
        export N=$(($(grep -c ^processor /proc/cpuinfo) - 1))
        cd build
        # Stop compiling (GCC) after 2 hrs 50 min (3 hrs limit).
        # Preserves created ccache for the next build job.
        # if [ "${TRAVIS_OS_NAME}" == "linux" ]; then sudo timeout -k 175m 170m make -j2 install || true; fi
        # if [ "${TRAVIS_OS_NAME}" == "osx" ]; then sudo gtimeout -s KILL  make -j2 install; fi
        #cat $HOME/.ccache/ccache.conf
        #ccache -z -s
        df -h
        if [ "${TRAVIS_OS_NAME}" == "osx" ]; then export PATH="/usr/local/opt/ccacche/libexec:$PATH"; sudo gtimeout -s KILL 7200 make -j2; [ $? == 124 ] && { ccache -s; return 0; }  fi 
        if [ "${TRAVIS_OS_NAME}" == "linux" ]; then sudo timeout -k 175m 170m make -j2 install || true; fi
        sudo make -j${N} install
        #ccache -s
        xvfb-run --auto-servernum ${INSTALLED_APP_PATH} --console --run-test 0 || travis_terminate 1
        ${INSTALLED_APP_PATH} --log-file /tmp/FreeCAD_installed.log &
        sleep 10 && pkill FreeCAD
        cat /tmp/FreeCAD_installed.log
        grep --file=../.log_errors /tmp/FreeCAD_installed.log ; [ $? == 1 ] && echo "No errors from .log_errors file found in the log after start from /usr/local/bin" || ( echo "Error from .log_errors found!" && false )
