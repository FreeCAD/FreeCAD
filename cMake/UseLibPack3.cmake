set(ENV{PATH} "${FREECAD_LIBPACK_DIR};$ENV{PATH}")
set(ENV{CMAKE_PREFIX_PATH} ${FREECAD_LIBPACK_DIR})

# Make sure we are using the static versions of Boost here: the LibPack includes both
set(Boost_DIR ${FREECAD_LIBPACK_DIR}/lib/cmake CACHE PATH "" FORCE)
set(Boost_USE_STATIC_LIBS OFF)
find_package(Boost COMPONENTS filesystem program_options regex system thread date_time REQUIRED)

set(OCE_DIR ${FREECAD_LIBPACK_DIR}/lib/cmake CACHE PATH "" FORCE)

set(SWIG_EXECUTABLE ${FREECAD_LIBPACK_DIR}/bin/swig.exe CACHE FILEPATH "Swig" FORCE)

# Set paths to cmake config files for each Qt module
set (Qt6_DIR ${Qt6_ROOT_DIR}/lib/cmake/Qt6 CACHE PATH "")
set (Qt6AxBase_DIR ${Qt6_ROOT_DIR}/lib/cmake/Qt6AxBase CACHE PATH "")
set (Qt6AxContainer_DIR ${Qt6_ROOT_DIR}/lib/cmake/Qt6AxContainer CACHE PATH "")
set (Qt6AxServer_DIR ${Qt6_ROOT_DIR}/lib/cmake/Qt6AxServer CACHE PATH "")
set (Qt6Concurrent_DIR ${Qt6_ROOT_DIR}/lib/cmake/Qt6Concurrent CACHE PATH "")
set (Qt6Core_DIR ${Qt6_ROOT_DIR}/lib/cmake/Qt6Core CACHE PATH "")
set (Qt6DBus_DIR ${Qt6_ROOT_DIR}/lib/cmake/Qt6DBus CACHE PATH "")
set (Qt6Designer_DIR ${Qt6_ROOT_DIR}/lib/cmake/Qt6Designer CACHE PATH "")
set (Qt6Gui_DIR ${Qt6_ROOT_DIR}/lib/cmake/Qt6Gui CACHE PATH "")
set (Qt6Help_DIR ${Qt6_ROOT_DIR}/lib/cmake/Qt6Help CACHE PATH "")
set (Qt6LinguistTools_DIR ${Qt6_ROOT_DIR}/lib/cmake/Qt6LinguistTools CACHE PATH "")
set (Qt6Network_DIR ${Qt6_ROOT_DIR}/lib/cmake/Qt6Network CACHE PATH "")
set (Qt6OpenGL_DIR ${Qt6_ROOT_DIR}/lib/cmake/Qt6OpenGL CACHE PATH "")
set (Qt6OpenGLExtensions_DIR ${Qt6_ROOT_DIR}/lib/cmake/Qt6OpenGLExtensions CACHE PATH "")
set (Qt6PrintSupport_DIR ${Qt6_ROOT_DIR}/lib/cmake/Qt6PrintSupport CACHE PATH "")
set (Qt6Qml_DIR ${Qt6_ROOT_DIR}/lib/cmake/Qt6Qml CACHE PATH "")
set (Qt6Quick_DIR ${Qt6_ROOT_DIR}/lib/cmake/Qt6Quick CACHE PATH "")
set (Qt6QuickTest_DIR ${Qt6_ROOT_DIR}/lib/cmake/Qt6QuickTest CACHE PATH "")
set (Qt6QuickWidgets_DIR ${Qt6_ROOT_DIR}/lib/cmake/Qt6QuickWidgets CACHE PATH "")
set (Qt6Sql_DIR ${Qt6_ROOT_DIR}/lib/cmake/Qt6Sql CACHE PATH "")
set (Qt6Svg_DIR ${Qt6_ROOT_DIR}/lib/cmake/Qt6Svg CACHE PATH "")
set (Qt6Test_DIR ${Qt6_ROOT_DIR}/lib/cmake/Qt6Test CACHE PATH "")
set (Qt6UiPlugin_DIR ${Qt6_ROOT_DIR}/lib/cmake/Qt6UiPlugin CACHE PATH "")
set (Qt6UiTools_DIR ${Qt6_ROOT_DIR}/lib/cmake/Qt6UiTools CACHE PATH "")
set (Qt6Widgets_DIR ${Qt6_ROOT_DIR}/lib/cmake/Qt6Widgets CACHE PATH "")
set (Qt6Xml_DIR ${Qt6_ROOT_DIR}/lib/cmake/Qt6Xml CACHE PATH "")

find_library(XercesC_LIBRARY_RELEASE xerces-c_3 "${FREECAD_LIBPACK_DIR}/lib")
find_library(XercesC_LIBRARY_DEBUG xerces-c_3D "${FREECAD_LIBPACK_DIR}/lib")
if (XercesC_LIBRARY_RELEASE AND XercesC_LIBRARY_DEBUG)
    set (XercesC_LIBRARIES debug ${XercesC_LIBRARY_DEBUG} optimized ${XercesC_LIBRARY_RELEASE})
elseif (XercesC_LIBRARY_RELEASE)
    set (XercesC_LIBRARIES ${XercesC_LIBRARY_RELEASE})
elseif (XercesC_LIBRARY_DEBUG)
    set (XercesC_LIBRARIES ${XercesC_LIBRARY_DEBUG})
else()
    message (FATAL_ERROR "Could not find XercesC library in the LibPack")
endif()
set (XercesC_FOUND TRUE)

find_library(COIN3D_LIBRARY_RELEASE coin4 "${FREECAD_LIBPACK_DIR}/lib")
find_library(COIN3D_LIBRARY_DEBUG coin4d "${FREECAD_LIBPACK_DIR}/lib")
if (COIN3D_LIBRARY_RELEASE AND COIN3D_LIBRARY_DEBUG)
    set (COIN3D_LIBRARIES debug ${COIN3D_LIBRARY_DEBUG} optimized ${COIN3D_LIBRARY_RELEASE})
elseif (COIN3D_LIBRARY_RELEASE)
    set (COIN3D_LIBRARIES ${COIN3D_LIBRARY_RELEASE})
elseif (COIN3D_LIBRARY_DEBUG)
    set (COIN3D_LIBRARIES ${COIN3D_LIBRARY_DEBUG})
else()
    message (FATAL_ERROR "Could not find Coin3D library in the LibPack")
endif()
set (COIN3D_FOUND TRUE)

set (NETGENDATA ${FREECAD_LIBPACK_DIR}/include/netgen)

if (FREECAD_USE_FREETYPE)
    set(FREETYPE_INCLUDE_DIR_freetype2 ${FREECAD_LIBPACK_DIR}/include/freetype2)
endif (FREECAD_USE_FREETYPE)

set (HDF5_DIR ${FREECAD_LIBPACK_DIR}/share/cmake)

link_directories (${FREECAD_LIBPACK_DIR}/lib)
